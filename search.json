[{"title":"typeScript命令行运行","path":"/2024/12/28/typeScript命令行运行/","content":"tsc xxx.ts //执行该ts文件生成.js文件node xxx.js //运行js文件输出结果"},{"title":"jdk21新特性","path":"/2024/12/28/jdk21新特性/","content":"增强的 switch 表达式 描述：switch 现在可以用作表达式，支持返回值，并支持 case 的合并及模式匹配 public class Main public static void main(String[] args) String day = MONDAY; String result = switch (day) case MONDAY, FRIDAY - Workday; case SATURDAY, SUNDAY - Weekend; default - throw new IllegalArgumentException(Unknown day); ; System.out.println(result); // 输出：Workday 虚拟线程（Virtual Threads） 虚拟线程是轻量级线程，由 JDK 管理的，可以创建大量线程而不会产生过多的资源开销 public class Main public static void main(String[] args) throws InterruptedException Thread.startVirtualThread(() - System.out.println(Hello from virtual thread); ).join(); 流（Stream API）增强 新方法：takeWhile、dropWhile、iterate 流操作新增了 takeWhile 和 dropWhile，用于基于条件筛选流元素，iterate 可以创建无限流 public class Main public static void main(String[] args) ListInteger numbers = List.of(1, 2, 3, 4, 5, 6); numbers.stream().takeWhile(n - n 4).forEach(System.out::println); // 输出 1, 2, 3 集合 API 增强 List.of、Set.of、Map.of 静态工厂方法 用于创建不可变的集合对象，简化了集合初始化的过程 public class Main public static void main(String[] args) ListString list = List.of(a, b, c); SetString set = Set.of(a, b, c); MapString, Integer map = Map.of(a, 1, b, 2); copyOf 方法用于创建现有集合的不可变副本 public class Main public static void main(String[] args) ListString list = List.of(a, b); ListString copyList = List.copyOf(list); // 创建不可变副本 新日期和时间 API JDK 8 引入了 java.time API，JDK 21 中此 API 经过改进，支持更多的日期和时间操作 public class Main public static void main(String[] args) LocalDate date = LocalDate.now(); LocalTime time = LocalTime.now(); LocalDateTime dateTime = LocalDateTime.of(date, time); 其他增强特性 public class Main public static void main(String[] args) String json = name: John, age: 30 ; Var 局部变量类型推断 public class Main public static void main(String[] args) var list = List.of(a, b, c); for (var item : list) System.out.println(item);"},{"title":"java中的大数","path":"/2024/12/28/java中的大数/","content":"BigDecimal 适用于任意精度的浮点数运算 1、add(BigDecimal val): 两个大浮点数相加 import java.math.BigDecimal;public class BigDecimalTest public static void main(String[] args) BigDecimal bigDecimal = new BigDecimal(50000000); BigDecimal bigDecimal1 = new BigDecimal(30000000); bigDecimal = bigDecimal.add(bigDecimal1); System.out.println(bigDecimal:+bigDecimal); // 结果：bigDecimal:80000000 subtract(BigDecimal val): 两个大浮点数相减 import java.math.BigDecimal;public class BigDecimalTest public static void main(String[] args) BigDecimal bigDecimal = new BigDecimal(50000000); BigDecimal bigDecimal1 = new BigDecimal(30000000); bigDecimal = bigDecimal.subtract(bigDecimal1); System.out.println(bigDecimal:+bigDecimal); // 结果：bigDecimal:20000000 multiply(BigDecimal val): 两个大浮点数相乘 import java.math.BigDecimal;public class BigDecimalTest public static void main(String[] args) BigDecimal bigDecimal = new BigDecimal(50000000); BigDecimal bigDecimal1 = new BigDecimal(30000000); bigDecimal = bigDecimal.multiply(bigDecimal1); System.out.println(bigDecimal:+bigDecimal); // 结果：bigDecimal:150000000000000000 divide(BigDecimal val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式 import java.math.BigDecimal;public class BigDecimalTest public static void main(String[] args) BigDecimal bigDecimal = new BigDecimal(50000000); BigDecimal bigDecimal1 = new BigDecimal(30000000); bigDecimal = bigDecimal.divide(bigDecimal1, BigDecimal.ROUND_HALF_UP); System.out.println(bigDecimal:+bigDecimal); // 结果：bigDecimal:1.666666666666666666666666666666666666666666666666666666666666666666 BigInteger: 适用于任意精度的整数运算 1、add(BigInteger val): 两个大浮点数相加 import java.math.BigInteger;public class BigIntegerTest public static void main(String[] args) BigInteger BigInteger = new BigInteger(50000000); BigInteger BigInteger1 = new BigInteger(30000000); BigInteger = BigInteger.add(BigInteger1); System.out.println(BigInteger:+BigInteger); // 结果：BigInteger:80000000 subtract(BigInteger val): 两个大浮点数相减 import java.math.BigInteger;public class BigIntegerTest public static void main(String[] args) BigInteger BigInteger = new BigInteger(50000000); BigInteger BigInteger1 = new BigInteger(30000000); BigInteger = BigInteger.subtract(BigInteger1); System.out.println(BigInteger:+BigInteger); // 结果：BigInteger:20000000 multiply(BigInteger val): 两个大浮点数相乘 import java.math.BigInteger;public class BigIntegerTest public static void main(String[] args) BigInteger BigInteger = new BigInteger(50000000); BigInteger BigInteger1 = new BigInteger(30000000); BigInteger = BigInteger.multiply(BigInteger1); System.out.println(BigInteger:+BigInteger); // 结果：BigInteger:150000000000000000 divide(BigInteger val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式 import java.math.BigInteger;public class BigIntegerTest public static void main(String[] args) BigInteger BigInteger = new BigInteger(50000000); BigInteger BigInteger1 = new BigInteger(30000000); BigInteger = BigInteger.divide(BigInteger1); System.out.println(BigInteger:+BigInteger); // 结果：BigInteger:1"},{"title":"Hello World","path":"/2024/12/28/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new My New Post More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment"}]