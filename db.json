{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-stellar/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/plugins/copycode.js","path":"js/plugins/copycode.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/search/algolia-search.js","path":"js/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/artalk_latest_comment.js","path":"js/services/artalk_latest_comment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/friends.js","path":"js/services/friends.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/fcircle.js","path":"js/services/fcircle.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/ghinfo.js","path":"js/services/ghinfo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/giscus_latest_comment.js","path":"js/services/giscus_latest_comment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/mdrender.js","path":"js/services/mdrender.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/memos.js","path":"js/services/memos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/siteinfo.js","path":"js/services/siteinfo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/sites.js","path":"js/services/sites.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/timeline.js","path":"js/services/timeline.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/twikoo_latest_comment.js","path":"js/services/twikoo_latest_comment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/waline_latest_comment.js","path":"js/services/waline_latest_comment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/services/weibo.js","path":"js/services/weibo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-stellar/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/xxd.png","path":"images/xxd.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/HashMap.md","hash":"c718ff4068043957fd69e659a21a458d001991fa","modified":1739617699254},{"_id":"source/_posts/Excel.md","hash":"11eb895235ecdbc310a3cf9a3bef583f40ed96fc","modified":1742386151288},{"_id":"source/_posts/Servlet学习路线.md","hash":"a4d0258031ebd1b7bc4320611a0030389161f606","modified":1739798560027},{"_id":"source/_posts/Servlet项目.md","hash":"e4cd9b46786d099891fbb01456c86a813fb56563","modified":1739798647009},{"_id":"source/_posts/java中的大数.md","hash":"f147a109a5960fd4749a40797c5997f0bcb5760e","modified":1735137818850},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1735376931253},{"_id":"source/_posts/jdk21新特性.md","hash":"140dda32c731c887c510e454f67165fd0bfc3b70","modified":1734239770256},{"_id":"source/_posts/typeScript命令行运行.md","hash":"e713d44129dc63a471636130cd429404b62f68dd","modified":1734239770256},{"_id":"source/_posts/初级.md","hash":"f3c65b2b0fe1793236eed66e8d34f6417c69ae44","modified":1739683297932},{"_id":"source/_posts/技术松鼠症.md","hash":"5d75b5f6e2964955a7325b246ba9822bd5f31592","modified":1739627385490},{"_id":"source/_posts/如何判断自己不适合做一名软件开发工程师.md","hash":"920a1d5d22ec54e3cd8c428b6565d6294832070f","modified":1739688109107},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/search.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734233006751},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/tree.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1734233006783},{"_id":"themes/hexo-theme-stellar/.gitignore","hash":"aec56243aebe8fc6e6492c9f478418623db1129e","modified":1734233006736},{"_id":"themes/hexo-theme-stellar/.npmignore","hash":"4956097c64018d5bbe22b225c29538ce92bd6827","modified":1734233006736},{"_id":"themes/hexo-theme-stellar/LICENSE","hash":"1375a2c391e8574ab12c2911da44410df1435320","modified":1734233006736},{"_id":"themes/hexo-theme-stellar/README.md","hash":"88e16fa48f6864fc4b70cb595719cdba29a13122","modified":1734233006736},{"_id":"themes/hexo-theme-stellar/giscus.json","hash":"de712d16aaf98e9689d0857102329c441d9df087","modified":1734233006737},{"_id":"themes/hexo-theme-stellar/npm-publish.sh","hash":"827edba0a9adddb9e4ce40dd6b2f03991e643345","modified":1734233006756},{"_id":"themes/hexo-theme-stellar/package.json","hash":"8878c74d6ec5ba0566ab5adcf7f5c230f1cc4a25","modified":1734233006756},{"_id":"themes/hexo-theme-stellar/_config.yml","hash":"940eb429ea242e08f2d7d1ed62ff53a763142469","modified":1735136212986},{"_id":"themes/hexo-theme-stellar/_data/icons.yml","hash":"52ced328b946afa28484083a9dba2fd326caefc8","modified":1734233006737},{"_id":"themes/hexo-theme-stellar/_data/widgets.yml","hash":"9ee1f7ecdb13f998ce963074c03194923d7526ff","modified":1734233006737},{"_id":"themes/hexo-theme-stellar/languages/zh-CN.yml","hash":"cf8511628205d13946cd150e6c10661c4476465e","modified":1734233006737},{"_id":"themes/hexo-theme-stellar/languages/zh-TW.yml","hash":"97c119c84f476a5672cccc9f28e4edbea2bc6728","modified":1734233006737},{"_id":"themes/hexo-theme-stellar/layout/archive.ejs","hash":"6fb4327864975cf39a0b2f0c768bfa53ac76c108","modified":1734233006754},{"_id":"themes/hexo-theme-stellar/layout/404.ejs","hash":"66d6d7f4e10993eb1858035c9910002d672aa38b","modified":1734233006739},{"_id":"themes/hexo-theme-stellar/languages/en.yml","hash":"1e691e000bbd51e37a0aad84e3d6bb02b35cb3a9","modified":1734233006737},{"_id":"themes/hexo-theme-stellar/layout/categories.ejs","hash":"36dae638aa70dc926eea0d1c5f8694d1de76f2ee","modified":1734233006755},{"_id":"themes/hexo-theme-stellar/layout/index.ejs","hash":"1feace2789b0010bfffcf2c52de969e53cdb6f08","modified":1734233006755},{"_id":"themes/hexo-theme-stellar/layout/index_topic.ejs","hash":"ab01080349a6a1bac01978535a4726129850b458","modified":1734233006755},{"_id":"themes/hexo-theme-stellar/layout/notebooks.ejs","hash":"801f64214fc500fd054a99b77315b16281161db3","modified":1734233006755},{"_id":"themes/hexo-theme-stellar/layout/index_wiki.ejs","hash":"5114829464ee4f23007623c4d35a8d84926e85bb","modified":1734233006755},{"_id":"themes/hexo-theme-stellar/layout/notes.ejs","hash":"235db58fc61814d8892655202c2990c543fc7472","modified":1734233006756},{"_id":"themes/hexo-theme-stellar/layout/page.ejs","hash":"5aae4c3489d2975b1d8c48de3ba9194716e2228c","modified":1734233006756},{"_id":"themes/hexo-theme-stellar/layout/tags.ejs","hash":"00971cf14986a2dfe83f7fba67fda3c18e3c4185","modified":1734233006756},{"_id":"themes/hexo-theme-stellar/layout/layout.ejs","hash":"5b17cbb9ffcc221ad3abe285f86088d926ee486e","modified":1734238494653},{"_id":"themes/hexo-theme-stellar/layout/_partial/head.ejs","hash":"96a1042ab4c00ce7ba97e04ea3edfe5d62698910","modified":1734233006743},{"_id":"themes/hexo-theme-stellar/layout/_partial/menubtn.ejs","hash":"828d6a155c8fcb233f8308cddcfbcdad496b0cae","modified":1734233006747},{"_id":"themes/hexo-theme-stellar/layout/_partial/scripts.ejs","hash":"09e40fd08c71499de10f0ab6052b1a1f4afe7687","modified":1734233006747},{"_id":"themes/hexo-theme-stellar/layout/_plugins/copycode.ejs","hash":"62d77cd49a451b2cd385645c436552efb6c5c49c","modified":1734233006752},{"_id":"themes/hexo-theme-stellar/layout/_plugins/heti.ejs","hash":"117f9ae07e19dd30300f1fd4e2dfa7df5b3d14fa","modified":1734233006753},{"_id":"themes/hexo-theme-stellar/layout/_plugins/index.ejs","hash":"82f2be4f19fa373a1059d258016ee2c56d48ead6","modified":1734233006753},{"_id":"themes/hexo-theme-stellar/layout/_plugins/fancybox.ejs","hash":"4962974aae8da07cd52fa37af636b8ebf0264c55","modified":1734233006753},{"_id":"themes/hexo-theme-stellar/layout/_plugins/lazyload.ejs","hash":"c744aebfc46d08d2dc4b98f178b706bc3a54849c","modified":1734233006753},{"_id":"themes/hexo-theme-stellar/layout/_plugins/mathjax.ejs","hash":"1c3976b960b637f6d070ae42749513f6fd4c970e","modified":1734233006753},{"_id":"themes/hexo-theme-stellar/layout/_plugins/mermaid.ejs","hash":"41367af98fea9caebaf6f72e293acf6d4ce13612","modified":1734233006753},{"_id":"themes/hexo-theme-stellar/layout/_plugins/preload.ejs","hash":"e20d086d9efd002c769015236f2037e34f1df286","modified":1734233006753},{"_id":"themes/hexo-theme-stellar/layout/_plugins/scrollreveal.ejs","hash":"c09f34dfa7faa8a0ed64df3ff74db8d9af5819c6","modified":1734233006754},{"_id":"themes/hexo-theme-stellar/layout/_plugins/swiper.ejs","hash":"f9d12a45ec5313c712d54bce7ca950b675e0e555","modified":1734233006754},{"_id":"themes/hexo-theme-stellar/layout/_plugins/tianli_gpt.ejs","hash":"640b05f1f88f00da9953bba1012c6c3a1876638c","modified":1734233006754},{"_id":"themes/hexo-theme-stellar/scripts/events/index.js","hash":"264a36d64157e8a6f5d7745bc4d254bf834e1654","modified":1734233006756},{"_id":"themes/hexo-theme-stellar/scripts/generators/404.js","hash":"8f9551a22fdfca014ddb74d7430d370625ce6540","modified":1734233006759},{"_id":"themes/hexo-theme-stellar/scripts/filters/index.js","hash":"1a58aab1d3161a32a449ed53079af9a3f9abc4a8","modified":1734233006758},{"_id":"themes/hexo-theme-stellar/scripts/generators/categories.js","hash":"df8407f72e06071529a71b8053c35b0a14acaa62","modified":1734233006759},{"_id":"themes/hexo-theme-stellar/scripts/generators/author.js","hash":"45391cf62aa5993b3572008ab16c3b737cd56793","modified":1734233006759},{"_id":"themes/hexo-theme-stellar/scripts/generators/search.js","hash":"7cc456c46753ad3143a891c05285fd149b20d548","modified":1734233006759},{"_id":"themes/hexo-theme-stellar/scripts/generators/notebooks.js","hash":"c641923e43de3a9287f832993a3436c6da6ac91f","modified":1734233006759},{"_id":"themes/hexo-theme-stellar/scripts/generators/tags.js","hash":"b1a0d5e1686de1f6ace4e2b6ba25bae9327222d9","modified":1734233006760},{"_id":"themes/hexo-theme-stellar/scripts/generators/topic.js","hash":"605269fd7a7603478f5c0a4904521462d6bf2f01","modified":1734233006760},{"_id":"themes/hexo-theme-stellar/scripts/generators/wiki.js","hash":"ddf42eac97af654c450aefe33b800836428ed6c8","modified":1734233006760},{"_id":"themes/hexo-theme-stellar/scripts/helpers/category_color.js","hash":"6f315139971452f99b734aa41f9f8a3ead95435c","modified":1734233006760},{"_id":"themes/hexo-theme-stellar/scripts/helpers/icon.js","hash":"95d67ebb541313c55b6e3ef820f7c15ebac4936a","modified":1734233006760},{"_id":"themes/hexo-theme-stellar/scripts/helpers/related_posts.js","hash":"fb78f5e505505afe2ad865ff378d24b548aa2b9e","modified":1734233006761},{"_id":"themes/hexo-theme-stellar/scripts/helpers/parse_config.js","hash":"c20c292905c6aa8ec83bc7fce48a0bc90244c8ee","modified":1734233006760},{"_id":"themes/hexo-theme-stellar/scripts/helpers/scrollreveal.js","hash":"5723699403bfea23bf568bb1d2b6f876c8fae975","modified":1734233006761},{"_id":"themes/hexo-theme-stellar/scripts/helpers/stellar_info.js","hash":"a964e6d3806bb54e67b38a46bd4e2edd69639158","modified":1734233006761},{"_id":"themes/hexo-theme-stellar/scripts/helpers/utils.js","hash":"0a3a305aec97abc8dd92df3e3ebda659086bfc29","modified":1734233006761},{"_id":"themes/hexo-theme-stellar/scripts/tags/index.js","hash":"5c1c1c1032b1d553cf224313aa9603dc8302f8dc","modified":1734233006761},{"_id":"themes/hexo-theme-stellar/scripts/tags/inline-labels.js","hash":"8bfec313d833dfc2b3fbb67910852ff925af300e","modified":1734233006761},{"_id":"themes/hexo-theme-stellar/source/css/_custom.styl","hash":"7eec956fcf91ed374f91f47b15f68d337ea251b8","modified":1734233006783},{"_id":"themes/hexo-theme-stellar/source/css/main.styl","hash":"6feec549d62aa19cf0e3ae381bb5a2d15def8bc0","modified":1734233006787},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/layout.ejs","hash":"34908153b5a108608f4485f2115f7012332dcb98","modified":1734233006740},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/script.ejs","hash":"5475907bff7c62afe8ddf0b1a48fc78cbf54e45c","modified":1734233006740},{"_id":"themes/hexo-theme-stellar/source/js/main.js","hash":"3c33607fdc207291f5708d4233515ecf5bae5b8b","modified":1734233006787},{"_id":"themes/hexo-theme-stellar/layout/_partial/cover/index.ejs","hash":"9bccdefbcd600097dbd6a813ff5619d1d41a59ee","modified":1734233006742},{"_id":"themes/hexo-theme-stellar/layout/_partial/cover/wiki_cover.ejs","hash":"1492c8ad5838cb5c0a2b5b260066a1422c4f320b","modified":1734233006743},{"_id":"themes/hexo-theme-stellar/layout/_partial/scripts/defines.ejs","hash":"4cf7b45db371e9bd0693155c8cfac4e1a6f39339","modified":1734233006748},{"_id":"themes/hexo-theme-stellar/layout/_partial/cover/post_cover.ejs","hash":"a5c08f3759f88f3f32fa4b3f9e85aa4f121586df","modified":1734238519089},{"_id":"themes/hexo-theme-stellar/layout/_partial/scripts/services.ejs","hash":"c946aba5f4819eb2ecd74867764e9635731591c1","modified":1734233006748},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/footer.ejs","hash":"994bafe921c0972e95073b36e7082c54da591ab3","modified":1734233006744},{"_id":"themes/hexo-theme-stellar/layout/_partial/scripts/sidebar.ejs","hash":"5f9a414953ac3fce0d7b3969d49ef737b18ee2fe","modified":1734233006748},{"_id":"themes/hexo-theme-stellar/layout/_partial/scripts/tagtree.ejs","hash":"39cbddebb904bd743b274c4807dc36f2aeac6709","modified":1734233006748},{"_id":"themes/hexo-theme-stellar/layout/_partial/scripts/theme.ejs","hash":"7582a38267c6d8300363c1c3b51c4ade671c7e58","modified":1734233006748},{"_id":"themes/hexo-theme-stellar/layout/_partial/scripts/utils.ejs","hash":"2e423517be7fa73fc3accb7a0cbaed2f2e686b75","modified":1734233006748},{"_id":"themes/hexo-theme-stellar/layout/_partial/sidebar/index_leftbar.ejs","hash":"d9d369c26274a86ef6c7d83ce0fd62d83a2360f1","modified":1734233006749},{"_id":"themes/hexo-theme-stellar/layout/_partial/sidebar/index_rightbar.ejs","hash":"d1d55f293a161eb1c860330ff395202b70be6349","modified":1734233006749},{"_id":"themes/hexo-theme-stellar/layout/_partial/sidebar/search.ejs","hash":"e156bb8d9b164ead1f6cd83eb1994e5ebc4fdac4","modified":1734233006749},{"_id":"themes/hexo-theme-stellar/layout/_partial/sidebar/logo.ejs","hash":"52d20d37fe7466abd897a404839ed11d0242f0d7","modified":1734233006749},{"_id":"themes/hexo-theme-stellar/layout/_partial/sidebar/menu.ejs","hash":"32087b5276ec5ff3286f81ba64da34eca1ac1834","modified":1734233006749},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/author.ejs","hash":"0e7330ef9a7cdba281e9dbac193378df13ec6078","modified":1734233006750},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/ghissues.ejs","hash":"f30865fbcc40a14011ff364f1996e0d27ed2e8f7","modified":1734233006750},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/ghrepo.ejs","hash":"8c254a372b360f84e508d9ed2b6696ba51ce3914","modified":1734233006750},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/ghuser.ejs","hash":"7890c603bbe1c13747f6b01e47e60bef81093051","modified":1734233006751},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/linklist.ejs","hash":"cd250253d2596baba9a5f4c261b9ccf63a909a61","modified":1734233006751},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/markdown.ejs","hash":"1a798a8d81698611db318f168ab157e5bc35d7e7","modified":1734233006751},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/recent.ejs","hash":"616a3be2a7f305e1f2c13fa284ef7e4ce1c6b23d","modified":1734233006751},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/related.ejs","hash":"f4187422d58a93c730d7bb32ac4775f2d05c9223","modified":1734233006751},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/tagcloud.ejs","hash":"2b3f8a1cfb13fa4c624d76ee89986262b8a5967a","modified":1734233006752},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/tagtree.ejs","hash":"87cf08cece4f7fb5529490f6de339dca7ebded23","modified":1734233006752},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/toc.ejs","hash":"3071c06804f911580e0ae7f069479935cb050ab4","modified":1734233006752},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/tree.ejs","hash":"d277f44b17846d4129438facde75007c09a8e25b","modified":1734233006752},{"_id":"themes/hexo-theme-stellar/layout/_plugins/search/algolia_search.ejs","hash":"47158a4687092c0a4a5b217a46e6d9b60f331279","modified":1734233006754},{"_id":"themes/hexo-theme-stellar/layout/_plugins/search/local_search.ejs","hash":"deba49e3b90f1413a3e0f7915cc84125eaa7ffc6","modified":1734233006754},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/timeline.ejs","hash":"b35522269b24e3521d7bacd85106609282ff5e17","modified":1734233006752},{"_id":"themes/hexo-theme-stellar/scripts/events/lib/authors.js","hash":"a0e412975c22eb4abbca107ec779517809c4f29c","modified":1734233006757},{"_id":"themes/hexo-theme-stellar/scripts/events/lib/config.js","hash":"14b0e800b6e6b0465e48846b3ec3a844709a8062","modified":1734233006757},{"_id":"themes/hexo-theme-stellar/scripts/events/lib/links.js","hash":"8c49178d6523708f429bbb3444ef13128cecc5c7","modified":1734233006757},{"_id":"themes/hexo-theme-stellar/scripts/events/lib/merge_posts.js","hash":"2d7cc367b16960e5dda6a39d607c89c133a6c9ed","modified":1734233006757},{"_id":"themes/hexo-theme-stellar/scripts/events/lib/doc_tree.js","hash":"190c4dc01f542cb96965a4b7b78b140ae87f37a0","modified":1734233006757},{"_id":"themes/hexo-theme-stellar/scripts/events/lib/notebooks.js","hash":"418ea688d67b4b17c6f29aa7662e3b1c4251737d","modified":1734233006758},{"_id":"themes/hexo-theme-stellar/scripts/events/lib/topic_tree.js","hash":"2700eb17a17d2adee8954a3fefdf9b97e40ec577","modified":1734233006758},{"_id":"themes/hexo-theme-stellar/scripts/filters/lib/img_lazyload.js","hash":"348bba002f1e4f3c5e940dbc6763954f559f86fd","modified":1734238519070},{"_id":"themes/hexo-theme-stellar/scripts/filters/lib/img_onerror.js","hash":"18a337a0612afc97c04199ba797443131e8e1b75","modified":1734233006759},{"_id":"themes/hexo-theme-stellar/scripts/events/lib/utils.js","hash":"59975c5b4210bd1d96de611cb141e9af8d72a01a","modified":1734233006758},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/about.js","hash":"ce3a7e19a9285d1580893b89ef6ed0f39de14550","modified":1734233006762},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/audio.js","hash":"2f19ae4a0a93331436315c3f3866d9062b048959","modified":1734233006762},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/banner.js","hash":"d155c983598fb6ed8a4a607271aa840420a22754","modified":1734233006762},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/albums.js","hash":"4518a776c5464c26af10b06d6f8f4a68f441e122","modified":1734233006762},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/box.js","hash":"9b45d103fe747d5653fdba8ba25fb5dbee3a8af5","modified":1734233006762},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/button.js","hash":"91bda15bf86321c4bb9a81d23c22f93c94f7394f","modified":1734233006763},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/copy.js","hash":"220afd8fc9e65a677d5a061fb2fedd69e940270d","modified":1734233006763},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/emoji.js","hash":"25b1ec896cd00449126366a68891f36cf7116b2b","modified":1734233006763},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/folders.js","hash":"f4a3c060be9a68082e2bdf7ac322306f0d467876","modified":1734233006763},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/checkbox.js","hash":"356e670afa8e36e8cfc617a90492f7706f6a3e7a","modified":1734233006763},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/folding.js","hash":"c4cb435e1f19b5dba3d4ac61ff73d89df7f7e5dd","modified":1734233006763},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/frame.js","hash":"85260e12c0d569f7f84a19d3e77b3e29672c49dd","modified":1734238519092},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/gallery.js","hash":"1ee7654fe8f24bf53172cbda219b396e64f79dde","modified":1734233006764},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/ghcard.js","hash":"609c44d461fb585c2d2ae7c0f819e8b7a6f614a8","modified":1734233006764},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/friends.js","hash":"bbf62a2fdd44636637bcfd36c86e9320436596ca","modified":1734233006764},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/grid.js","hash":"4313cde5dad18db18367599272fac1c13ed6a5a5","modified":1734233006764},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/hashtag.js","hash":"90e1cb1f5ff0543de1867c1916f3afc48e4b00cb","modified":1734233006764},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/image.js","hash":"2da07ea6a0159c6106a539684db4beae1d422dde","modified":1734238519070},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/link.js","hash":"89d7f784ff555aace713bb1ab4a9e3a8305b319e","modified":1734238519070},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/md.js","hash":"2619489bf92c27882dfa4ba58e965c6ededf5d3d","modified":1734233006765},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/navbar.js","hash":"da6c85b8f91bc80bcd6ea2eead8d807763f14b90","modified":1734233006765},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/icon.js","hash":"d364e48234b430b16f5d6b75c19e0cd709d040ff","modified":1734233006765},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/okr.js","hash":"56e9b268bf1e5fb9b553efb43835a67929e60441","modified":1734233006766},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/poetry.js","hash":"cbb5629353cb836b4c9eff7e796319b7ffb9ec25","modified":1734233006766},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/note.js","hash":"536c0e1dd7615a05cf742a4bb74c9ef0dd32eac0","modified":1734233006765},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/quot.js","hash":"41e1e34fb2fecdc3379bf4b8d2bcbf8d3306f25e","modified":1734233006766},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/posters.js","hash":"0f54374a41064386c97fa8ebac6ad1610e21f716","modified":1734233006766},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/sites.js","hash":"fbc0e2c6e3da9f66275b6fb5c89b1f3efbe6d493","modified":1734233006767},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/swiper.js","hash":"fb778ba07eec57c6faf5ab687235da7484b96742","modified":1734233006767},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/timeline.js","hash":"e2f3bd0a1feebe84fad67a8f8f296a4ef0d64e1a","modified":1734233006767},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/tabs.js","hash":"0e10cd618ccdc41f84f057dde9148e5db1ff1f93","modified":1734233006767},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/toc.js","hash":"c6db344fd9683f9afbf0877593636003094a0e64","modified":1734233006767},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/video.js","hash":"66088bddae88cb7bb90f486fddb5ac52169013f9","modified":1734233006767},{"_id":"themes/hexo-theme-stellar/source/css/_common/base.styl","hash":"d25adc0213d1a950a0b5950973299954df36c554","modified":1734233006768},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/mark.js","hash":"10a212d2caf8edf741e296d76115343aae2e8818","modified":1734233006765},{"_id":"themes/hexo-theme-stellar/source/css/_common/blur.styl","hash":"728c572920040825978150e91dae8d72bb9e1df7","modified":1734233006768},{"_id":"themes/hexo-theme-stellar/source/css/_common/button.styl","hash":"0c82641217d9fe27009ae535efa7bd1709ef3c81","modified":1734233006768},{"_id":"themes/hexo-theme-stellar/source/css/_common/cap.styl","hash":"5eba353070e7e274686dac9ecfaf8bbcf87379fe","modified":1734233006768},{"_id":"themes/hexo-theme-stellar/source/css/_common/control.styl","hash":"ba6d129ea538cff4694abb6017e818ece87fc16d","modified":1734233006769},{"_id":"themes/hexo-theme-stellar/source/css/_common/device.styl","hash":"a20d7b19a7e1a6d012d596cdcabef48cd1d4a632","modified":1734233006769},{"_id":"themes/hexo-theme-stellar/source/css/_common/highlight.styl","hash":"d2d816d394ce7ae266110e58dbdba0cf9ac297b0","modified":1734233006769},{"_id":"themes/hexo-theme-stellar/source/css/_common/html.styl","hash":"17c3c3d6eeba525ae71b7db627958e998d36f09c","modified":1734233006769},{"_id":"themes/hexo-theme-stellar/source/css/_common/image.styl","hash":"b044eaf2ebb8ba6f0f546fadcb558611f1d04795","modified":1734233006769},{"_id":"themes/hexo-theme-stellar/source/css/_common/layout.styl","hash":"69800fbe87b7f44806d8ba88bb32d85eb038c309","modified":1734233006769},{"_id":"themes/hexo-theme-stellar/source/css/_common/blockquote.styl","hash":"50d97629f624ba37abd616b11ac25c2c5c7402a6","modified":1734233006768},{"_id":"themes/hexo-theme-stellar/source/css/_common/input.styl","hash":"1fe4996341ac61d093028fdc4ab603174e09281c","modified":1734233006769},{"_id":"themes/hexo-theme-stellar/source/css/_common/loading.styl","hash":"d3fc6d06d410b71f0fb8697a135aa85106989442","modified":1734233006770},{"_id":"themes/hexo-theme-stellar/source/css/_common/pre.styl","hash":"728ba5cc9e016b9a53bcbcb45282b2d39773282c","modified":1734233006770},{"_id":"themes/hexo-theme-stellar/source/css/_common/media.styl","hash":"d3aeb907d3d1377c0087f664121782c56fdd7df3","modified":1734233006770},{"_id":"themes/hexo-theme-stellar/source/css/_common/span.styl","hash":"3729e8ec5e5a93cc46adcda06ea546fc0315f2c0","modified":1734233006770},{"_id":"themes/hexo-theme-stellar/source/css/_common/svg.styl","hash":"6a713b9e23f527aa1399a801e1b839bb56832721","modified":1734233006770},{"_id":"themes/hexo-theme-stellar/source/css/_common/toast.styl","hash":"8ebf1a2d8fdcfd83077f9b7d3bfcebdf21e511cb","modified":1734233006770},{"_id":"themes/hexo-theme-stellar/source/css/_components/index.styl","hash":"414f128d6e75223cb0f920ac8962d43fd0fa973d","modified":1734233006771},{"_id":"themes/hexo-theme-stellar/source/css/_components/layout.styl","hash":"4c34fb9985c39ab93e2ffbaeb530063752cde40f","modified":1734233006771},{"_id":"themes/hexo-theme-stellar/source/css/_components/list.styl","hash":"3e59fa86362c790daec41928b0191546d3f55675","modified":1734233006771},{"_id":"themes/hexo-theme-stellar/source/css/_components/md.styl","hash":"25c679e9e3ddfeca64ff17a3b8aed2d3d888b090","modified":1734233006771},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/aplayer.styl","hash":"36d28afb8945e492a248a7b6fd4addc7fef2a0c4","modified":1734233006785},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/fancybox.styl","hash":"726cc7aa296e4c16cc16c1d19aea0e842a18baea","modified":1734233006786},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/copycode.styl","hash":"376f1e9debc2545e28577224efc14e417fc6ca83","modified":1734233006785},{"_id":"themes/hexo-theme-stellar/source/css/_components/main.styl","hash":"e6f2a63611da33a4df4ce5e1e34ba501305abc6b","modified":1734233006771},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/index.styl","hash":"427a41be3b501e6037fe9a394415ca079887e1e3","modified":1734233006786},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/katex.styl","hash":"17949579601ead7d20ce41a55503125c12af0508","modified":1734233006786},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/lazyload.styl","hash":"8f54457c3e7e5b62d9691c4198a1282c631c1384","modified":1734233006786},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/mermaid.styl","hash":"86bdb88870a94c0eda454be8c1603530ceefaf1f","modified":1734233006786},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/swiper.styl","hash":"8c2cc1c5c9aa8dbd1184a1f4c6784b91b73531ae","modified":1734233006787},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/scrollreveal.styl","hash":"cb9d16c1d0e1df20dafc2c0cc0e1d87329ac9c51","modified":1734233006786},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/tianli_gpt.styl","hash":"69fb171711ffec3a2b48b5dba3b4f42300fbe207","modified":1734233006787},{"_id":"themes/hexo-theme-stellar/source/css/_defines/const.styl","hash":"19fd90bafa64b67b2f8b20f11a06d8a5efdc7135","modified":1734233006785},{"_id":"themes/hexo-theme-stellar/source/css/_defines/func.styl","hash":"78fadaae85321a78131b6d965644447f6c01adf1","modified":1734233006785},{"_id":"themes/hexo-theme-stellar/source/css/_defines/theme.styl","hash":"844a4ce1d9b46feb27b6aadd5b86de7a12aee871","modified":1734233006785},{"_id":"themes/hexo-theme-stellar/source/js/plugins/copycode.js","hash":"9b4713d7d942167d9e4cd090f0903009ec897e41","modified":1734233006787},{"_id":"themes/hexo-theme-stellar/source/js/search/algolia-search.js","hash":"b60dbc72e01a2b6c4bef40a8382a0a346651dbfa","modified":1734233006788},{"_id":"themes/hexo-theme-stellar/source/js/services/artalk_latest_comment.js","hash":"635c844d477616b950c40caa4e34fdd9b284f446","modified":1734233006788},{"_id":"themes/hexo-theme-stellar/source/js/services/friends.js","hash":"f962edcffe31394a79eb59775577eb8268aab7f2","modified":1734233006788},{"_id":"themes/hexo-theme-stellar/source/js/services/fcircle.js","hash":"3b15740c86eca249a964c93e349abcfa43847f06","modified":1734233006788},{"_id":"themes/hexo-theme-stellar/source/js/services/ghinfo.js","hash":"063c86e14ddb4535850fe70e5b597fbf2af3049e","modified":1734233006789},{"_id":"themes/hexo-theme-stellar/source/js/services/mdrender.js","hash":"43d0593621ceae8b9932429b68bc0c2b9fe5f764","modified":1734233006789},{"_id":"themes/hexo-theme-stellar/source/js/services/giscus_latest_comment.js","hash":"17a3a162a3e249dce799fd474c023ab121edadb4","modified":1734233006789},{"_id":"themes/hexo-theme-stellar/source/js/services/memos.js","hash":"1ac24c1185a76df2f11c5d5b05c13f562e71b784","modified":1734238519070},{"_id":"themes/hexo-theme-stellar/source/js/services/siteinfo.js","hash":"25e90b9ccfc66e3e217520a9bf5b68508d4d6897","modified":1734238519087},{"_id":"themes/hexo-theme-stellar/source/js/services/twikoo_latest_comment.js","hash":"82560535dd3faa1564b7c82e8defd1f7e69ef25d","modified":1734233006790},{"_id":"themes/hexo-theme-stellar/source/js/services/sites.js","hash":"b9025ce21df656e260e108f1c39db583fa5260d9","modified":1734233006789},{"_id":"themes/hexo-theme-stellar/source/js/services/waline_latest_comment.js","hash":"ceb1f7cd1876bb2ed5c99833585bac53a910a11e","modified":1734233006790},{"_id":"themes/hexo-theme-stellar/source/js/services/weibo.js","hash":"924eb778282ee338bfca95b954c021893f26cefb","modified":1734233006790},{"_id":"themes/hexo-theme-stellar/source/css/_common/title.styl","hash":"87db2ab372754aa5580a0d9496a193b366d42607","modified":1734233006770},{"_id":"themes/hexo-theme-stellar/source/js/search/local-search.js","hash":"c606e73c563629c7a57344f401c8e7dc48c8ae07","modified":1734233006788},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/artalk/layout.ejs","hash":"2be83c7e4cd3f4fb9bc25fba6c8bac8b773dc6d8","modified":1734233006739},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/artalk/script.ejs","hash":"22e2e089b347219701f5dab83146eb90b97cfcbc","modified":1734233006739},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/beaudar/layout.ejs","hash":"87af3e4f58ca019a73f44d1284ec2c7f67a09486","modified":1734233006740},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/beaudar/script.ejs","hash":"95b4ce2324bb213a7834c80d50afa5596760f7ac","modified":1734233006740},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/giscus/layout.ejs","hash":"fcff122bee1983e4a3b1ac66cb324a6de43355f5","modified":1734233006740},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/twikoo/layout.ejs","hash":"719d53c16ba147a07d5721eb562f4fce11153886","modified":1734233006741},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/waline/layout.ejs","hash":"ef09d52d586e3681b84c68ddbd4d37f6499ad2df","modified":1734233006742},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/giscus/script.ejs","hash":"23a3c27333c3c8e19f1ebf4a1c2d870bba81546f","modified":1734233006740},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/waline/script.ejs","hash":"bf8eaca380cb0358c0e834f56f62e3a70aa254c5","modified":1734233006742},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/utterances/script.ejs","hash":"a3c74f7d3b6bca38a2ea6dbb0328e5943a294b04","modified":1734233006742},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/utterances/layout.ejs","hash":"87af3e4f58ca019a73f44d1284ec2c7f67a09486","modified":1734233006742},{"_id":"themes/hexo-theme-stellar/source/js/services/timeline.js","hash":"7e0e53ea639fec1da84d801ed4901b5366090a2b","modified":1734233006790},{"_id":"themes/hexo-theme-stellar/layout/_partial/comments/twikoo/script.ejs","hash":"ef38004c33a3d82fd17baa99886c107646c2a2d5","modified":1734233006741},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/article/read_next.ejs","hash":"5a96e5e279393076cca6159b9c74a8021ad1045c","modified":1734233006744},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/article/article_footer.ejs","hash":"b95699eae87001ccfe00425504f8c2d7ce343e19","modified":1734233006743},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/navbar/article_banner.ejs","hash":"121d551c8ef5d7ab84eac7d0a3910456380feb23","modified":1734233006744},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/article/related_posts.ejs","hash":"3e3f867cb4329ae1d5375c13e85b9b4f904ffd8c","modified":1734233006744},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/navbar/dateinfo.ejs","hash":"a52a7b69feee23e25754dddb4b8f8701f26d0add","modified":1734233006745},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/navbar/nav_tabs_blog.ejs","hash":"cac60e6315b144edfb3a018e59e11969edc16281","modified":1734233006745},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/navbar/ghinfo.ejs","hash":"71327582549cd0bf9ffeb1c945c152dd5dd756dd","modified":1734233006745},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/navbar/nav_tabs_wiki.ejs","hash":"b6d54ea9e6d85daeca306a948be68c6619cbe5ab","modified":1734233006746},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/post_list/post_card.ejs","hash":"159841e59042d29d0917ba490bf87166d59ef7a9","modified":1734233006747},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/post_list/paginator.ejs","hash":"fe25bc5274a1b09bcbc07d6851f941f7e3702ee2","modified":1734233006746},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/post_list/topic_card.ejs","hash":"615bce91ccd861456e2caedff5d9313c7bd5a2bc","modified":1734233006747},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/notebook/note_card.ejs","hash":"2caa166b8ecc2d4d24058f97d645d7d62511c646","modified":1734233006746},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/notebook/note_tags.ejs","hash":"50d662b3e0e159c26163914ad94f3bc42be193ff","modified":1734233006746},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/notebook/notebook_card.ejs","hash":"9f3041466cbb0f13836247fafc59476681eb32d8","modified":1734233006746},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/components/link.ejs","hash":"81716bdfca00636818bb3b80e84f71db0fe88a6e","modified":1734233006750},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/components/edit.ejs","hash":"0b1f59c026fb77a142499e3e862ee6f163bd865d","modified":1734233006750},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/notebook/paginator.ejs","hash":"33f747a98486be54436870b54f2e4b395190f7f0","modified":1734233006746},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/post_list/wiki_card.ejs","hash":"becc683608997d7cb50e6808854ebfe44c7efe6a","modified":1734233006747},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/read/paper.js","hash":"0864e0b2d3bf1be1fb2fd8ac44efd7ba566c07bf","modified":1734233006766},{"_id":"themes/hexo-theme-stellar/layout/_partial/widgets/components/linklist.ejs","hash":"6fe3657054d1892540301d994b31610d639e82fd","modified":1734233006750},{"_id":"themes/hexo-theme-stellar/source/css/_components/pages/archives.styl","hash":"0203119d818b785eeea71d9e3fc005d1acf9ddfc","modified":1734233006771},{"_id":"themes/hexo-theme-stellar/source/css/_components/pages/notebook.styl","hash":"385246f1a8b2ff1f110b5756e0fec99f185540f6","modified":1734233006772},{"_id":"themes/hexo-theme-stellar/source/css/_components/partial/cover.styl","hash":"ddabffef537c1aab999581fd1f98c876688ebe1c","modified":1734233006774},{"_id":"themes/hexo-theme-stellar/source/css/_components/pages/error.styl","hash":"1fcc13164364766d98ec64744c45e996ba32915f","modified":1734233006772},{"_id":"themes/hexo-theme-stellar/source/css/_components/partial/article-banner.styl","hash":"8500363e147512760a9aa96ffe4a57c92cc63c0a","modified":1734233006774},{"_id":"themes/hexo-theme-stellar/scripts/tags/lib/read/reel.js","hash":"ce211ae8a9942b9b32320280bf4bb3d689ea91f6","modified":1734233006766},{"_id":"themes/hexo-theme-stellar/source/css/_components/partial/bread-nav.styl","hash":"3079e3d7f486033fd36b6aaaaf7805d58712ec30","modified":1734233006774},{"_id":"themes/hexo-theme-stellar/source/css/_components/partial/article-footer.styl","hash":"97d55af0cb098ae423a84b51d3cd64a1711cba7a","modified":1734233006774},{"_id":"themes/hexo-theme-stellar/source/css/_components/partial/footer.styl","hash":"bf7f1fa975423cce0285f7ab537e1a132e18fe85","modified":1734233006774},{"_id":"themes/hexo-theme-stellar/source/css/_components/partial/navbar.styl","hash":"90e6236e70d7c51aa0c88f8ced88bf79ba72acbf","modified":1734233006775},{"_id":"themes/hexo-theme-stellar/source/css/_components/partial/paginator.styl","hash":"184bd7642e0dd8dde8f72ca6c6f7ab6aab2b67e2","modified":1734233006775},{"_id":"themes/hexo-theme-stellar/source/css/_components/partial/related.styl","hash":"9ad13b077d92eff47df470d04ced7da46ebbbc0c","modified":1734233006775},{"_id":"themes/hexo-theme-stellar/source/css/_components/sidebar/footer.styl","hash":"e6cda88e4f71a0c01a1bea09050cde811c07c552","modified":1734233006775},{"_id":"themes/hexo-theme-stellar/source/css/_components/sidebar/logo.styl","hash":"c6315b7b022c9004c3bc1f77c50a4e79ed17ca79","modified":1734233006776},{"_id":"themes/hexo-theme-stellar/source/css/_components/sidebar/menu.styl","hash":"7084fde2e52bf96487cd9d91d31127e09a8d5c14","modified":1734233006776},{"_id":"themes/hexo-theme-stellar/source/css/_components/sidebar/nav-area.styl","hash":"a7bd57940a41042dd297166911506389561447c4","modified":1734233006776},{"_id":"themes/hexo-theme-stellar/source/css/_components/sidebar/search.styl","hash":"3f555c703df9cde3ee279bff3f47a2f99e961fe7","modified":1734233006776},{"_id":"themes/hexo-theme-stellar/source/css/_components/sidebar/sidebar.styl","hash":"497194c7f76797ac50b0c446f63ec899da2b9398","modified":1734233006776},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/about.styl","hash":"8fe5e1d8d702c5663344c83f1a5d76c2ab154917","modified":1734233006777},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/button.styl","hash":"284bea9aa57e4b29a9237f861cda391b5b8886e5","modified":1734233006777},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/banner.styl","hash":"d1a8ea60e83a54abe55be64cfaccee1837713bcf","modified":1734233006777},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/checkbox.styl","hash":"c2552520c15563838af2c9310611795f38fd45cc","modified":1734233006777},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/common.styl","hash":"6ad1667007d5077bbc2292b5f0de52b691da0fb8","modified":1734233006777},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/copy.styl","hash":"c66fe2cf8a1a38bbc19ac94576dbf671ada47b20","modified":1734233006777},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/emoji.styl","hash":"611e3080c0dc9e0a96bccbc42c832f52cb44f4aa","modified":1734233006778},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/folding.styl","hash":"32d1629b3fe4e451972a988518b2393bdc50a874","modified":1734233006778},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/folders.styl","hash":"a71571323b144e4056cab5cfb981d086184d61f1","modified":1734233006778},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/frame.styl","hash":"bcc16cf807506686070ea38da71948263eeedc94","modified":1734233006778},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/friends.styl","hash":"74633b8f0ee094fea2524360e4b606f31f471d03","modified":1734233006779},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/ghcard.styl","hash":"cc8d4543283ed773cdf2c0550ae3a95219b1da81","modified":1734233006779},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/gallery.styl","hash":"34387ad2551249d5a6abd37f577fcc81a7f35458","modified":1734233006779},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/grid.styl","hash":"118329586245e6c2762b7c02caf3e56f6a59ae9c","modified":1734233006779},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/hashtag.styl","hash":"3beb2396538c0fcd66ef92d36975447b18af5630","modified":1734233006779},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/image.styl","hash":"9c579b2d25ac06c5a346ee922b962f62e34ee99e","modified":1734233006779},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/index.styl","hash":"d76245514a5a0aecb65120b7117cd125a70617fb","modified":1734233006780},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/icon.styl","hash":"86df00ff5fc26f93122ce522359c029c3a6aa930","modified":1734233006779},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/link.styl","hash":"169748b6025751537fd2a9b5ca717be6ea9aef22","modified":1734233006780},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/inline-labels.styl","hash":"1a2f52d1642449c91141ce7467710f339f8a2b3a","modified":1734233006780},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/mark.styl","hash":"a5c0a876c7acbc2596b2a6dc4f1d2bfc385561f1","modified":1734233006780},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/media.styl","hash":"36fe66081a20579489019efd272edd72ba3c0b4f","modified":1734233006780},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/note.styl","hash":"a514ec095bdcb342d27c90b9d84c8be341119381","modified":1734233006781},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/override.styl","hash":"270690ab3909a4448ee8d4b39f28f7b6869027bd","modified":1734233006781},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/okr.styl","hash":"e6d2da91b32a169fa4f9f554e0b1e0befa0e9e14","modified":1734233006781},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/poetry.styl","hash":"8e3a7ea46dd54a0998f85fb7ea2feac71b8f0bbb","modified":1734233006781},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/navbar.styl","hash":"2424c2ce7db8eb1066d4efd5639a6bbc2594e1ab","modified":1734233006780},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/quot.styl","hash":"239a23f698457cb607fe9de3133e469384f0d859","modified":1734233006781},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/sites.styl","hash":"a9e2a9d02586309d5a5f71e6970b7bf0ad207390","modified":1734233006782},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/tabs.styl","hash":"22a83161cf969a8b5ae469dccda3b9ab3e87b72a","modified":1734233006782},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/timeline.styl","hash":"2e92524764b7070fda6899400949a492d1e861fd","modified":1734233006782},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/toc.styl","hash":"5a861149947fc9e52423786c9a5ce4be575275c0","modified":1734233006782},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/components.styl","hash":"18c507f5b72c46d37ce159fdbc22c27701064b57","modified":1734233006782},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/ghrepo.styl","hash":"033fc662845f26858f460a6d5a47b7f17addb61d","modified":1734233006782},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/list.styl","hash":"04a4b36c0004d3d94d396c1a4bfed4707ba8e25c","modified":1734233006783},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/ghuser.styl","hash":"9e816f01dc3ffe2ddeca03ccfd46cb0f08232baa","modified":1734233006783},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/markdown.styl","hash":"a41f562811897400571d02288c90ee755355e722","modified":1734233006783},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/tagcloud.styl","hash":"d1727a5c012b81b587ec02ab7cc94de436456866","modified":1734233006783},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/related.styl","hash":"ee755cf45f622a45fcbc6714c866fd3d75e0aee8","modified":1734233006783},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/timeline.styl","hash":"120d2940fa6af2e17aeb76f4848eac465f46276e","modified":1734233006783},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/toc.styl","hash":"622585f4c71005669d38ac53f1ea781fef9b95c4","modified":1734233006783},{"_id":"themes/hexo-theme-stellar/source/css/_components/widgets/widgets.styl","hash":"037519bb8e194cda22ca68799d44ecd66fbf9c32","modified":1734233006783},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/comments/artalk.styl","hash":"576a43a62dfb2b89c72175d5a01a18fd3e016224","modified":1734233006785},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/comments/beaudar.styl","hash":"c013f3630445387cc76cbd91610901abc95e2311","modified":1734233006785},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/comments/utterances.styl","hash":"2fff3ad4c331a76f52295dbd5af32147b1d4bc0d","modified":1734233006785},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/comments/twikoo.styl","hash":"5a22f1536aaf880412eae1e738e3fdf7f43788ae","modified":1734233006785},{"_id":"themes/hexo-theme-stellar/source/css/_plugins/comments/waline.styl","hash":"bcb629d979dd5943f241c37e890b35c646579ec9","modified":1734233006785},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/navbar/breadcrumb/blog.ejs","hash":"5aa8dd07f3317585d5b1767731b8e4b7dee53724","modified":1734233006744},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/navbar/breadcrumb/note.ejs","hash":"34e90bfed5450aa8d7571eec2ef187e9f23be91f","modified":1734233006745},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/navbar/breadcrumb/wiki.ejs","hash":"22a8e05202ef1aa3abe42a8f4815a75e65d3adef","modified":1734233006745},{"_id":"themes/hexo-theme-stellar/layout/_partial/main/navbar/breadcrumb/page.ejs","hash":"f15cec1c83c2c0c01f5267bbe094014deecb003e","modified":1734233006745},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/read/paper.styl","hash":"8b9ea3eccc2abf25bd5c2760f0bb68f6c8b22f76","modified":1734233006781},{"_id":"themes/hexo-theme-stellar/source/css/_components/tag-plugins/read/reel.styl","hash":"1e044e80c11aa7b65b69d017dc0a473ad890e953","modified":1734233006782},{"_id":"source/images/xxd.png","hash":"4bd4b771709bcd867811a1c1430636ea445769c2","modified":1734239770256},{"_id":"public/search.json","hash":"b5d64a08bbe95c379259097372e98a9cda418571","modified":1742386555090},{"_id":"public/404.html","hash":"ac408028b5286d33d99e00fa446fdc10ac706142","modified":1742386555090},{"_id":"public/2025/03/19/Excel/index.html","hash":"34639969354507e3d9c7df9fb8bfd8a8e27ceb16","modified":1742386555090},{"_id":"public/2025/02/17/Servlet项目/index.html","hash":"291d462343b421c3be8af257aa60169c211f6f56","modified":1742386555090},{"_id":"public/2025/02/17/Servlet学习路线/index.html","hash":"cd2c57857d5278274533abf5aa8563ae1c85a052","modified":1742386555090},{"_id":"public/2025/02/16/如何判断自己不适合做一名软件开发工程师/index.html","hash":"d17ca1999eb17de5da1a4844d04771f8373ece9b","modified":1742386555090},{"_id":"public/2025/02/15/技术松鼠症/index.html","hash":"b4ed996f5b5c44fd93e2d13f57885553bd9470f7","modified":1742386555090},{"_id":"public/2025/02/15/初级/index.html","hash":"4d0699535b4c20e06f926db3fe26701ae913308d","modified":1742386555090},{"_id":"public/2025/02/15/HashMap/index.html","hash":"2193d2b67c6d17073236d9b8ee921a11f32397c6","modified":1742386555090},{"_id":"public/2024/12/28/typeScript命令行运行/index.html","hash":"9d87a97eeb95502788277ae3329e5f0d43b1f89f","modified":1742386555090},{"_id":"public/2024/12/28/jdk21新特性/index.html","hash":"3e88c8f6d4eedc75ab17ed0e9b1f42e503e74b30","modified":1742386555090},{"_id":"public/2024/12/28/java中的大数/index.html","hash":"a9f4d82486a7d1bdfa48c83f61b771e4d2c76683","modified":1742386555090},{"_id":"public/2024/12/28/hello-world/index.html","hash":"730ef06aaed627e36ac6d1a0a358d9a8c406a4b1","modified":1742386555090},{"_id":"public/archives/index.html","hash":"865cce4842ce2e5b3337ac400dee6909596d7e45","modified":1742386555090},{"_id":"public/archives/page/2/index.html","hash":"0b25001fd93ef70a01df0bd5bac670869556ee76","modified":1742386555090},{"_id":"public/archives/2024/index.html","hash":"8ccc327898015d211be53455378439697f9fffbb","modified":1742386555090},{"_id":"public/archives/2024/12/index.html","hash":"fddc91a02021c851b235a911c81b3121a9751257","modified":1742386555090},{"_id":"public/archives/2025/index.html","hash":"55978f0fe4cc59a12340a15cd6d11f815f23cb50","modified":1742386555090},{"_id":"public/archives/2025/02/index.html","hash":"87c89d2ac4890007e8a12889acc2e70006bf685c","modified":1742386555090},{"_id":"public/archives/2025/03/index.html","hash":"9a456365b7f2271f83f590d6748cce2173a37e86","modified":1742386555090},{"_id":"public/index.html","hash":"0cd227b7e033b426f787910f8f18986c87335c80","modified":1742386555090},{"_id":"public/page/2/index.html","hash":"4303605458e83d4443f4959e64646bf12d18a09a","modified":1742386555090},{"_id":"public/css/main.css","hash":"2d61108c3cc4de46c2875cfba3abf6c3d4fae39f","modified":1742386555090},{"_id":"public/js/main.js","hash":"41ddd41a9f1896ad548a8eaa8610da2f823009ba","modified":1742386555090},{"_id":"public/js/plugins/copycode.js","hash":"af017eeaaf12e78b1700d78b199b4368d001a193","modified":1742386555090},{"_id":"public/js/services/friends.js","hash":"581a2baa085df422b752cbec098ca56aac691790","modified":1742386555090},{"_id":"public/js/services/artalk_latest_comment.js","hash":"29a6ca87b9dac4708164f31d0f99a1c6bebd38ea","modified":1742386555090},{"_id":"public/js/services/fcircle.js","hash":"add550bfb204a2057661d4d6630d78ebf485754d","modified":1742386555090},{"_id":"public/js/search/algolia-search.js","hash":"94dae768b275b12753553553b3338fca4973a1e3","modified":1742386555090},{"_id":"public/js/services/giscus_latest_comment.js","hash":"2c9c9176f4d35b5c036c6723627d693345cbbf38","modified":1742386555090},{"_id":"public/js/services/ghinfo.js","hash":"94b86ce42dd765e9a4c1befa72ee9648d7ec6f88","modified":1742386555090},{"_id":"public/js/services/mdrender.js","hash":"947f476e6dd8ca6a75f87f6ac6f2fbb2b0861e82","modified":1742386555090},{"_id":"public/js/services/siteinfo.js","hash":"74da788f29862604cd53f6b82b036ff56c715d21","modified":1742386555090},{"_id":"public/js/services/memos.js","hash":"2d430c7ae4d9f3a44653eda0214d18fb60bcfed1","modified":1742386555090},{"_id":"public/js/services/sites.js","hash":"5626b70d13360933c581983dcda422e4fccdc810","modified":1742386555090},{"_id":"public/js/services/twikoo_latest_comment.js","hash":"d5c7bb0b9888333c2e10dedea8bfc19df5454d58","modified":1742386555090},{"_id":"public/js/services/waline_latest_comment.js","hash":"7520f62dcf3b991b99e37b8c33a7d6a89e7f2da5","modified":1742386555090},{"_id":"public/js/services/weibo.js","hash":"437e631539f3a50cf8b46ff17008404609c1c481","modified":1742386555090},{"_id":"public/js/search/local-search.js","hash":"cf710d711fcbc21122cdc01edd43d9b4087f1b9d","modified":1742386555090},{"_id":"public/js/services/timeline.js","hash":"41cde82427726c3366b64b1f54f1aed9bc20fcf1","modified":1742386555090},{"_id":"public/images/xxd.png","hash":"4bd4b771709bcd867811a1c1430636ea445769c2","modified":1742386555090}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"HashMap方法集详解","_content":"\n## computeIfAbsent 方法\n\n> 描述：computeIfAbsent 用于获取key对应的value，如果key不存在，则将生成的值存入map中，并返回\n\n```java \npublic class MapTest {\n    public static void main(String[] args) {\n        Map<String,String> map = new HashMap<>();\n        map.put(\"key1\",\"张三\");\n        // 如果key存在，则返回key对应的value，如果不存在，则将生成的值存入map中，并返回\n        System.out.println(map.computeIfAbsent(\"key1\", k -> getNum()));\n        System.out.println(map.computeIfAbsent(\"key2\", k -> getNum()));\n    }\n\n    private static String getNum(){\n        return \"函数生成数据\";\n    }\n}\n```\n```text\n输出:\n张三\n函数生成数据\n```\n\n## putIfAbsent 方法\n\n> 描述：putIfAbsent 用于获取key对应的value，如果key不存在，则将存固定的值存入map中，并返回key上一个存值\n\n```java \npublic class MapTest {\n    public static void main(String[] args) {\n        Map<String,String> map = new HashMap<>();\n        map.put(\"key1\",\"张三\");\n        System.out.println(map.putIfAbsent(\"key1\", \"存固定的值\"));\n        System.out.println(map.putIfAbsent(\"key2\", \"value\"));//存入固定值,返回上一个存值\n        System.out.println(map.get(\"key2\"));\n    }\n}\n```\n```text\n输出:\n张三\nnull\nvalue\n```","source":"_posts/HashMap.md","raw":"---\ntitle: HashMap方法集详解\n---\n\n## computeIfAbsent 方法\n\n> 描述：computeIfAbsent 用于获取key对应的value，如果key不存在，则将生成的值存入map中，并返回\n\n```java \npublic class MapTest {\n    public static void main(String[] args) {\n        Map<String,String> map = new HashMap<>();\n        map.put(\"key1\",\"张三\");\n        // 如果key存在，则返回key对应的value，如果不存在，则将生成的值存入map中，并返回\n        System.out.println(map.computeIfAbsent(\"key1\", k -> getNum()));\n        System.out.println(map.computeIfAbsent(\"key2\", k -> getNum()));\n    }\n\n    private static String getNum(){\n        return \"函数生成数据\";\n    }\n}\n```\n```text\n输出:\n张三\n函数生成数据\n```\n\n## putIfAbsent 方法\n\n> 描述：putIfAbsent 用于获取key对应的value，如果key不存在，则将存固定的值存入map中，并返回key上一个存值\n\n```java \npublic class MapTest {\n    public static void main(String[] args) {\n        Map<String,String> map = new HashMap<>();\n        map.put(\"key1\",\"张三\");\n        System.out.println(map.putIfAbsent(\"key1\", \"存固定的值\"));\n        System.out.println(map.putIfAbsent(\"key2\", \"value\"));//存入固定值,返回上一个存值\n        System.out.println(map.get(\"key2\"));\n    }\n}\n```\n```text\n输出:\n张三\nnull\nvalue\n```","slug":"HashMap","published":1,"date":"2025-02-15T10:55:13.107Z","updated":"2025-02-15T11:08:19.254Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyumi000048v6h3ca1lil","content":"<h2 id=\"computeIfAbsent-方法\"><a href=\"#computeIfAbsent-方法\" class=\"headerlink\" title=\"computeIfAbsent 方法\"></a>computeIfAbsent 方法</h2><blockquote>\n<p>描述：computeIfAbsent 用于获取key对应的value，如果key不存在，则将生成的值存入map中，并返回</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;key1&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 如果key存在，则返回key对应的value，如果不存在，则将生成的值存入map中，并返回</span></span><br><span class=\"line\">        System.out.println(map.computeIfAbsent(<span class=\"string\">&quot;key1&quot;</span>, k -&gt; getNum()));</span><br><span class=\"line\">        System.out.println(map.computeIfAbsent(<span class=\"string\">&quot;key2&quot;</span>, k -&gt; getNum()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getNum</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;函数生成数据&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出:</span><br><span class=\"line\">张三</span><br><span class=\"line\">函数生成数据</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"putIfAbsent-方法\"><a href=\"#putIfAbsent-方法\" class=\"headerlink\" title=\"putIfAbsent 方法\"></a>putIfAbsent 方法</h2><blockquote>\n<p>描述：putIfAbsent 用于获取key对应的value，如果key不存在，则将存固定的值存入map中，并返回key上一个存值</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;key1&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        System.out.println(map.putIfAbsent(<span class=\"string\">&quot;key1&quot;</span>, <span class=\"string\">&quot;存固定的值&quot;</span>));</span><br><span class=\"line\">        System.out.println(map.putIfAbsent(<span class=\"string\">&quot;key2&quot;</span>, <span class=\"string\">&quot;value&quot;</span>));<span class=\"comment\">//存入固定值,返回上一个存值</span></span><br><span class=\"line\">        System.out.println(map.get(<span class=\"string\">&quot;key2&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出:</span><br><span class=\"line\">张三</span><br><span class=\"line\">null</span><br><span class=\"line\">value</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"computeIfAbsent-方法\"><a href=\"#computeIfAbsent-方法\" class=\"headerlink\" title=\"computeIfAbsent 方法\"></a>computeIfAbsent 方法</h2><blockquote>\n<p>描述：computeIfAbsent 用于获取key对应的value，如果key不存在，则将生成的值存入map中，并返回</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;key1&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 如果key存在，则返回key对应的value，如果不存在，则将生成的值存入map中，并返回</span></span><br><span class=\"line\">        System.out.println(map.computeIfAbsent(<span class=\"string\">&quot;key1&quot;</span>, k -&gt; getNum()));</span><br><span class=\"line\">        System.out.println(map.computeIfAbsent(<span class=\"string\">&quot;key2&quot;</span>, k -&gt; getNum()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getNum</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;函数生成数据&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出:</span><br><span class=\"line\">张三</span><br><span class=\"line\">函数生成数据</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"putIfAbsent-方法\"><a href=\"#putIfAbsent-方法\" class=\"headerlink\" title=\"putIfAbsent 方法\"></a>putIfAbsent 方法</h2><blockquote>\n<p>描述：putIfAbsent 用于获取key对应的value，如果key不存在，则将存固定的值存入map中，并返回key上一个存值</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;key1&quot;</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        System.out.println(map.putIfAbsent(<span class=\"string\">&quot;key1&quot;</span>, <span class=\"string\">&quot;存固定的值&quot;</span>));</span><br><span class=\"line\">        System.out.println(map.putIfAbsent(<span class=\"string\">&quot;key2&quot;</span>, <span class=\"string\">&quot;value&quot;</span>));<span class=\"comment\">//存入固定值,返回上一个存值</span></span><br><span class=\"line\">        System.out.println(map.get(<span class=\"string\">&quot;key2&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出:</span><br><span class=\"line\">张三</span><br><span class=\"line\">null</span><br><span class=\"line\">value</span><br></pre></td></tr></table></figure>"},{"title":"Excel函数","_content":"\n> 1、count()函数 //统计某一列的个数\n\n> 2、=\"'\"&A1&\"',\" //给某一列加引号，用于sql查询\n\n> 3、=RIGHT(A2,11) //PBM_HANSI：发送TPA理赔数据异常 可以将列分离 ，从右边截取 分离后 发送TPA理赔数据异常  =LEFT(A2,11) //从左边截取\n\n> 4、=CONCAT(\"update jy_collaborate_mis.coll_stmt_collection_task set remark = '提交成功' where id ='\"&A1&\"';\") 拼接sql // =CONCAT(\"\"&A1&\"\")\n\n> 5、=VSTACK(吴国!A1:C17,蜀国!A2:C17,魏国!A2:C17) //=VSTACK（）合并多个表格数据到一个表格 注意：每选择一个表格数据之后，公式后面要加一个,    都选择完成之后点击对号\n\n> 6、ctrl+D //向下填充","source":"_posts/Excel.md","raw":"---\ntitle: Excel函数\n---\n\n> 1、count()函数 //统计某一列的个数\n\n> 2、=\"'\"&A1&\"',\" //给某一列加引号，用于sql查询\n\n> 3、=RIGHT(A2,11) //PBM_HANSI：发送TPA理赔数据异常 可以将列分离 ，从右边截取 分离后 发送TPA理赔数据异常  =LEFT(A2,11) //从左边截取\n\n> 4、=CONCAT(\"update jy_collaborate_mis.coll_stmt_collection_task set remark = '提交成功' where id ='\"&A1&\"';\") 拼接sql // =CONCAT(\"\"&A1&\"\")\n\n> 5、=VSTACK(吴国!A1:C17,蜀国!A2:C17,魏国!A2:C17) //=VSTACK（）合并多个表格数据到一个表格 注意：每选择一个表格数据之后，公式后面要加一个,    都选择完成之后点击对号\n\n> 6、ctrl+D //向下填充","slug":"Excel","published":1,"date":"2025-03-19T11:59:01.865Z","updated":"2025-03-19T12:09:11.288Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyumm000148v6bewk842k","content":"<blockquote>\n<p>1、count()函数 &#x2F;&#x2F;统计某一列的个数</p>\n</blockquote>\n<blockquote>\n<p>2、&#x3D;”‘“&amp;A1&amp;”‘,” &#x2F;&#x2F;给某一列加引号，用于sql查询</p>\n</blockquote>\n<blockquote>\n<p>3、&#x3D;RIGHT(A2,11) &#x2F;&#x2F;PBM_HANSI：发送TPA理赔数据异常 可以将列分离 ，从右边截取 分离后 发送TPA理赔数据异常  &#x3D;LEFT(A2,11) &#x2F;&#x2F;从左边截取</p>\n</blockquote>\n<blockquote>\n<p>4、&#x3D;CONCAT(“update jy_collaborate_mis.coll_stmt_collection_task set remark &#x3D; ‘提交成功’ where id &#x3D;’”&amp;A1&amp;”‘;”) 拼接sql &#x2F;&#x2F; &#x3D;CONCAT(“”&amp;A1&amp;””)</p>\n</blockquote>\n<blockquote>\n<p>5、&#x3D;VSTACK(吴国!A1:C17,蜀国!A2:C17,魏国!A2:C17) &#x2F;&#x2F;&#x3D;VSTACK（）合并多个表格数据到一个表格 注意：每选择一个表格数据之后，公式后面要加一个,    都选择完成之后点击对号</p>\n</blockquote>\n<blockquote>\n<p>6、ctrl+D &#x2F;&#x2F;向下填充</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>1、count()函数 &#x2F;&#x2F;统计某一列的个数</p>\n</blockquote>\n<blockquote>\n<p>2、&#x3D;”‘“&amp;A1&amp;”‘,” &#x2F;&#x2F;给某一列加引号，用于sql查询</p>\n</blockquote>\n<blockquote>\n<p>3、&#x3D;RIGHT(A2,11) &#x2F;&#x2F;PBM_HANSI：发送TPA理赔数据异常 可以将列分离 ，从右边截取 分离后 发送TPA理赔数据异常  &#x3D;LEFT(A2,11) &#x2F;&#x2F;从左边截取</p>\n</blockquote>\n<blockquote>\n<p>4、&#x3D;CONCAT(“update jy_collaborate_mis.coll_stmt_collection_task set remark &#x3D; ‘提交成功’ where id &#x3D;’”&amp;A1&amp;”‘;”) 拼接sql &#x2F;&#x2F; &#x3D;CONCAT(“”&amp;A1&amp;””)</p>\n</blockquote>\n<blockquote>\n<p>5、&#x3D;VSTACK(吴国!A1:C17,蜀国!A2:C17,魏国!A2:C17) &#x2F;&#x2F;&#x3D;VSTACK（）合并多个表格数据到一个表格 注意：每选择一个表格数据之后，公式后面要加一个,    都选择完成之后点击对号</p>\n</blockquote>\n<blockquote>\n<p>6、ctrl+D &#x2F;&#x2F;向下填充</p>\n</blockquote>\n"},{"title":"Servlet项目","_content":"\n以下是一些适合练习的免费在线Servlet项目，涵盖从基础到进阶的实践场景，每个项目都附有核心知识点和推荐资源：\n\n---\n\n### **1. 用户管理系统（入门级）**\n#### **项目功能**\n- 用户注册/登录/注销\n- 个人资料修改\n- 管理员权限控制\n- 用户列表分页展示\n\n#### **技术要点**\n- `HttpSession`实现会话管理\n- 密码MD5加密存储\n- `Filter`实现权限验证\n- JDBC连接MySQL数据库\n- JSP + EL表达式 + JSTL\n\n#### **学习资源**\n- [GitHub参考项目](https://github.com/example/user-management-system)\n- [GeeksforGeeks教程](https://www.geeksforgeeks.org/servlet-login-and-logout-example/)\n\n---\n\n### **2. 在线书店（中级）**\n#### **项目功能**\n- 图书分类展示\n- 购物车功能（Cookie/Session存储）\n- 订单生成与支付模拟\n- 图书搜索与分页\n\n#### **技术要点**\n- `Cookie`实现购物车持久化\n- 事务处理（订单与库存同步）\n- 连接池优化（Druid/HikariCP）\n- 分页算法实现\n- 文件上传（图书封面）\n\n#### **学习资源**\n- [JavaTpoint案例](https://www.javatpoint.com/servlet-bookstore-project)\n- [GitHub完整代码](https://github.com/example/online-bookstore)\n\n---\n\n### **3. 博客发布平台（进阶）**\n#### **项目功能**\n- 文章发布与富文本编辑（CKEditor）\n- 评论与回复系统\n- 文章分类标签\n- Markdown格式支持\n\n#### **技术要点**\n- `Servlet`处理RESTful风格API\n- 防止XSS攻击（HTML过滤）\n- 数据库事务管理（评论嵌套）\n- 异步请求处理（AJAX + Servlet）\n\n#### **学习资源**\n- [博客系统教程](https://www.codejava.net/servers/servlet-jsp-blog-app)\n- [GitHub参考实现](https://github.com/example/servlet-blog)\n\n---\n\n### **4. 在线考试系统（综合）**\n#### **项目功能**\n- 随机组卷（题库管理）\n- 考试倒计时\n- 自动评分\n- 成绩统计图表\n\n#### **技术要点**\n- `HttpSession`存储考试进度\n- 定时任务（Timer/Task调度）\n- 复杂SQL查询（多表关联）\n- 数据可视化（JFreeChart）\n\n#### **学习资源**\n- [Guru99项目指南](https://www.guru99.com/servlet-online-exam-project.html)\n- [GitHub源码](https://github.com/example/online-exam-system)\n\n---\n\n### **5. 文件云存储系统（高阶）**\n#### **项目功能**\n- 多文件上传/下载\n- 文件分享链接生成\n- 存储空间限制\n- 文件版本管理\n\n#### **技术要点**\n- `Part`接口处理大文件\n- 断点续传（Range请求头）\n- 安全控制（防盗链）\n- 文件加密存储（AES）\n\n#### **学习资源**\n- [Baeldung文件上传教程](https://www.baeldung.com/spring-file-upload)\n- [GitHub参考项目](https://github.com/example/file-cloud)\n\n---\n\n### **6. API网关模拟（架构级）**\n#### **项目功能**\n- 请求路由转发\n- 接口限流（令牌桶算法）\n- 身份鉴权（JWT验证）\n- 请求日志记录\n\n#### **技术要点**\n- `Filter`链式处理\n- 动态路由配置（XML/JSON）\n- 反射机制加载策略\n- NIO高性能处理\n\n#### **学习资源**\n- [API网关设计文档](https://www.marcobehler.com/guides/java-web-apps-without-frameworks)\n- [GitHub基础实现](https://github.com/example/servlet-gateway)\n\n---\n\n### **免费学习平台推荐**\n| **平台**       | **特色**                              | **推荐项目**                  |\n|----------------|-------------------------------------|-----------------------------|\n| GitHub         | 开源项目代码参考                        | 搜索\"servlet project\"        |\n| JavaTpoint     | 分步骤图文教程                         | [Servlet项目合集](https://www.javatpoint.com/servlet-projects) |\n| CodeWithHarry  | 视频+代码实操                          | [YouTube教程](https://youtube.com/playlist?list=PLu0W_9lII9agAiWp6Y41ueUKx1VcTRxmf) |\n| GeeksforGeeks  | 算法与项目结合                         | [Servlet实践专题](https://www.geeksforgeeks.org/servlet-tutorial/) |\n\n---\n\n### **项目实践建议**\n1. **从简单到复杂**：先完成用户管理系统，再挑战文件云存储\n2. **代码规范**：遵循阿里巴巴Java开发手册\n3. **版本控制**：使用Git管理代码（[Git入门指南](https://www.liaoxuefeng.com/wiki/896043488029600)）\n4. **性能优化**：每个项目完成后用JMeter压测\n\n通过完成以上3-4个项目，可系统掌握Servlet开发核心技能，并为学习Spring MVC等框架打下坚实基础。","source":"_posts/Servlet项目.md","raw":"---\ntitle: Servlet项目\n---\n\n以下是一些适合练习的免费在线Servlet项目，涵盖从基础到进阶的实践场景，每个项目都附有核心知识点和推荐资源：\n\n---\n\n### **1. 用户管理系统（入门级）**\n#### **项目功能**\n- 用户注册/登录/注销\n- 个人资料修改\n- 管理员权限控制\n- 用户列表分页展示\n\n#### **技术要点**\n- `HttpSession`实现会话管理\n- 密码MD5加密存储\n- `Filter`实现权限验证\n- JDBC连接MySQL数据库\n- JSP + EL表达式 + JSTL\n\n#### **学习资源**\n- [GitHub参考项目](https://github.com/example/user-management-system)\n- [GeeksforGeeks教程](https://www.geeksforgeeks.org/servlet-login-and-logout-example/)\n\n---\n\n### **2. 在线书店（中级）**\n#### **项目功能**\n- 图书分类展示\n- 购物车功能（Cookie/Session存储）\n- 订单生成与支付模拟\n- 图书搜索与分页\n\n#### **技术要点**\n- `Cookie`实现购物车持久化\n- 事务处理（订单与库存同步）\n- 连接池优化（Druid/HikariCP）\n- 分页算法实现\n- 文件上传（图书封面）\n\n#### **学习资源**\n- [JavaTpoint案例](https://www.javatpoint.com/servlet-bookstore-project)\n- [GitHub完整代码](https://github.com/example/online-bookstore)\n\n---\n\n### **3. 博客发布平台（进阶）**\n#### **项目功能**\n- 文章发布与富文本编辑（CKEditor）\n- 评论与回复系统\n- 文章分类标签\n- Markdown格式支持\n\n#### **技术要点**\n- `Servlet`处理RESTful风格API\n- 防止XSS攻击（HTML过滤）\n- 数据库事务管理（评论嵌套）\n- 异步请求处理（AJAX + Servlet）\n\n#### **学习资源**\n- [博客系统教程](https://www.codejava.net/servers/servlet-jsp-blog-app)\n- [GitHub参考实现](https://github.com/example/servlet-blog)\n\n---\n\n### **4. 在线考试系统（综合）**\n#### **项目功能**\n- 随机组卷（题库管理）\n- 考试倒计时\n- 自动评分\n- 成绩统计图表\n\n#### **技术要点**\n- `HttpSession`存储考试进度\n- 定时任务（Timer/Task调度）\n- 复杂SQL查询（多表关联）\n- 数据可视化（JFreeChart）\n\n#### **学习资源**\n- [Guru99项目指南](https://www.guru99.com/servlet-online-exam-project.html)\n- [GitHub源码](https://github.com/example/online-exam-system)\n\n---\n\n### **5. 文件云存储系统（高阶）**\n#### **项目功能**\n- 多文件上传/下载\n- 文件分享链接生成\n- 存储空间限制\n- 文件版本管理\n\n#### **技术要点**\n- `Part`接口处理大文件\n- 断点续传（Range请求头）\n- 安全控制（防盗链）\n- 文件加密存储（AES）\n\n#### **学习资源**\n- [Baeldung文件上传教程](https://www.baeldung.com/spring-file-upload)\n- [GitHub参考项目](https://github.com/example/file-cloud)\n\n---\n\n### **6. API网关模拟（架构级）**\n#### **项目功能**\n- 请求路由转发\n- 接口限流（令牌桶算法）\n- 身份鉴权（JWT验证）\n- 请求日志记录\n\n#### **技术要点**\n- `Filter`链式处理\n- 动态路由配置（XML/JSON）\n- 反射机制加载策略\n- NIO高性能处理\n\n#### **学习资源**\n- [API网关设计文档](https://www.marcobehler.com/guides/java-web-apps-without-frameworks)\n- [GitHub基础实现](https://github.com/example/servlet-gateway)\n\n---\n\n### **免费学习平台推荐**\n| **平台**       | **特色**                              | **推荐项目**                  |\n|----------------|-------------------------------------|-----------------------------|\n| GitHub         | 开源项目代码参考                        | 搜索\"servlet project\"        |\n| JavaTpoint     | 分步骤图文教程                         | [Servlet项目合集](https://www.javatpoint.com/servlet-projects) |\n| CodeWithHarry  | 视频+代码实操                          | [YouTube教程](https://youtube.com/playlist?list=PLu0W_9lII9agAiWp6Y41ueUKx1VcTRxmf) |\n| GeeksforGeeks  | 算法与项目结合                         | [Servlet实践专题](https://www.geeksforgeeks.org/servlet-tutorial/) |\n\n---\n\n### **项目实践建议**\n1. **从简单到复杂**：先完成用户管理系统，再挑战文件云存储\n2. **代码规范**：遵循阿里巴巴Java开发手册\n3. **版本控制**：使用Git管理代码（[Git入门指南](https://www.liaoxuefeng.com/wiki/896043488029600)）\n4. **性能优化**：每个项目完成后用JMeter压测\n\n通过完成以上3-4个项目，可系统掌握Servlet开发核心技能，并为学习Spring MVC等框架打下坚实基础。","slug":"Servlet项目","published":1,"date":"2025-02-17T13:23:40.963Z","updated":"2025-02-17T13:24:07.009Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyumn000248v60cpibh1p","content":"<p>以下是一些适合练习的免费在线Servlet项目，涵盖从基础到进阶的实践场景，每个项目都附有核心知识点和推荐资源：</p>\n<hr>\n<h3 id=\"1-用户管理系统（入门级）\"><a href=\"#1-用户管理系统（入门级）\" class=\"headerlink\" title=\"1. 用户管理系统（入门级）\"></a><strong>1. 用户管理系统（入门级）</strong></h3><h4 id=\"项目功能\"><a href=\"#项目功能\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>用户注册&#x2F;登录&#x2F;注销</li>\n<li>个人资料修改</li>\n<li>管理员权限控制</li>\n<li>用户列表分页展示</li>\n</ul>\n<h4 id=\"技术要点\"><a href=\"#技术要点\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>HttpSession</code>实现会话管理</li>\n<li>密码MD5加密存储</li>\n<li><code>Filter</code>实现权限验证</li>\n<li>JDBC连接MySQL数据库</li>\n<li>JSP + EL表达式 + JSTL</li>\n</ul>\n<h4 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://github.com/example/user-management-system\">GitHub参考项目</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/servlet-login-and-logout-example/\">GeeksforGeeks教程</a></li>\n</ul>\n<hr>\n<h3 id=\"2-在线书店（中级）\"><a href=\"#2-在线书店（中级）\" class=\"headerlink\" title=\"2. 在线书店（中级）\"></a><strong>2. 在线书店（中级）</strong></h3><h4 id=\"项目功能-1\"><a href=\"#项目功能-1\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>图书分类展示</li>\n<li>购物车功能（Cookie&#x2F;Session存储）</li>\n<li>订单生成与支付模拟</li>\n<li>图书搜索与分页</li>\n</ul>\n<h4 id=\"技术要点-1\"><a href=\"#技术要点-1\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>Cookie</code>实现购物车持久化</li>\n<li>事务处理（订单与库存同步）</li>\n<li>连接池优化（Druid&#x2F;HikariCP）</li>\n<li>分页算法实现</li>\n<li>文件上传（图书封面）</li>\n</ul>\n<h4 id=\"学习资源-1\"><a href=\"#学习资源-1\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://www.javatpoint.com/servlet-bookstore-project\">JavaTpoint案例</a></li>\n<li><a href=\"https://github.com/example/online-bookstore\">GitHub完整代码</a></li>\n</ul>\n<hr>\n<h3 id=\"3-博客发布平台（进阶）\"><a href=\"#3-博客发布平台（进阶）\" class=\"headerlink\" title=\"3. 博客发布平台（进阶）\"></a><strong>3. 博客发布平台（进阶）</strong></h3><h4 id=\"项目功能-2\"><a href=\"#项目功能-2\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>文章发布与富文本编辑（CKEditor）</li>\n<li>评论与回复系统</li>\n<li>文章分类标签</li>\n<li>Markdown格式支持</li>\n</ul>\n<h4 id=\"技术要点-2\"><a href=\"#技术要点-2\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>Servlet</code>处理RESTful风格API</li>\n<li>防止XSS攻击（HTML过滤）</li>\n<li>数据库事务管理（评论嵌套）</li>\n<li>异步请求处理（AJAX + Servlet）</li>\n</ul>\n<h4 id=\"学习资源-2\"><a href=\"#学习资源-2\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://www.codejava.net/servers/servlet-jsp-blog-app\">博客系统教程</a></li>\n<li><a href=\"https://github.com/example/servlet-blog\">GitHub参考实现</a></li>\n</ul>\n<hr>\n<h3 id=\"4-在线考试系统（综合）\"><a href=\"#4-在线考试系统（综合）\" class=\"headerlink\" title=\"4. 在线考试系统（综合）\"></a><strong>4. 在线考试系统（综合）</strong></h3><h4 id=\"项目功能-3\"><a href=\"#项目功能-3\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>随机组卷（题库管理）</li>\n<li>考试倒计时</li>\n<li>自动评分</li>\n<li>成绩统计图表</li>\n</ul>\n<h4 id=\"技术要点-3\"><a href=\"#技术要点-3\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>HttpSession</code>存储考试进度</li>\n<li>定时任务（Timer&#x2F;Task调度）</li>\n<li>复杂SQL查询（多表关联）</li>\n<li>数据可视化（JFreeChart）</li>\n</ul>\n<h4 id=\"学习资源-3\"><a href=\"#学习资源-3\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://www.guru99.com/servlet-online-exam-project.html\">Guru99项目指南</a></li>\n<li><a href=\"https://github.com/example/online-exam-system\">GitHub源码</a></li>\n</ul>\n<hr>\n<h3 id=\"5-文件云存储系统（高阶）\"><a href=\"#5-文件云存储系统（高阶）\" class=\"headerlink\" title=\"5. 文件云存储系统（高阶）\"></a><strong>5. 文件云存储系统（高阶）</strong></h3><h4 id=\"项目功能-4\"><a href=\"#项目功能-4\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>多文件上传&#x2F;下载</li>\n<li>文件分享链接生成</li>\n<li>存储空间限制</li>\n<li>文件版本管理</li>\n</ul>\n<h4 id=\"技术要点-4\"><a href=\"#技术要点-4\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>Part</code>接口处理大文件</li>\n<li>断点续传（Range请求头）</li>\n<li>安全控制（防盗链）</li>\n<li>文件加密存储（AES）</li>\n</ul>\n<h4 id=\"学习资源-4\"><a href=\"#学习资源-4\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://www.baeldung.com/spring-file-upload\">Baeldung文件上传教程</a></li>\n<li><a href=\"https://github.com/example/file-cloud\">GitHub参考项目</a></li>\n</ul>\n<hr>\n<h3 id=\"6-API网关模拟（架构级）\"><a href=\"#6-API网关模拟（架构级）\" class=\"headerlink\" title=\"6. API网关模拟（架构级）\"></a><strong>6. API网关模拟（架构级）</strong></h3><h4 id=\"项目功能-5\"><a href=\"#项目功能-5\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>请求路由转发</li>\n<li>接口限流（令牌桶算法）</li>\n<li>身份鉴权（JWT验证）</li>\n<li>请求日志记录</li>\n</ul>\n<h4 id=\"技术要点-5\"><a href=\"#技术要点-5\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>Filter</code>链式处理</li>\n<li>动态路由配置（XML&#x2F;JSON）</li>\n<li>反射机制加载策略</li>\n<li>NIO高性能处理</li>\n</ul>\n<h4 id=\"学习资源-5\"><a href=\"#学习资源-5\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://www.marcobehler.com/guides/java-web-apps-without-frameworks\">API网关设计文档</a></li>\n<li><a href=\"https://github.com/example/servlet-gateway\">GitHub基础实现</a></li>\n</ul>\n<hr>\n<h3 id=\"免费学习平台推荐\"><a href=\"#免费学习平台推荐\" class=\"headerlink\" title=\"免费学习平台推荐\"></a><strong>免费学习平台推荐</strong></h3><table>\n<thead>\n<tr>\n<th><strong>平台</strong></th>\n<th><strong>特色</strong></th>\n<th><strong>推荐项目</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GitHub</td>\n<td>开源项目代码参考</td>\n<td>搜索”servlet project”</td>\n</tr>\n<tr>\n<td>JavaTpoint</td>\n<td>分步骤图文教程</td>\n<td><a href=\"https://www.javatpoint.com/servlet-projects\">Servlet项目合集</a></td>\n</tr>\n<tr>\n<td>CodeWithHarry</td>\n<td>视频+代码实操</td>\n<td><a href=\"https://youtube.com/playlist?list=PLu0W_9lII9agAiWp6Y41ueUKx1VcTRxmf\">YouTube教程</a></td>\n</tr>\n<tr>\n<td>GeeksforGeeks</td>\n<td>算法与项目结合</td>\n<td><a href=\"https://www.geeksforgeeks.org/servlet-tutorial/\">Servlet实践专题</a></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"项目实践建议\"><a href=\"#项目实践建议\" class=\"headerlink\" title=\"项目实践建议\"></a><strong>项目实践建议</strong></h3><ol>\n<li><strong>从简单到复杂</strong>：先完成用户管理系统，再挑战文件云存储</li>\n<li><strong>代码规范</strong>：遵循阿里巴巴Java开发手册</li>\n<li><strong>版本控制</strong>：使用Git管理代码（<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">Git入门指南</a>）</li>\n<li><strong>性能优化</strong>：每个项目完成后用JMeter压测</li>\n</ol>\n<p>通过完成以上3-4个项目，可系统掌握Servlet开发核心技能，并为学习Spring MVC等框架打下坚实基础。</p>\n","excerpt":"","more":"<p>以下是一些适合练习的免费在线Servlet项目，涵盖从基础到进阶的实践场景，每个项目都附有核心知识点和推荐资源：</p>\n<hr>\n<h3 id=\"1-用户管理系统（入门级）\"><a href=\"#1-用户管理系统（入门级）\" class=\"headerlink\" title=\"1. 用户管理系统（入门级）\"></a><strong>1. 用户管理系统（入门级）</strong></h3><h4 id=\"项目功能\"><a href=\"#项目功能\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>用户注册&#x2F;登录&#x2F;注销</li>\n<li>个人资料修改</li>\n<li>管理员权限控制</li>\n<li>用户列表分页展示</li>\n</ul>\n<h4 id=\"技术要点\"><a href=\"#技术要点\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>HttpSession</code>实现会话管理</li>\n<li>密码MD5加密存储</li>\n<li><code>Filter</code>实现权限验证</li>\n<li>JDBC连接MySQL数据库</li>\n<li>JSP + EL表达式 + JSTL</li>\n</ul>\n<h4 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://github.com/example/user-management-system\">GitHub参考项目</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/servlet-login-and-logout-example/\">GeeksforGeeks教程</a></li>\n</ul>\n<hr>\n<h3 id=\"2-在线书店（中级）\"><a href=\"#2-在线书店（中级）\" class=\"headerlink\" title=\"2. 在线书店（中级）\"></a><strong>2. 在线书店（中级）</strong></h3><h4 id=\"项目功能-1\"><a href=\"#项目功能-1\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>图书分类展示</li>\n<li>购物车功能（Cookie&#x2F;Session存储）</li>\n<li>订单生成与支付模拟</li>\n<li>图书搜索与分页</li>\n</ul>\n<h4 id=\"技术要点-1\"><a href=\"#技术要点-1\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>Cookie</code>实现购物车持久化</li>\n<li>事务处理（订单与库存同步）</li>\n<li>连接池优化（Druid&#x2F;HikariCP）</li>\n<li>分页算法实现</li>\n<li>文件上传（图书封面）</li>\n</ul>\n<h4 id=\"学习资源-1\"><a href=\"#学习资源-1\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://www.javatpoint.com/servlet-bookstore-project\">JavaTpoint案例</a></li>\n<li><a href=\"https://github.com/example/online-bookstore\">GitHub完整代码</a></li>\n</ul>\n<hr>\n<h3 id=\"3-博客发布平台（进阶）\"><a href=\"#3-博客发布平台（进阶）\" class=\"headerlink\" title=\"3. 博客发布平台（进阶）\"></a><strong>3. 博客发布平台（进阶）</strong></h3><h4 id=\"项目功能-2\"><a href=\"#项目功能-2\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>文章发布与富文本编辑（CKEditor）</li>\n<li>评论与回复系统</li>\n<li>文章分类标签</li>\n<li>Markdown格式支持</li>\n</ul>\n<h4 id=\"技术要点-2\"><a href=\"#技术要点-2\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>Servlet</code>处理RESTful风格API</li>\n<li>防止XSS攻击（HTML过滤）</li>\n<li>数据库事务管理（评论嵌套）</li>\n<li>异步请求处理（AJAX + Servlet）</li>\n</ul>\n<h4 id=\"学习资源-2\"><a href=\"#学习资源-2\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://www.codejava.net/servers/servlet-jsp-blog-app\">博客系统教程</a></li>\n<li><a href=\"https://github.com/example/servlet-blog\">GitHub参考实现</a></li>\n</ul>\n<hr>\n<h3 id=\"4-在线考试系统（综合）\"><a href=\"#4-在线考试系统（综合）\" class=\"headerlink\" title=\"4. 在线考试系统（综合）\"></a><strong>4. 在线考试系统（综合）</strong></h3><h4 id=\"项目功能-3\"><a href=\"#项目功能-3\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>随机组卷（题库管理）</li>\n<li>考试倒计时</li>\n<li>自动评分</li>\n<li>成绩统计图表</li>\n</ul>\n<h4 id=\"技术要点-3\"><a href=\"#技术要点-3\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>HttpSession</code>存储考试进度</li>\n<li>定时任务（Timer&#x2F;Task调度）</li>\n<li>复杂SQL查询（多表关联）</li>\n<li>数据可视化（JFreeChart）</li>\n</ul>\n<h4 id=\"学习资源-3\"><a href=\"#学习资源-3\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://www.guru99.com/servlet-online-exam-project.html\">Guru99项目指南</a></li>\n<li><a href=\"https://github.com/example/online-exam-system\">GitHub源码</a></li>\n</ul>\n<hr>\n<h3 id=\"5-文件云存储系统（高阶）\"><a href=\"#5-文件云存储系统（高阶）\" class=\"headerlink\" title=\"5. 文件云存储系统（高阶）\"></a><strong>5. 文件云存储系统（高阶）</strong></h3><h4 id=\"项目功能-4\"><a href=\"#项目功能-4\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>多文件上传&#x2F;下载</li>\n<li>文件分享链接生成</li>\n<li>存储空间限制</li>\n<li>文件版本管理</li>\n</ul>\n<h4 id=\"技术要点-4\"><a href=\"#技术要点-4\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>Part</code>接口处理大文件</li>\n<li>断点续传（Range请求头）</li>\n<li>安全控制（防盗链）</li>\n<li>文件加密存储（AES）</li>\n</ul>\n<h4 id=\"学习资源-4\"><a href=\"#学习资源-4\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://www.baeldung.com/spring-file-upload\">Baeldung文件上传教程</a></li>\n<li><a href=\"https://github.com/example/file-cloud\">GitHub参考项目</a></li>\n</ul>\n<hr>\n<h3 id=\"6-API网关模拟（架构级）\"><a href=\"#6-API网关模拟（架构级）\" class=\"headerlink\" title=\"6. API网关模拟（架构级）\"></a><strong>6. API网关模拟（架构级）</strong></h3><h4 id=\"项目功能-5\"><a href=\"#项目功能-5\" class=\"headerlink\" title=\"项目功能\"></a><strong>项目功能</strong></h4><ul>\n<li>请求路由转发</li>\n<li>接口限流（令牌桶算法）</li>\n<li>身份鉴权（JWT验证）</li>\n<li>请求日志记录</li>\n</ul>\n<h4 id=\"技术要点-5\"><a href=\"#技术要点-5\" class=\"headerlink\" title=\"技术要点\"></a><strong>技术要点</strong></h4><ul>\n<li><code>Filter</code>链式处理</li>\n<li>动态路由配置（XML&#x2F;JSON）</li>\n<li>反射机制加载策略</li>\n<li>NIO高性能处理</li>\n</ul>\n<h4 id=\"学习资源-5\"><a href=\"#学习资源-5\" class=\"headerlink\" title=\"学习资源\"></a><strong>学习资源</strong></h4><ul>\n<li><a href=\"https://www.marcobehler.com/guides/java-web-apps-without-frameworks\">API网关设计文档</a></li>\n<li><a href=\"https://github.com/example/servlet-gateway\">GitHub基础实现</a></li>\n</ul>\n<hr>\n<h3 id=\"免费学习平台推荐\"><a href=\"#免费学习平台推荐\" class=\"headerlink\" title=\"免费学习平台推荐\"></a><strong>免费学习平台推荐</strong></h3><table>\n<thead>\n<tr>\n<th><strong>平台</strong></th>\n<th><strong>特色</strong></th>\n<th><strong>推荐项目</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GitHub</td>\n<td>开源项目代码参考</td>\n<td>搜索”servlet project”</td>\n</tr>\n<tr>\n<td>JavaTpoint</td>\n<td>分步骤图文教程</td>\n<td><a href=\"https://www.javatpoint.com/servlet-projects\">Servlet项目合集</a></td>\n</tr>\n<tr>\n<td>CodeWithHarry</td>\n<td>视频+代码实操</td>\n<td><a href=\"https://youtube.com/playlist?list=PLu0W_9lII9agAiWp6Y41ueUKx1VcTRxmf\">YouTube教程</a></td>\n</tr>\n<tr>\n<td>GeeksforGeeks</td>\n<td>算法与项目结合</td>\n<td><a href=\"https://www.geeksforgeeks.org/servlet-tutorial/\">Servlet实践专题</a></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"项目实践建议\"><a href=\"#项目实践建议\" class=\"headerlink\" title=\"项目实践建议\"></a><strong>项目实践建议</strong></h3><ol>\n<li><strong>从简单到复杂</strong>：先完成用户管理系统，再挑战文件云存储</li>\n<li><strong>代码规范</strong>：遵循阿里巴巴Java开发手册</li>\n<li><strong>版本控制</strong>：使用Git管理代码（<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">Git入门指南</a>）</li>\n<li><strong>性能优化</strong>：每个项目完成后用JMeter压测</li>\n</ol>\n<p>通过完成以上3-4个项目，可系统掌握Servlet开发核心技能，并为学习Spring MVC等框架打下坚实基础。</p>\n"},{"title":"Servlet学习路线","_content":"\n### **以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点**\n\n---\n\n### **第一阶段：基础入门（2周）**\n#### 1. 环境搭建\n- 安装JDK 17+ + Tomcat 10.x\n- 配置IntelliJ IDEA的Web项目模板\n- 创建第一个Servlet（`@WebServlet`注解方式）\n\n#### 2. HTTP协议精要\n- 掌握请求结构：`GET /user?id=1 HTTP/1.1`\n- 理解状态码：200/404/500\n- 实验：使用Postman发送不同请求类型\n\n#### 3. Servlet生命周期\n- 实现`init()` → `service()` → `destroy()`\n- 配置`<load-on-startup>`参数\n- 示例：统计Servlet被访问次数\n\n#### 4. 请求响应处理\n- 获取参数：`request.getParameter(\"name\")`\n- 设置响应头：`response.setContentType()`\n- 实践：开发文件下载功能\n\n---\n\n### **第二阶段：深度掌握（2周）**\n#### 1. 会话管理\n- Cookie机制：`Cookie userCookie = new Cookie(\"user\", \"admin\")`\n- Session实现：`HttpSession session = request.getSession()`\n- 案例：实现购物车功能\n\n#### 2. 过滤器与监听器\n- 开发字符编码过滤器（`CharacterEncodingFilter`）\n- 实现`ServletRequestListener`统计请求量\n- 实践：日志记录过滤器\n\n#### 3. 文件上传\n- 使用`Part`接口处理文件：`request.getPart(\"file\")`\n- 配置`@MultipartConfig`\n- 示例：头像上传功能\n\n---\n\n### **第三阶段：整合应用（3周）**\n#### 1. 数据库集成\n- 配置Druid连接池\n- 使用JDBC Template操作数据库\n- 案例：用户管理系统CRUD\n\n#### 2. JSP整合\n- 掌握EL表达式：`${user.name}`\n- 学习JSTL标签：`<c:forEach>`\n- 实践：开发图书管理系统前端页面\n\n#### 3. MVC模式实现\n- 自定义前端控制器（Front Controller）\n- 实现请求路由映射\n- 项目：仿Spring MVC简易框架\n\n---\n\n### **第四阶段：性能优化（1周）**\n#### 1. 线程安全\n- 分析Servlet的线程安全问题\n- 使用`synchronized`保护共享资源\n- 案例：库存扣减场景\n\n#### 2. 连接池优化\n- 配置Tomcat JDBC Pool\n- 设置最大活跃连接数\n- 压力测试：JMeter模拟100并发\n\n#### 3. 缓存策略\n- 使用Ehcache缓存热点数据\n- 实现响应内容缓存\n- 示例：商品分类缓存\n\n---\n\n### **配套实战项目**\n1. **项目1：电商用户中心**\n  - 功能模块：注册/登录/个人资料\n  - 技术点：Session维持登录状态、MD5密码加密\n  - 代码量：约1500行\n\n2. **项目2：在线文档管理系统**\n  - 功能模块：文件上传/权限控制/版本管理\n  - 技术点：RBAC权限模型、文件断点续传\n  - 代码量：约3000行\n\n3. **项目3：API网关原型**\n  - 功能模块：路由转发/限流熔断\n  - 技术点：过滤器链、令牌桶算法\n  - 代码量：约2000行\n\n---\n\n### **学习资源推荐**\n| 类型         | 推荐内容                                      |\n|--------------|---------------------------------------------|\n| 经典书籍     | 《Head First Servlets & JSP》               |\n| 在线课程     | 极客时间《Java Web开发实战》                 |\n| 官方文档     | Oracle Java EE 8教程                        |\n| 开发工具     | Postman + VisualVM                          |\n\n---\n\n### **学习路线表**\n| 周数 | 学习重点                  | 关键实践任务                    |\n|------|-------------------------|-------------------------------|\n| 1    | Servlet基础+HTTP协议     | 开发文件下载服务器              |\n| 2    | 会话管理+过滤器          | 实现购物车系统                  |\n| 3    | JSP整合+EL表达式         | 构建图书管理前端                |\n| 4    | JDBC整合+连接池          | 用户管理系统CRUD               |\n| 5    | MVC模式+自定义框架       | 仿Spring MVC路由实现           |\n| 6    | 性能优化+安全防护        | 压力测试与缓存优化              |\n| 7    | 项目实战1                | 完成电商用户中心                |\n| 8    | 项目实战2                | 构建文档管理系统                |\n\n---\n\n### **常见误区提醒**\n1. **忽略HTTP协议基础**：直接跳转框架学习导致原理不清\n2. **过度依赖框架**：应先掌握原生Servlet开发能力\n3. **线程安全意识薄弱**：在多用户场景出现数据错乱\n4. **异常处理不完善**：未正确关闭数据库连接等资源\n\n通过这个路线系统学习，可达到独立开发企业级Web应用的水平，并为学习Spring MVC打下坚实基础。建议每周保持至少15小时的有效学习时间，重点模块配合思维导图加深理解。","source":"_posts/Servlet学习路线.md","raw":"---\ntitle: Servlet学习路线\n---\n\n### **以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点**\n\n---\n\n### **第一阶段：基础入门（2周）**\n#### 1. 环境搭建\n- 安装JDK 17+ + Tomcat 10.x\n- 配置IntelliJ IDEA的Web项目模板\n- 创建第一个Servlet（`@WebServlet`注解方式）\n\n#### 2. HTTP协议精要\n- 掌握请求结构：`GET /user?id=1 HTTP/1.1`\n- 理解状态码：200/404/500\n- 实验：使用Postman发送不同请求类型\n\n#### 3. Servlet生命周期\n- 实现`init()` → `service()` → `destroy()`\n- 配置`<load-on-startup>`参数\n- 示例：统计Servlet被访问次数\n\n#### 4. 请求响应处理\n- 获取参数：`request.getParameter(\"name\")`\n- 设置响应头：`response.setContentType()`\n- 实践：开发文件下载功能\n\n---\n\n### **第二阶段：深度掌握（2周）**\n#### 1. 会话管理\n- Cookie机制：`Cookie userCookie = new Cookie(\"user\", \"admin\")`\n- Session实现：`HttpSession session = request.getSession()`\n- 案例：实现购物车功能\n\n#### 2. 过滤器与监听器\n- 开发字符编码过滤器（`CharacterEncodingFilter`）\n- 实现`ServletRequestListener`统计请求量\n- 实践：日志记录过滤器\n\n#### 3. 文件上传\n- 使用`Part`接口处理文件：`request.getPart(\"file\")`\n- 配置`@MultipartConfig`\n- 示例：头像上传功能\n\n---\n\n### **第三阶段：整合应用（3周）**\n#### 1. 数据库集成\n- 配置Druid连接池\n- 使用JDBC Template操作数据库\n- 案例：用户管理系统CRUD\n\n#### 2. JSP整合\n- 掌握EL表达式：`${user.name}`\n- 学习JSTL标签：`<c:forEach>`\n- 实践：开发图书管理系统前端页面\n\n#### 3. MVC模式实现\n- 自定义前端控制器（Front Controller）\n- 实现请求路由映射\n- 项目：仿Spring MVC简易框架\n\n---\n\n### **第四阶段：性能优化（1周）**\n#### 1. 线程安全\n- 分析Servlet的线程安全问题\n- 使用`synchronized`保护共享资源\n- 案例：库存扣减场景\n\n#### 2. 连接池优化\n- 配置Tomcat JDBC Pool\n- 设置最大活跃连接数\n- 压力测试：JMeter模拟100并发\n\n#### 3. 缓存策略\n- 使用Ehcache缓存热点数据\n- 实现响应内容缓存\n- 示例：商品分类缓存\n\n---\n\n### **配套实战项目**\n1. **项目1：电商用户中心**\n  - 功能模块：注册/登录/个人资料\n  - 技术点：Session维持登录状态、MD5密码加密\n  - 代码量：约1500行\n\n2. **项目2：在线文档管理系统**\n  - 功能模块：文件上传/权限控制/版本管理\n  - 技术点：RBAC权限模型、文件断点续传\n  - 代码量：约3000行\n\n3. **项目3：API网关原型**\n  - 功能模块：路由转发/限流熔断\n  - 技术点：过滤器链、令牌桶算法\n  - 代码量：约2000行\n\n---\n\n### **学习资源推荐**\n| 类型         | 推荐内容                                      |\n|--------------|---------------------------------------------|\n| 经典书籍     | 《Head First Servlets & JSP》               |\n| 在线课程     | 极客时间《Java Web开发实战》                 |\n| 官方文档     | Oracle Java EE 8教程                        |\n| 开发工具     | Postman + VisualVM                          |\n\n---\n\n### **学习路线表**\n| 周数 | 学习重点                  | 关键实践任务                    |\n|------|-------------------------|-------------------------------|\n| 1    | Servlet基础+HTTP协议     | 开发文件下载服务器              |\n| 2    | 会话管理+过滤器          | 实现购物车系统                  |\n| 3    | JSP整合+EL表达式         | 构建图书管理前端                |\n| 4    | JDBC整合+连接池          | 用户管理系统CRUD               |\n| 5    | MVC模式+自定义框架       | 仿Spring MVC路由实现           |\n| 6    | 性能优化+安全防护        | 压力测试与缓存优化              |\n| 7    | 项目实战1                | 完成电商用户中心                |\n| 8    | 项目实战2                | 构建文档管理系统                |\n\n---\n\n### **常见误区提醒**\n1. **忽略HTTP协议基础**：直接跳转框架学习导致原理不清\n2. **过度依赖框架**：应先掌握原生Servlet开发能力\n3. **线程安全意识薄弱**：在多用户场景出现数据错乱\n4. **异常处理不完善**：未正确关闭数据库连接等资源\n\n通过这个路线系统学习，可达到独立开发企业级Web应用的水平，并为学习Spring MVC打下坚实基础。建议每周保持至少15小时的有效学习时间，重点模块配合思维导图加深理解。","slug":"Servlet学习路线","published":1,"date":"2025-02-17T13:20:22.256Z","updated":"2025-02-17T13:22:40.027Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyumn000348v6a65ec203","content":"<h3 id=\"以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点\"><a href=\"#以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点\" class=\"headerlink\" title=\"以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点\"></a><strong>以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点</strong></h3><hr>\n<h3 id=\"第一阶段：基础入门（2周）\"><a href=\"#第一阶段：基础入门（2周）\" class=\"headerlink\" title=\"第一阶段：基础入门（2周）\"></a><strong>第一阶段：基础入门（2周）</strong></h3><h4 id=\"1-环境搭建\"><a href=\"#1-环境搭建\" class=\"headerlink\" title=\"1. 环境搭建\"></a>1. 环境搭建</h4><ul>\n<li>安装JDK 17+ + Tomcat 10.x</li>\n<li>配置IntelliJ IDEA的Web项目模板</li>\n<li>创建第一个Servlet（<code>@WebServlet</code>注解方式）</li>\n</ul>\n<h4 id=\"2-HTTP协议精要\"><a href=\"#2-HTTP协议精要\" class=\"headerlink\" title=\"2. HTTP协议精要\"></a>2. HTTP协议精要</h4><ul>\n<li>掌握请求结构：<code>GET /user?id=1 HTTP/1.1</code></li>\n<li>理解状态码：200&#x2F;404&#x2F;500</li>\n<li>实验：使用Postman发送不同请求类型</li>\n</ul>\n<h4 id=\"3-Servlet生命周期\"><a href=\"#3-Servlet生命周期\" class=\"headerlink\" title=\"3. Servlet生命周期\"></a>3. Servlet生命周期</h4><ul>\n<li>实现<code>init()</code> → <code>service()</code> → <code>destroy()</code></li>\n<li>配置<code>&lt;load-on-startup&gt;</code>参数</li>\n<li>示例：统计Servlet被访问次数</li>\n</ul>\n<h4 id=\"4-请求响应处理\"><a href=\"#4-请求响应处理\" class=\"headerlink\" title=\"4. 请求响应处理\"></a>4. 请求响应处理</h4><ul>\n<li>获取参数：<code>request.getParameter(&quot;name&quot;)</code></li>\n<li>设置响应头：<code>response.setContentType()</code></li>\n<li>实践：开发文件下载功能</li>\n</ul>\n<hr>\n<h3 id=\"第二阶段：深度掌握（2周）\"><a href=\"#第二阶段：深度掌握（2周）\" class=\"headerlink\" title=\"第二阶段：深度掌握（2周）\"></a><strong>第二阶段：深度掌握（2周）</strong></h3><h4 id=\"1-会话管理\"><a href=\"#1-会话管理\" class=\"headerlink\" title=\"1. 会话管理\"></a>1. 会话管理</h4><ul>\n<li>Cookie机制：<code>Cookie userCookie = new Cookie(&quot;user&quot;, &quot;admin&quot;)</code></li>\n<li>Session实现：<code>HttpSession session = request.getSession()</code></li>\n<li>案例：实现购物车功能</li>\n</ul>\n<h4 id=\"2-过滤器与监听器\"><a href=\"#2-过滤器与监听器\" class=\"headerlink\" title=\"2. 过滤器与监听器\"></a>2. 过滤器与监听器</h4><ul>\n<li>开发字符编码过滤器（<code>CharacterEncodingFilter</code>）</li>\n<li>实现<code>ServletRequestListener</code>统计请求量</li>\n<li>实践：日志记录过滤器</li>\n</ul>\n<h4 id=\"3-文件上传\"><a href=\"#3-文件上传\" class=\"headerlink\" title=\"3. 文件上传\"></a>3. 文件上传</h4><ul>\n<li>使用<code>Part</code>接口处理文件：<code>request.getPart(&quot;file&quot;)</code></li>\n<li>配置<code>@MultipartConfig</code></li>\n<li>示例：头像上传功能</li>\n</ul>\n<hr>\n<h3 id=\"第三阶段：整合应用（3周）\"><a href=\"#第三阶段：整合应用（3周）\" class=\"headerlink\" title=\"第三阶段：整合应用（3周）\"></a><strong>第三阶段：整合应用（3周）</strong></h3><h4 id=\"1-数据库集成\"><a href=\"#1-数据库集成\" class=\"headerlink\" title=\"1. 数据库集成\"></a>1. 数据库集成</h4><ul>\n<li>配置Druid连接池</li>\n<li>使用JDBC Template操作数据库</li>\n<li>案例：用户管理系统CRUD</li>\n</ul>\n<h4 id=\"2-JSP整合\"><a href=\"#2-JSP整合\" class=\"headerlink\" title=\"2. JSP整合\"></a>2. JSP整合</h4><ul>\n<li>掌握EL表达式：<code>$&#123;user.name&#125;</code></li>\n<li>学习JSTL标签：<code>&lt;c:forEach&gt;</code></li>\n<li>实践：开发图书管理系统前端页面</li>\n</ul>\n<h4 id=\"3-MVC模式实现\"><a href=\"#3-MVC模式实现\" class=\"headerlink\" title=\"3. MVC模式实现\"></a>3. MVC模式实现</h4><ul>\n<li>自定义前端控制器（Front Controller）</li>\n<li>实现请求路由映射</li>\n<li>项目：仿Spring MVC简易框架</li>\n</ul>\n<hr>\n<h3 id=\"第四阶段：性能优化（1周）\"><a href=\"#第四阶段：性能优化（1周）\" class=\"headerlink\" title=\"第四阶段：性能优化（1周）\"></a><strong>第四阶段：性能优化（1周）</strong></h3><h4 id=\"1-线程安全\"><a href=\"#1-线程安全\" class=\"headerlink\" title=\"1. 线程安全\"></a>1. 线程安全</h4><ul>\n<li>分析Servlet的线程安全问题</li>\n<li>使用<code>synchronized</code>保护共享资源</li>\n<li>案例：库存扣减场景</li>\n</ul>\n<h4 id=\"2-连接池优化\"><a href=\"#2-连接池优化\" class=\"headerlink\" title=\"2. 连接池优化\"></a>2. 连接池优化</h4><ul>\n<li>配置Tomcat JDBC Pool</li>\n<li>设置最大活跃连接数</li>\n<li>压力测试：JMeter模拟100并发</li>\n</ul>\n<h4 id=\"3-缓存策略\"><a href=\"#3-缓存策略\" class=\"headerlink\" title=\"3. 缓存策略\"></a>3. 缓存策略</h4><ul>\n<li>使用Ehcache缓存热点数据</li>\n<li>实现响应内容缓存</li>\n<li>示例：商品分类缓存</li>\n</ul>\n<hr>\n<h3 id=\"配套实战项目\"><a href=\"#配套实战项目\" class=\"headerlink\" title=\"配套实战项目\"></a><strong>配套实战项目</strong></h3><ol>\n<li><strong>项目1：电商用户中心</strong></li>\n</ol>\n<ul>\n<li>功能模块：注册&#x2F;登录&#x2F;个人资料</li>\n<li>技术点：Session维持登录状态、MD5密码加密</li>\n<li>代码量：约1500行</li>\n</ul>\n<ol start=\"2\">\n<li><strong>项目2：在线文档管理系统</strong></li>\n</ol>\n<ul>\n<li>功能模块：文件上传&#x2F;权限控制&#x2F;版本管理</li>\n<li>技术点：RBAC权限模型、文件断点续传</li>\n<li>代码量：约3000行</li>\n</ul>\n<ol start=\"3\">\n<li><strong>项目3：API网关原型</strong></li>\n</ol>\n<ul>\n<li>功能模块：路由转发&#x2F;限流熔断</li>\n<li>技术点：过滤器链、令牌桶算法</li>\n<li>代码量：约2000行</li>\n</ul>\n<hr>\n<h3 id=\"学习资源推荐\"><a href=\"#学习资源推荐\" class=\"headerlink\" title=\"学习资源推荐\"></a><strong>学习资源推荐</strong></h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>推荐内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>经典书籍</td>\n<td>《Head First Servlets &amp; JSP》</td>\n</tr>\n<tr>\n<td>在线课程</td>\n<td>极客时间《Java Web开发实战》</td>\n</tr>\n<tr>\n<td>官方文档</td>\n<td>Oracle Java EE 8教程</td>\n</tr>\n<tr>\n<td>开发工具</td>\n<td>Postman + VisualVM</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"学习路线表\"><a href=\"#学习路线表\" class=\"headerlink\" title=\"学习路线表\"></a><strong>学习路线表</strong></h3><table>\n<thead>\n<tr>\n<th>周数</th>\n<th>学习重点</th>\n<th>关键实践任务</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Servlet基础+HTTP协议</td>\n<td>开发文件下载服务器</td>\n</tr>\n<tr>\n<td>2</td>\n<td>会话管理+过滤器</td>\n<td>实现购物车系统</td>\n</tr>\n<tr>\n<td>3</td>\n<td>JSP整合+EL表达式</td>\n<td>构建图书管理前端</td>\n</tr>\n<tr>\n<td>4</td>\n<td>JDBC整合+连接池</td>\n<td>用户管理系统CRUD</td>\n</tr>\n<tr>\n<td>5</td>\n<td>MVC模式+自定义框架</td>\n<td>仿Spring MVC路由实现</td>\n</tr>\n<tr>\n<td>6</td>\n<td>性能优化+安全防护</td>\n<td>压力测试与缓存优化</td>\n</tr>\n<tr>\n<td>7</td>\n<td>项目实战1</td>\n<td>完成电商用户中心</td>\n</tr>\n<tr>\n<td>8</td>\n<td>项目实战2</td>\n<td>构建文档管理系统</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"常见误区提醒\"><a href=\"#常见误区提醒\" class=\"headerlink\" title=\"常见误区提醒\"></a><strong>常见误区提醒</strong></h3><ol>\n<li><strong>忽略HTTP协议基础</strong>：直接跳转框架学习导致原理不清</li>\n<li><strong>过度依赖框架</strong>：应先掌握原生Servlet开发能力</li>\n<li><strong>线程安全意识薄弱</strong>：在多用户场景出现数据错乱</li>\n<li><strong>异常处理不完善</strong>：未正确关闭数据库连接等资源</li>\n</ol>\n<p>通过这个路线系统学习，可达到独立开发企业级Web应用的水平，并为学习Spring MVC打下坚实基础。建议每周保持至少15小时的有效学习时间，重点模块配合思维导图加深理解。</p>\n","excerpt":"","more":"<h3 id=\"以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点\"><a href=\"#以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点\" class=\"headerlink\" title=\"以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点\"></a><strong>以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点</strong></h3><hr>\n<h3 id=\"第一阶段：基础入门（2周）\"><a href=\"#第一阶段：基础入门（2周）\" class=\"headerlink\" title=\"第一阶段：基础入门（2周）\"></a><strong>第一阶段：基础入门（2周）</strong></h3><h4 id=\"1-环境搭建\"><a href=\"#1-环境搭建\" class=\"headerlink\" title=\"1. 环境搭建\"></a>1. 环境搭建</h4><ul>\n<li>安装JDK 17+ + Tomcat 10.x</li>\n<li>配置IntelliJ IDEA的Web项目模板</li>\n<li>创建第一个Servlet（<code>@WebServlet</code>注解方式）</li>\n</ul>\n<h4 id=\"2-HTTP协议精要\"><a href=\"#2-HTTP协议精要\" class=\"headerlink\" title=\"2. HTTP协议精要\"></a>2. HTTP协议精要</h4><ul>\n<li>掌握请求结构：<code>GET /user?id=1 HTTP/1.1</code></li>\n<li>理解状态码：200&#x2F;404&#x2F;500</li>\n<li>实验：使用Postman发送不同请求类型</li>\n</ul>\n<h4 id=\"3-Servlet生命周期\"><a href=\"#3-Servlet生命周期\" class=\"headerlink\" title=\"3. Servlet生命周期\"></a>3. Servlet生命周期</h4><ul>\n<li>实现<code>init()</code> → <code>service()</code> → <code>destroy()</code></li>\n<li>配置<code>&lt;load-on-startup&gt;</code>参数</li>\n<li>示例：统计Servlet被访问次数</li>\n</ul>\n<h4 id=\"4-请求响应处理\"><a href=\"#4-请求响应处理\" class=\"headerlink\" title=\"4. 请求响应处理\"></a>4. 请求响应处理</h4><ul>\n<li>获取参数：<code>request.getParameter(&quot;name&quot;)</code></li>\n<li>设置响应头：<code>response.setContentType()</code></li>\n<li>实践：开发文件下载功能</li>\n</ul>\n<hr>\n<h3 id=\"第二阶段：深度掌握（2周）\"><a href=\"#第二阶段：深度掌握（2周）\" class=\"headerlink\" title=\"第二阶段：深度掌握（2周）\"></a><strong>第二阶段：深度掌握（2周）</strong></h3><h4 id=\"1-会话管理\"><a href=\"#1-会话管理\" class=\"headerlink\" title=\"1. 会话管理\"></a>1. 会话管理</h4><ul>\n<li>Cookie机制：<code>Cookie userCookie = new Cookie(&quot;user&quot;, &quot;admin&quot;)</code></li>\n<li>Session实现：<code>HttpSession session = request.getSession()</code></li>\n<li>案例：实现购物车功能</li>\n</ul>\n<h4 id=\"2-过滤器与监听器\"><a href=\"#2-过滤器与监听器\" class=\"headerlink\" title=\"2. 过滤器与监听器\"></a>2. 过滤器与监听器</h4><ul>\n<li>开发字符编码过滤器（<code>CharacterEncodingFilter</code>）</li>\n<li>实现<code>ServletRequestListener</code>统计请求量</li>\n<li>实践：日志记录过滤器</li>\n</ul>\n<h4 id=\"3-文件上传\"><a href=\"#3-文件上传\" class=\"headerlink\" title=\"3. 文件上传\"></a>3. 文件上传</h4><ul>\n<li>使用<code>Part</code>接口处理文件：<code>request.getPart(&quot;file&quot;)</code></li>\n<li>配置<code>@MultipartConfig</code></li>\n<li>示例：头像上传功能</li>\n</ul>\n<hr>\n<h3 id=\"第三阶段：整合应用（3周）\"><a href=\"#第三阶段：整合应用（3周）\" class=\"headerlink\" title=\"第三阶段：整合应用（3周）\"></a><strong>第三阶段：整合应用（3周）</strong></h3><h4 id=\"1-数据库集成\"><a href=\"#1-数据库集成\" class=\"headerlink\" title=\"1. 数据库集成\"></a>1. 数据库集成</h4><ul>\n<li>配置Druid连接池</li>\n<li>使用JDBC Template操作数据库</li>\n<li>案例：用户管理系统CRUD</li>\n</ul>\n<h4 id=\"2-JSP整合\"><a href=\"#2-JSP整合\" class=\"headerlink\" title=\"2. JSP整合\"></a>2. JSP整合</h4><ul>\n<li>掌握EL表达式：<code>$&#123;user.name&#125;</code></li>\n<li>学习JSTL标签：<code>&lt;c:forEach&gt;</code></li>\n<li>实践：开发图书管理系统前端页面</li>\n</ul>\n<h4 id=\"3-MVC模式实现\"><a href=\"#3-MVC模式实现\" class=\"headerlink\" title=\"3. MVC模式实现\"></a>3. MVC模式实现</h4><ul>\n<li>自定义前端控制器（Front Controller）</li>\n<li>实现请求路由映射</li>\n<li>项目：仿Spring MVC简易框架</li>\n</ul>\n<hr>\n<h3 id=\"第四阶段：性能优化（1周）\"><a href=\"#第四阶段：性能优化（1周）\" class=\"headerlink\" title=\"第四阶段：性能优化（1周）\"></a><strong>第四阶段：性能优化（1周）</strong></h3><h4 id=\"1-线程安全\"><a href=\"#1-线程安全\" class=\"headerlink\" title=\"1. 线程安全\"></a>1. 线程安全</h4><ul>\n<li>分析Servlet的线程安全问题</li>\n<li>使用<code>synchronized</code>保护共享资源</li>\n<li>案例：库存扣减场景</li>\n</ul>\n<h4 id=\"2-连接池优化\"><a href=\"#2-连接池优化\" class=\"headerlink\" title=\"2. 连接池优化\"></a>2. 连接池优化</h4><ul>\n<li>配置Tomcat JDBC Pool</li>\n<li>设置最大活跃连接数</li>\n<li>压力测试：JMeter模拟100并发</li>\n</ul>\n<h4 id=\"3-缓存策略\"><a href=\"#3-缓存策略\" class=\"headerlink\" title=\"3. 缓存策略\"></a>3. 缓存策略</h4><ul>\n<li>使用Ehcache缓存热点数据</li>\n<li>实现响应内容缓存</li>\n<li>示例：商品分类缓存</li>\n</ul>\n<hr>\n<h3 id=\"配套实战项目\"><a href=\"#配套实战项目\" class=\"headerlink\" title=\"配套实战项目\"></a><strong>配套实战项目</strong></h3><ol>\n<li><strong>项目1：电商用户中心</strong></li>\n</ol>\n<ul>\n<li>功能模块：注册&#x2F;登录&#x2F;个人资料</li>\n<li>技术点：Session维持登录状态、MD5密码加密</li>\n<li>代码量：约1500行</li>\n</ul>\n<ol start=\"2\">\n<li><strong>项目2：在线文档管理系统</strong></li>\n</ol>\n<ul>\n<li>功能模块：文件上传&#x2F;权限控制&#x2F;版本管理</li>\n<li>技术点：RBAC权限模型、文件断点续传</li>\n<li>代码量：约3000行</li>\n</ul>\n<ol start=\"3\">\n<li><strong>项目3：API网关原型</strong></li>\n</ol>\n<ul>\n<li>功能模块：路由转发&#x2F;限流熔断</li>\n<li>技术点：过滤器链、令牌桶算法</li>\n<li>代码量：约2000行</li>\n</ul>\n<hr>\n<h3 id=\"学习资源推荐\"><a href=\"#学习资源推荐\" class=\"headerlink\" title=\"学习资源推荐\"></a><strong>学习资源推荐</strong></h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>推荐内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>经典书籍</td>\n<td>《Head First Servlets &amp; JSP》</td>\n</tr>\n<tr>\n<td>在线课程</td>\n<td>极客时间《Java Web开发实战》</td>\n</tr>\n<tr>\n<td>官方文档</td>\n<td>Oracle Java EE 8教程</td>\n</tr>\n<tr>\n<td>开发工具</td>\n<td>Postman + VisualVM</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"学习路线表\"><a href=\"#学习路线表\" class=\"headerlink\" title=\"学习路线表\"></a><strong>学习路线表</strong></h3><table>\n<thead>\n<tr>\n<th>周数</th>\n<th>学习重点</th>\n<th>关键实践任务</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Servlet基础+HTTP协议</td>\n<td>开发文件下载服务器</td>\n</tr>\n<tr>\n<td>2</td>\n<td>会话管理+过滤器</td>\n<td>实现购物车系统</td>\n</tr>\n<tr>\n<td>3</td>\n<td>JSP整合+EL表达式</td>\n<td>构建图书管理前端</td>\n</tr>\n<tr>\n<td>4</td>\n<td>JDBC整合+连接池</td>\n<td>用户管理系统CRUD</td>\n</tr>\n<tr>\n<td>5</td>\n<td>MVC模式+自定义框架</td>\n<td>仿Spring MVC路由实现</td>\n</tr>\n<tr>\n<td>6</td>\n<td>性能优化+安全防护</td>\n<td>压力测试与缓存优化</td>\n</tr>\n<tr>\n<td>7</td>\n<td>项目实战1</td>\n<td>完成电商用户中心</td>\n</tr>\n<tr>\n<td>8</td>\n<td>项目实战2</td>\n<td>构建文档管理系统</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"常见误区提醒\"><a href=\"#常见误区提醒\" class=\"headerlink\" title=\"常见误区提醒\"></a><strong>常见误区提醒</strong></h3><ol>\n<li><strong>忽略HTTP协议基础</strong>：直接跳转框架学习导致原理不清</li>\n<li><strong>过度依赖框架</strong>：应先掌握原生Servlet开发能力</li>\n<li><strong>线程安全意识薄弱</strong>：在多用户场景出现数据错乱</li>\n<li><strong>异常处理不完善</strong>：未正确关闭数据库连接等资源</li>\n</ol>\n<p>通过这个路线系统学习，可达到独立开发企业级Web应用的水平，并为学习Spring MVC打下坚实基础。建议每周保持至少15小时的有效学习时间，重点模块配合思维导图加深理解。</p>\n"},{"title":"java中的大数","_content":"\n## BigDecimal 适用于任意精度的浮点数运算\n\n> 1、add(BigDecimal val): 两个大浮点数相加\n\n```java\nimport java.math.BigDecimal;\n\npublic class BigDecimalTest {\n    public static void main(String[] args) {\n        BigDecimal bigDecimal = new BigDecimal(\"50000000\");\n        BigDecimal bigDecimal1 = new BigDecimal(\"30000000\");\n        bigDecimal = bigDecimal.add(bigDecimal1);\n        System.out.println(\"bigDecimal:\"+bigDecimal);\n        // 结果：bigDecimal:80000000\n    }\n} \n```\n\n> subtract(BigDecimal val): 两个大浮点数相减\n\n```java\nimport java.math.BigDecimal;\n\npublic class BigDecimalTest {\n    public static void main(String[] args) {\n        BigDecimal bigDecimal = new BigDecimal(\"50000000\");\n        BigDecimal bigDecimal1 = new BigDecimal(\"30000000\");\n        bigDecimal = bigDecimal.subtract(bigDecimal1);\n        System.out.println(\"bigDecimal:\"+bigDecimal);\n        // 结果：bigDecimal:20000000\n    }\n}\n\n```\n\n> multiply(BigDecimal val): 两个大浮点数相乘\n\n```java\nimport java.math.BigDecimal;\n\npublic class BigDecimalTest {\n    public static void main(String[] args) {\n        BigDecimal bigDecimal = new BigDecimal(\"50000000\");\n        BigDecimal bigDecimal1 = new BigDecimal(\"30000000\");\n        bigDecimal = bigDecimal.multiply(bigDecimal1);\n        System.out.println(\"bigDecimal:\"+bigDecimal);\n        // 结果：bigDecimal:150000000000000000\n    }\n}\n\n```\n\n> divide(BigDecimal val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式\n\n```java\nimport java.math.BigDecimal;\n\npublic class BigDecimalTest {\n    public static void main(String[] args) {\n        BigDecimal bigDecimal = new BigDecimal(\"50000000\");\n        BigDecimal bigDecimal1 = new BigDecimal(\"30000000\");\n        bigDecimal = bigDecimal.divide(bigDecimal1, BigDecimal.ROUND_HALF_UP);\n        System.out.println(\"bigDecimal:\"+bigDecimal);\n        // 结果：bigDecimal:1.666666666666666666666666666666666666666666666666666666666666666666\n    }\n}\n```\n\n## BigInteger: 适用于任意精度的整数运算\n\n> 1、add(BigInteger val): 两个大浮点数相加\n\n```java\nimport java.math.BigInteger;\n\npublic class BigIntegerTest {\n    public static void main(String[] args) {\n        BigInteger BigInteger = new BigInteger(\"50000000\");\n        BigInteger BigInteger1 = new BigInteger(\"30000000\");\n        BigInteger = BigInteger.add(BigInteger1);\n        System.out.println(\"BigInteger:\"+BigInteger);\n        // 结果：BigInteger:80000000\n    }\n} \n```\n\n> subtract(BigInteger val): 两个大浮点数相减\n\n```java\nimport java.math.BigInteger;\n\npublic class BigIntegerTest {\n    public static void main(String[] args) {\n        BigInteger BigInteger = new BigInteger(\"50000000\");\n        BigInteger BigInteger1 = new BigInteger(\"30000000\");\n        BigInteger = BigInteger.subtract(BigInteger1);\n        System.out.println(\"BigInteger:\"+BigInteger);\n        // 结果：BigInteger:20000000\n    }\n}\n\n```\n\n> multiply(BigInteger val): 两个大浮点数相乘\n\n```java\nimport java.math.BigInteger;\n\npublic class BigIntegerTest {\n    public static void main(String[] args) {\n        BigInteger BigInteger = new BigInteger(\"50000000\");\n        BigInteger BigInteger1 = new BigInteger(\"30000000\");\n        BigInteger = BigInteger.multiply(BigInteger1);\n        System.out.println(\"BigInteger:\"+BigInteger);\n        // 结果：BigInteger:150000000000000000\n    }\n}\n\n```\n\n> divide(BigInteger val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式\n\n```java\nimport java.math.BigInteger;\n\npublic class BigIntegerTest {\n    public static void main(String[] args) {\n        BigInteger BigInteger = new BigInteger(\"50000000\");\n        BigInteger BigInteger1 = new BigInteger(\"30000000\");\n        BigInteger = BigInteger.divide(BigInteger1);\n        System.out.println(\"BigInteger:\"+BigInteger);\n        // 结果：BigInteger:1\n    }\n}\n```","source":"_posts/java中的大数.md","raw":"---\ntitle: java中的大数\n---\n\n## BigDecimal 适用于任意精度的浮点数运算\n\n> 1、add(BigDecimal val): 两个大浮点数相加\n\n```java\nimport java.math.BigDecimal;\n\npublic class BigDecimalTest {\n    public static void main(String[] args) {\n        BigDecimal bigDecimal = new BigDecimal(\"50000000\");\n        BigDecimal bigDecimal1 = new BigDecimal(\"30000000\");\n        bigDecimal = bigDecimal.add(bigDecimal1);\n        System.out.println(\"bigDecimal:\"+bigDecimal);\n        // 结果：bigDecimal:80000000\n    }\n} \n```\n\n> subtract(BigDecimal val): 两个大浮点数相减\n\n```java\nimport java.math.BigDecimal;\n\npublic class BigDecimalTest {\n    public static void main(String[] args) {\n        BigDecimal bigDecimal = new BigDecimal(\"50000000\");\n        BigDecimal bigDecimal1 = new BigDecimal(\"30000000\");\n        bigDecimal = bigDecimal.subtract(bigDecimal1);\n        System.out.println(\"bigDecimal:\"+bigDecimal);\n        // 结果：bigDecimal:20000000\n    }\n}\n\n```\n\n> multiply(BigDecimal val): 两个大浮点数相乘\n\n```java\nimport java.math.BigDecimal;\n\npublic class BigDecimalTest {\n    public static void main(String[] args) {\n        BigDecimal bigDecimal = new BigDecimal(\"50000000\");\n        BigDecimal bigDecimal1 = new BigDecimal(\"30000000\");\n        bigDecimal = bigDecimal.multiply(bigDecimal1);\n        System.out.println(\"bigDecimal:\"+bigDecimal);\n        // 结果：bigDecimal:150000000000000000\n    }\n}\n\n```\n\n> divide(BigDecimal val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式\n\n```java\nimport java.math.BigDecimal;\n\npublic class BigDecimalTest {\n    public static void main(String[] args) {\n        BigDecimal bigDecimal = new BigDecimal(\"50000000\");\n        BigDecimal bigDecimal1 = new BigDecimal(\"30000000\");\n        bigDecimal = bigDecimal.divide(bigDecimal1, BigDecimal.ROUND_HALF_UP);\n        System.out.println(\"bigDecimal:\"+bigDecimal);\n        // 结果：bigDecimal:1.666666666666666666666666666666666666666666666666666666666666666666\n    }\n}\n```\n\n## BigInteger: 适用于任意精度的整数运算\n\n> 1、add(BigInteger val): 两个大浮点数相加\n\n```java\nimport java.math.BigInteger;\n\npublic class BigIntegerTest {\n    public static void main(String[] args) {\n        BigInteger BigInteger = new BigInteger(\"50000000\");\n        BigInteger BigInteger1 = new BigInteger(\"30000000\");\n        BigInteger = BigInteger.add(BigInteger1);\n        System.out.println(\"BigInteger:\"+BigInteger);\n        // 结果：BigInteger:80000000\n    }\n} \n```\n\n> subtract(BigInteger val): 两个大浮点数相减\n\n```java\nimport java.math.BigInteger;\n\npublic class BigIntegerTest {\n    public static void main(String[] args) {\n        BigInteger BigInteger = new BigInteger(\"50000000\");\n        BigInteger BigInteger1 = new BigInteger(\"30000000\");\n        BigInteger = BigInteger.subtract(BigInteger1);\n        System.out.println(\"BigInteger:\"+BigInteger);\n        // 结果：BigInteger:20000000\n    }\n}\n\n```\n\n> multiply(BigInteger val): 两个大浮点数相乘\n\n```java\nimport java.math.BigInteger;\n\npublic class BigIntegerTest {\n    public static void main(String[] args) {\n        BigInteger BigInteger = new BigInteger(\"50000000\");\n        BigInteger BigInteger1 = new BigInteger(\"30000000\");\n        BigInteger = BigInteger.multiply(BigInteger1);\n        System.out.println(\"BigInteger:\"+BigInteger);\n        // 结果：BigInteger:150000000000000000\n    }\n}\n\n```\n\n> divide(BigInteger val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式\n\n```java\nimport java.math.BigInteger;\n\npublic class BigIntegerTest {\n    public static void main(String[] args) {\n        BigInteger BigInteger = new BigInteger(\"50000000\");\n        BigInteger BigInteger1 = new BigInteger(\"30000000\");\n        BigInteger = BigInteger.divide(BigInteger1);\n        System.out.println(\"BigInteger:\"+BigInteger);\n        // 结果：BigInteger:1\n    }\n}\n```","slug":"java中的大数","published":1,"date":"2024-12-28T09:24:56.468Z","updated":"2024-12-25T14:43:38.850Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyumn000448v6dy33e388","content":"<h2 id=\"BigDecimal-适用于任意精度的浮点数运算\"><a href=\"#BigDecimal-适用于任意精度的浮点数运算\" class=\"headerlink\" title=\"BigDecimal 适用于任意精度的浮点数运算\"></a>BigDecimal 适用于任意精度的浮点数运算</h2><blockquote>\n<p>1、add(BigDecimal val): 两个大浮点数相加</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigDecimalTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        bigDecimal = bigDecimal.add(bigDecimal1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bigDecimal:&quot;</span>+bigDecimal);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：bigDecimal:80000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>subtract(BigDecimal val): 两个大浮点数相减</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigDecimalTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        bigDecimal = bigDecimal.subtract(bigDecimal1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bigDecimal:&quot;</span>+bigDecimal);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：bigDecimal:20000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>multiply(BigDecimal val): 两个大浮点数相乘</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigDecimalTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        bigDecimal = bigDecimal.multiply(bigDecimal1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bigDecimal:&quot;</span>+bigDecimal);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：bigDecimal:150000000000000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>divide(BigDecimal val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigDecimalTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        bigDecimal = bigDecimal.divide(bigDecimal1, BigDecimal.ROUND_HALF_UP);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bigDecimal:&quot;</span>+bigDecimal);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：bigDecimal:1.666666666666666666666666666666666666666666666666666666666666666666</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BigInteger-适用于任意精度的整数运算\"><a href=\"#BigInteger-适用于任意精度的整数运算\" class=\"headerlink\" title=\"BigInteger: 适用于任意精度的整数运算\"></a>BigInteger: 适用于任意精度的整数运算</h2><blockquote>\n<p>1、add(BigInteger val): 两个大浮点数相加</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigIntegerTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        BigInteger = BigInteger.add(BigInteger1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BigInteger:&quot;</span>+BigInteger);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：BigInteger:80000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>subtract(BigInteger val): 两个大浮点数相减</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigIntegerTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        BigInteger = BigInteger.subtract(BigInteger1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BigInteger:&quot;</span>+BigInteger);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：BigInteger:20000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>multiply(BigInteger val): 两个大浮点数相乘</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigIntegerTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        BigInteger = BigInteger.multiply(BigInteger1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BigInteger:&quot;</span>+BigInteger);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：BigInteger:150000000000000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>divide(BigInteger val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigIntegerTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        BigInteger = BigInteger.divide(BigInteger1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BigInteger:&quot;</span>+BigInteger);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：BigInteger:1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"BigDecimal-适用于任意精度的浮点数运算\"><a href=\"#BigDecimal-适用于任意精度的浮点数运算\" class=\"headerlink\" title=\"BigDecimal 适用于任意精度的浮点数运算\"></a>BigDecimal 适用于任意精度的浮点数运算</h2><blockquote>\n<p>1、add(BigDecimal val): 两个大浮点数相加</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigDecimalTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        bigDecimal = bigDecimal.add(bigDecimal1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bigDecimal:&quot;</span>+bigDecimal);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：bigDecimal:80000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>subtract(BigDecimal val): 两个大浮点数相减</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigDecimalTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        bigDecimal = bigDecimal.subtract(bigDecimal1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bigDecimal:&quot;</span>+bigDecimal);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：bigDecimal:20000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>multiply(BigDecimal val): 两个大浮点数相乘</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigDecimalTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        bigDecimal = bigDecimal.multiply(bigDecimal1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bigDecimal:&quot;</span>+bigDecimal);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：bigDecimal:150000000000000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>divide(BigDecimal val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigDecimalTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimal1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        bigDecimal = bigDecimal.divide(bigDecimal1, BigDecimal.ROUND_HALF_UP);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;bigDecimal:&quot;</span>+bigDecimal);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：bigDecimal:1.666666666666666666666666666666666666666666666666666666666666666666</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BigInteger-适用于任意精度的整数运算\"><a href=\"#BigInteger-适用于任意精度的整数运算\" class=\"headerlink\" title=\"BigInteger: 适用于任意精度的整数运算\"></a>BigInteger: 适用于任意精度的整数运算</h2><blockquote>\n<p>1、add(BigInteger val): 两个大浮点数相加</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigIntegerTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        BigInteger = BigInteger.add(BigInteger1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BigInteger:&quot;</span>+BigInteger);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：BigInteger:80000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>subtract(BigInteger val): 两个大浮点数相减</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigIntegerTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        BigInteger = BigInteger.subtract(BigInteger1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BigInteger:&quot;</span>+BigInteger);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：BigInteger:20000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>multiply(BigInteger val): 两个大浮点数相乘</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigIntegerTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        BigInteger = BigInteger.multiply(BigInteger1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BigInteger:&quot;</span>+BigInteger);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：BigInteger:150000000000000000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>divide(BigInteger val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BigIntegerTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;50000000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BigInteger</span> <span class=\"variable\">BigInteger1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"string\">&quot;30000000&quot;</span>);</span><br><span class=\"line\">        BigInteger = BigInteger.divide(BigInteger1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;BigInteger:&quot;</span>+BigInteger);</span><br><span class=\"line\">        <span class=\"comment\">// 结果：BigInteger:1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-12-28T09:08:51.253Z","updated":"2024-12-28T09:08:51.253Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyumo000548v65ch47mn0","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"jdk21新特性","_content":"\n## 增强的 switch 表达式\n\n> 描述：switch 现在可以用作表达式，支持返回值，并支持 case 的合并及模式匹配\n\n```java \npublic class Main {\n    public static void main(String[] args) {\n        String day = \"MONDAY\";\n        String result = switch (day) {\n            case \"MONDAY\", \"FRIDAY\" -> \"Workday\";\n            case \"SATURDAY\", \"SUNDAY\" -> \"Weekend\";\n            default -> throw new IllegalArgumentException(\"Unknown day\");\n        };\n        System.out.println(result);  // 输出：Workday\n    }\n}\n```\n\n## 虚拟线程（Virtual Threads）\n\n> 虚拟线程是轻量级线程，由 JDK 管理的，可以创建大量线程而不会产生过多的资源开销\n\n```java\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread.startVirtualThread(() -> {\n            System.out.println(\"Hello from virtual thread\");\n        }).join();\n    }\n}\n```\n\n## 流（Stream API）增强\n\n> 新方法：takeWhile、dropWhile、iterate 流操作新增了 takeWhile 和 dropWhile，用于基于条件筛选流元素，iterate 可以创建无限流\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6);\n        numbers.stream().takeWhile(n -> n < 4).forEach(System.out::println); // 输出 1, 2, 3\n    }\n}\n```\n\n## 集合 API 增强\n\n> List.of、Set.of、Map.of 静态工厂方法 用于创建不可变的集合对象，简化了集合初始化的过程\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        List<String> list = List.of(\"a\", \"b\", \"c\");\n        Set<String> set = Set.of(\"a\", \"b\", \"c\");\n        Map<String, Integer> map = Map.of(\"a\", 1, \"b\", 2);\n    }\n}\n```\n\n> copyOf 方法用于创建现有集合的不可变副本\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        List<String> list = List.of(\"a\", \"b\");\n        List<String> copyList = List.copyOf(list); // 创建不可变副本\n    }\n}\n```\n\n## 新日期和时间 API\n\n> JDK 8 引入了 java.time API，JDK 21 中此 API 经过改进，支持更多的日期和时间操作\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();\n        LocalTime time = LocalTime.now();\n        LocalDateTime dateTime = LocalDateTime.of(date, time);\n    }\n}\n```\n\n> 其他增强特性\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        String json = \"\"\"\n                {\n                    \"name\": \"John\",\n                    \"age\": 30\n                }\n                \"\"\";\n    }\n}\n```\n> Var 局部变量类型推断\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        var list = List.of(\"a\", \"b\", \"c\");\n        for (var item : list) {\n            System.out.println(item);\n        }\n    }\n}\n```","source":"_posts/jdk21新特性.md","raw":"---\ntitle: jdk21新特性\n---\n\n## 增强的 switch 表达式\n\n> 描述：switch 现在可以用作表达式，支持返回值，并支持 case 的合并及模式匹配\n\n```java \npublic class Main {\n    public static void main(String[] args) {\n        String day = \"MONDAY\";\n        String result = switch (day) {\n            case \"MONDAY\", \"FRIDAY\" -> \"Workday\";\n            case \"SATURDAY\", \"SUNDAY\" -> \"Weekend\";\n            default -> throw new IllegalArgumentException(\"Unknown day\");\n        };\n        System.out.println(result);  // 输出：Workday\n    }\n}\n```\n\n## 虚拟线程（Virtual Threads）\n\n> 虚拟线程是轻量级线程，由 JDK 管理的，可以创建大量线程而不会产生过多的资源开销\n\n```java\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Thread.startVirtualThread(() -> {\n            System.out.println(\"Hello from virtual thread\");\n        }).join();\n    }\n}\n```\n\n## 流（Stream API）增强\n\n> 新方法：takeWhile、dropWhile、iterate 流操作新增了 takeWhile 和 dropWhile，用于基于条件筛选流元素，iterate 可以创建无限流\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6);\n        numbers.stream().takeWhile(n -> n < 4).forEach(System.out::println); // 输出 1, 2, 3\n    }\n}\n```\n\n## 集合 API 增强\n\n> List.of、Set.of、Map.of 静态工厂方法 用于创建不可变的集合对象，简化了集合初始化的过程\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        List<String> list = List.of(\"a\", \"b\", \"c\");\n        Set<String> set = Set.of(\"a\", \"b\", \"c\");\n        Map<String, Integer> map = Map.of(\"a\", 1, \"b\", 2);\n    }\n}\n```\n\n> copyOf 方法用于创建现有集合的不可变副本\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        List<String> list = List.of(\"a\", \"b\");\n        List<String> copyList = List.copyOf(list); // 创建不可变副本\n    }\n}\n```\n\n## 新日期和时间 API\n\n> JDK 8 引入了 java.time API，JDK 21 中此 API 经过改进，支持更多的日期和时间操作\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate date = LocalDate.now();\n        LocalTime time = LocalTime.now();\n        LocalDateTime dateTime = LocalDateTime.of(date, time);\n    }\n}\n```\n\n> 其他增强特性\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        String json = \"\"\"\n                {\n                    \"name\": \"John\",\n                    \"age\": 30\n                }\n                \"\"\";\n    }\n}\n```\n> Var 局部变量类型推断\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        var list = List.of(\"a\", \"b\", \"c\");\n        for (var item : list) {\n            System.out.println(item);\n        }\n    }\n}\n```","slug":"jdk21新特性","published":1,"date":"2024-12-28T09:24:56.471Z","updated":"2024-12-15T05:16:10.256Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyumo000648v601ic19ko","content":"<h2 id=\"增强的-switch-表达式\"><a href=\"#增强的-switch-表达式\" class=\"headerlink\" title=\"增强的 switch 表达式\"></a>增强的 switch 表达式</h2><blockquote>\n<p>描述：switch 现在可以用作表达式，支持返回值，并支持 case 的合并及模式匹配</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">day</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;MONDAY&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (day) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;MONDAY&quot;</span>, <span class=\"string\">&quot;FRIDAY&quot;</span> -&gt; <span class=\"string\">&quot;Workday&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;SATURDAY&quot;</span>, <span class=\"string\">&quot;SUNDAY&quot;</span> -&gt; <span class=\"string\">&quot;Weekend&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> -&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Unknown day&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(result);  <span class=\"comment\">// 输出：Workday</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟线程（Virtual-Threads）\"><a href=\"#虚拟线程（Virtual-Threads）\" class=\"headerlink\" title=\"虚拟线程（Virtual Threads）\"></a>虚拟线程（Virtual Threads）</h2><blockquote>\n<p>虚拟线程是轻量级线程，由 JDK 管理的，可以创建大量线程而不会产生过多的资源开销</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.startVirtualThread(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Hello from virtual thread&quot;</span>);</span><br><span class=\"line\">        &#125;).join();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"流（Stream-API）增强\"><a href=\"#流（Stream-API）增强\" class=\"headerlink\" title=\"流（Stream API）增强\"></a>流（Stream API）增强</h2><blockquote>\n<p>新方法：takeWhile、dropWhile、iterate 流操作新增了 takeWhile 和 dropWhile，用于基于条件筛选流元素，iterate 可以创建无限流</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; numbers = List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">        numbers.stream().takeWhile(n -&gt; n &lt; <span class=\"number\">4</span>).forEach(System.out::println); <span class=\"comment\">// 输出 1, 2, 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集合-API-增强\"><a href=\"#集合-API-增强\" class=\"headerlink\" title=\"集合 API 增强\"></a>集合 API 增强</h2><blockquote>\n<p>List.of、Set.of、Map.of 静态工厂方法 用于创建不可变的集合对象，简化了集合初始化的过程</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = List.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        Set&lt;String&gt; set = Set.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        Map&lt;String, Integer&gt; map = Map.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>copyOf 方法用于创建现有集合的不可变副本</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = List.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        List&lt;String&gt; copyList = List.copyOf(list); <span class=\"comment\">// 创建不可变副本</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新日期和时间-API\"><a href=\"#新日期和时间-API\" class=\"headerlink\" title=\"新日期和时间 API\"></a>新日期和时间 API</h2><blockquote>\n<p>JDK 8 引入了 java.time API，JDK 21 中此 API 经过改进，支持更多的日期和时间操作</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalDate</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> LocalDate.now();</span><br><span class=\"line\">        <span class=\"type\">LocalTime</span> <span class=\"variable\">time</span> <span class=\"operator\">=</span> LocalTime.now();</span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">dateTime</span> <span class=\"operator\">=</span> LocalDateTime.of(date, time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其他增强特性</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;name&quot;: &quot;John&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;age&quot;: 30</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Var 局部变量类型推断</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> List.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item : list) &#123;</span><br><span class=\"line\">            System.out.println(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"增强的-switch-表达式\"><a href=\"#增强的-switch-表达式\" class=\"headerlink\" title=\"增强的 switch 表达式\"></a>增强的 switch 表达式</h2><blockquote>\n<p>描述：switch 现在可以用作表达式，支持返回值，并支持 case 的合并及模式匹配</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">day</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;MONDAY&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">switch</span> (day) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;MONDAY&quot;</span>, <span class=\"string\">&quot;FRIDAY&quot;</span> -&gt; <span class=\"string\">&quot;Workday&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;SATURDAY&quot;</span>, <span class=\"string\">&quot;SUNDAY&quot;</span> -&gt; <span class=\"string\">&quot;Weekend&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> -&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Unknown day&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(result);  <span class=\"comment\">// 输出：Workday</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟线程（Virtual-Threads）\"><a href=\"#虚拟线程（Virtual-Threads）\" class=\"headerlink\" title=\"虚拟线程（Virtual Threads）\"></a>虚拟线程（Virtual Threads）</h2><blockquote>\n<p>虚拟线程是轻量级线程，由 JDK 管理的，可以创建大量线程而不会产生过多的资源开销</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.startVirtualThread(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Hello from virtual thread&quot;</span>);</span><br><span class=\"line\">        &#125;).join();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"流（Stream-API）增强\"><a href=\"#流（Stream-API）增强\" class=\"headerlink\" title=\"流（Stream API）增强\"></a>流（Stream API）增强</h2><blockquote>\n<p>新方法：takeWhile、dropWhile、iterate 流操作新增了 takeWhile 和 dropWhile，用于基于条件筛选流元素，iterate 可以创建无限流</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; numbers = List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">        numbers.stream().takeWhile(n -&gt; n &lt; <span class=\"number\">4</span>).forEach(System.out::println); <span class=\"comment\">// 输出 1, 2, 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集合-API-增强\"><a href=\"#集合-API-增强\" class=\"headerlink\" title=\"集合 API 增强\"></a>集合 API 增强</h2><blockquote>\n<p>List.of、Set.of、Map.of 静态工厂方法 用于创建不可变的集合对象，简化了集合初始化的过程</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = List.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        Set&lt;String&gt; set = Set.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        Map&lt;String, Integer&gt; map = Map.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>copyOf 方法用于创建现有集合的不可变副本</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = List.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">        List&lt;String&gt; copyList = List.copyOf(list); <span class=\"comment\">// 创建不可变副本</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新日期和时间-API\"><a href=\"#新日期和时间-API\" class=\"headerlink\" title=\"新日期和时间 API\"></a>新日期和时间 API</h2><blockquote>\n<p>JDK 8 引入了 java.time API，JDK 21 中此 API 经过改进，支持更多的日期和时间操作</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LocalDate</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> LocalDate.now();</span><br><span class=\"line\">        <span class=\"type\">LocalTime</span> <span class=\"variable\">time</span> <span class=\"operator\">=</span> LocalTime.now();</span><br><span class=\"line\">        <span class=\"type\">LocalDateTime</span> <span class=\"variable\">dateTime</span> <span class=\"operator\">=</span> LocalDateTime.of(date, time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其他增强特性</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">json</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;name&quot;: &quot;John&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    &quot;age&quot;: 30</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Var 局部变量类型推断</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">var</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> List.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item : list) &#123;</span><br><span class=\"line\">            System.out.println(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"typeScript命令行运行","_content":"\n```shell\ntsc xxx.ts //执行该ts文件生成.js文件\nnode xxx.js //运行js文件输出结果\n```","source":"_posts/typeScript命令行运行.md","raw":"---\ntitle: typeScript命令行运行\n---\n\n```shell\ntsc xxx.ts //执行该ts文件生成.js文件\nnode xxx.js //运行js文件输出结果\n```","slug":"typeScript命令行运行","published":1,"date":"2024-12-28T09:24:56.473Z","updated":"2024-12-15T05:16:10.256Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyumo000748v67uge4naf","content":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc xxx.ts //执行该ts文件生成.js文件</span><br><span class=\"line\">node xxx.js //运行js文件输出结果</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc xxx.ts //执行该ts文件生成.js文件</span><br><span class=\"line\">node xxx.js //运行js文件输出结果</span><br></pre></td></tr></table></figure>"},{"title":"技术松鼠症","_content":"\n> “技术松鼠症”是一个非正式的术语，用来形容一种在技术领域常见的行为模式：不断收集和囤积技术知识、工具或资源，但很少实际应用或深入学习。这种行为类似于松鼠囤积食物的习惯，因此被称为“技术松鼠症”,这种行为在程序员、开发者和技术爱好者中较为常见。\n\n---\n\n### **主要特征**\n1. **囤积资源**：\n    - 收集大量教程、电子书、视频课程或工具，但很少真正使用。\n    - 订阅多个技术博客、新闻源或社区，但很少深入阅读或参与讨论。\n\n2. **浅尝辄止**：\n    - 对新技术充满兴趣，但只停留在表面了解，缺乏深入学习。\n    - 频繁切换学习方向，无法专注于某一领域。\n\n3. **拖延实践**：\n    - 总是计划“等准备好了再开始”，但迟迟不付诸行动。\n    - 害怕失败或不确定如何开始，导致学习成果无法转化为实际能力。\n\n4. **焦虑与满足感错位**：\n    - 通过收集资源获得短暂的满足感，但长期来看会因缺乏实际进展而感到焦虑。\n    - 容易陷入“信息过载”，感到无所适从。\n\n---\n\n### **产生原因**\n1. **信息爆炸**：\n    - 互联网时代，技术资源唾手可得，导致人们容易陷入“收集癖”。\n    - 互联网上技术资源泛滥，容易让人陷入“选择困难”。\n2. **完美主义**：\n    - 总想找到“最好的资源”或“最完美的学习路径”，导致行动拖延。\n    - 总想“学完所有知识再开始”，导致拖延。\n3. **恐惧落后**：\n    - 技术更新速度快，害怕错过新技术，导致盲目跟风。\n    - 害怕在实践中犯错，选择停留在理论学习阶段。\n4. **缺乏目标**：\n    - 没有明确的学习目标或职业规划，导致学习方向分散。\n5. **即时满足**：\n    - 收集资源比实践更容易获得即时满足感。\n\n---\n\n### **如何克服技术松鼠症**\n1. **设定明确目标**：\n    - 确定短期和长期目标，例如“掌握Java核心知识”或“完成一个完整的项目”。\n    - 将目标分解为可执行的小任务。\n    - 确定学习的具体目标（如“掌握Spring Boot并完成一个项目”），避免盲目学习。\n\n2. **聚焦核心技能**：\n    - 选择1-2个关键技术领域深入学习，而不是盲目追求广度。\n    - 例如，专注于Java开发或前端开发，而不是同时学习多种语言。\n\n3. **实践驱动学习**：\n    - 通过项目实践巩固知识，例如开发一个博客系统或参与开源项目。\n    - 实践是检验学习成果的最佳方式。\n    - 学完一个知识点后，立即动手实践，哪怕是一个小项目。\n\n4. **限制资源收集**：\n    - 选择1-2个高质量的学习资源，坚持学完后再寻找新的资源。\n    - 避免同时打开多个教程或课程。\n    - 选择1-2个高质量的学习资源，坚持学完，而不是不断寻找新资源。\n5. **分解任务**：\n    - 将大目标拆解为小任务，逐步完成，避免 overwhelmed（感到不堪重负）。\n\n6. **建立学习习惯**：\n    - 每天固定时间学习，例如早上1小时或晚上2小时。\n    - 使用番茄工作法（25分钟学习+5分钟休息）提高专注力。\n\n7. **定期复盘**：\n    - 每周或每月回顾学习进展，调整学习计划。\n    - 记录已完成的任务和学到的知识，增强成就感。\n\n8. **接受不完美**：\n    - 允许自己在实践中犯错，从错误中学习。\n\n---\n\n### **总结**\n技术松鼠症是一种常见的学习误区，表现为过度收集资源而缺乏实际行动。通过设定目标、聚焦核心技能、实践驱动学习和建立良好习惯，可以有效克服这一问题，将囤积的知识转化为实际能力。记住：**学习的价值不在于你收集了多少资源，而在于你掌握了多少技能**。\n","source":"_posts/技术松鼠症.md","raw":"---\ntitle: 技术松鼠症\n---\n\n> “技术松鼠症”是一个非正式的术语，用来形容一种在技术领域常见的行为模式：不断收集和囤积技术知识、工具或资源，但很少实际应用或深入学习。这种行为类似于松鼠囤积食物的习惯，因此被称为“技术松鼠症”,这种行为在程序员、开发者和技术爱好者中较为常见。\n\n---\n\n### **主要特征**\n1. **囤积资源**：\n    - 收集大量教程、电子书、视频课程或工具，但很少真正使用。\n    - 订阅多个技术博客、新闻源或社区，但很少深入阅读或参与讨论。\n\n2. **浅尝辄止**：\n    - 对新技术充满兴趣，但只停留在表面了解，缺乏深入学习。\n    - 频繁切换学习方向，无法专注于某一领域。\n\n3. **拖延实践**：\n    - 总是计划“等准备好了再开始”，但迟迟不付诸行动。\n    - 害怕失败或不确定如何开始，导致学习成果无法转化为实际能力。\n\n4. **焦虑与满足感错位**：\n    - 通过收集资源获得短暂的满足感，但长期来看会因缺乏实际进展而感到焦虑。\n    - 容易陷入“信息过载”，感到无所适从。\n\n---\n\n### **产生原因**\n1. **信息爆炸**：\n    - 互联网时代，技术资源唾手可得，导致人们容易陷入“收集癖”。\n    - 互联网上技术资源泛滥，容易让人陷入“选择困难”。\n2. **完美主义**：\n    - 总想找到“最好的资源”或“最完美的学习路径”，导致行动拖延。\n    - 总想“学完所有知识再开始”，导致拖延。\n3. **恐惧落后**：\n    - 技术更新速度快，害怕错过新技术，导致盲目跟风。\n    - 害怕在实践中犯错，选择停留在理论学习阶段。\n4. **缺乏目标**：\n    - 没有明确的学习目标或职业规划，导致学习方向分散。\n5. **即时满足**：\n    - 收集资源比实践更容易获得即时满足感。\n\n---\n\n### **如何克服技术松鼠症**\n1. **设定明确目标**：\n    - 确定短期和长期目标，例如“掌握Java核心知识”或“完成一个完整的项目”。\n    - 将目标分解为可执行的小任务。\n    - 确定学习的具体目标（如“掌握Spring Boot并完成一个项目”），避免盲目学习。\n\n2. **聚焦核心技能**：\n    - 选择1-2个关键技术领域深入学习，而不是盲目追求广度。\n    - 例如，专注于Java开发或前端开发，而不是同时学习多种语言。\n\n3. **实践驱动学习**：\n    - 通过项目实践巩固知识，例如开发一个博客系统或参与开源项目。\n    - 实践是检验学习成果的最佳方式。\n    - 学完一个知识点后，立即动手实践，哪怕是一个小项目。\n\n4. **限制资源收集**：\n    - 选择1-2个高质量的学习资源，坚持学完后再寻找新的资源。\n    - 避免同时打开多个教程或课程。\n    - 选择1-2个高质量的学习资源，坚持学完，而不是不断寻找新资源。\n5. **分解任务**：\n    - 将大目标拆解为小任务，逐步完成，避免 overwhelmed（感到不堪重负）。\n\n6. **建立学习习惯**：\n    - 每天固定时间学习，例如早上1小时或晚上2小时。\n    - 使用番茄工作法（25分钟学习+5分钟休息）提高专注力。\n\n7. **定期复盘**：\n    - 每周或每月回顾学习进展，调整学习计划。\n    - 记录已完成的任务和学到的知识，增强成就感。\n\n8. **接受不完美**：\n    - 允许自己在实践中犯错，从错误中学习。\n\n---\n\n### **总结**\n技术松鼠症是一种常见的学习误区，表现为过度收集资源而缺乏实际行动。通过设定目标、聚焦核心技能、实践驱动学习和建立良好习惯，可以有效克服这一问题，将囤积的知识转化为实际能力。记住：**学习的价值不在于你收集了多少资源，而在于你掌握了多少技能**。\n","slug":"技术松鼠症","published":1,"date":"2025-02-15T12:07:40.555Z","updated":"2025-02-15T13:49:45.490Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyump000848v6a5ab8gvo","content":"<blockquote>\n<p>“技术松鼠症”是一个非正式的术语，用来形容一种在技术领域常见的行为模式：不断收集和囤积技术知识、工具或资源，但很少实际应用或深入学习。这种行为类似于松鼠囤积食物的习惯，因此被称为“技术松鼠症”,这种行为在程序员、开发者和技术爱好者中较为常见。</p>\n</blockquote>\n<hr>\n<h3 id=\"主要特征\"><a href=\"#主要特征\" class=\"headerlink\" title=\"主要特征\"></a><strong>主要特征</strong></h3><ol>\n<li><p><strong>囤积资源</strong>：</p>\n<ul>\n<li>收集大量教程、电子书、视频课程或工具，但很少真正使用。</li>\n<li>订阅多个技术博客、新闻源或社区，但很少深入阅读或参与讨论。</li>\n</ul>\n</li>\n<li><p><strong>浅尝辄止</strong>：</p>\n<ul>\n<li>对新技术充满兴趣，但只停留在表面了解，缺乏深入学习。</li>\n<li>频繁切换学习方向，无法专注于某一领域。</li>\n</ul>\n</li>\n<li><p><strong>拖延实践</strong>：</p>\n<ul>\n<li>总是计划“等准备好了再开始”，但迟迟不付诸行动。</li>\n<li>害怕失败或不确定如何开始，导致学习成果无法转化为实际能力。</li>\n</ul>\n</li>\n<li><p><strong>焦虑与满足感错位</strong>：</p>\n<ul>\n<li>通过收集资源获得短暂的满足感，但长期来看会因缺乏实际进展而感到焦虑。</li>\n<li>容易陷入“信息过载”，感到无所适从。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a><strong>产生原因</strong></h3><ol>\n<li><strong>信息爆炸</strong>：<ul>\n<li>互联网时代，技术资源唾手可得，导致人们容易陷入“收集癖”。</li>\n<li>互联网上技术资源泛滥，容易让人陷入“选择困难”。</li>\n</ul>\n</li>\n<li><strong>完美主义</strong>：<ul>\n<li>总想找到“最好的资源”或“最完美的学习路径”，导致行动拖延。</li>\n<li>总想“学完所有知识再开始”，导致拖延。</li>\n</ul>\n</li>\n<li><strong>恐惧落后</strong>：<ul>\n<li>技术更新速度快，害怕错过新技术，导致盲目跟风。</li>\n<li>害怕在实践中犯错，选择停留在理论学习阶段。</li>\n</ul>\n</li>\n<li><strong>缺乏目标</strong>：<ul>\n<li>没有明确的学习目标或职业规划，导致学习方向分散。</li>\n</ul>\n</li>\n<li><strong>即时满足</strong>：<ul>\n<li>收集资源比实践更容易获得即时满足感。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"如何克服技术松鼠症\"><a href=\"#如何克服技术松鼠症\" class=\"headerlink\" title=\"如何克服技术松鼠症\"></a><strong>如何克服技术松鼠症</strong></h3><ol>\n<li><p><strong>设定明确目标</strong>：</p>\n<ul>\n<li>确定短期和长期目标，例如“掌握Java核心知识”或“完成一个完整的项目”。</li>\n<li>将目标分解为可执行的小任务。</li>\n<li>确定学习的具体目标（如“掌握Spring Boot并完成一个项目”），避免盲目学习。</li>\n</ul>\n</li>\n<li><p><strong>聚焦核心技能</strong>：</p>\n<ul>\n<li>选择1-2个关键技术领域深入学习，而不是盲目追求广度。</li>\n<li>例如，专注于Java开发或前端开发，而不是同时学习多种语言。</li>\n</ul>\n</li>\n<li><p><strong>实践驱动学习</strong>：</p>\n<ul>\n<li>通过项目实践巩固知识，例如开发一个博客系统或参与开源项目。</li>\n<li>实践是检验学习成果的最佳方式。</li>\n<li>学完一个知识点后，立即动手实践，哪怕是一个小项目。</li>\n</ul>\n</li>\n<li><p><strong>限制资源收集</strong>：</p>\n<ul>\n<li>选择1-2个高质量的学习资源，坚持学完后再寻找新的资源。</li>\n<li>避免同时打开多个教程或课程。</li>\n<li>选择1-2个高质量的学习资源，坚持学完，而不是不断寻找新资源。</li>\n</ul>\n</li>\n<li><p><strong>分解任务</strong>：</p>\n<ul>\n<li>将大目标拆解为小任务，逐步完成，避免 overwhelmed（感到不堪重负）。</li>\n</ul>\n</li>\n<li><p><strong>建立学习习惯</strong>：</p>\n<ul>\n<li>每天固定时间学习，例如早上1小时或晚上2小时。</li>\n<li>使用番茄工作法（25分钟学习+5分钟休息）提高专注力。</li>\n</ul>\n</li>\n<li><p><strong>定期复盘</strong>：</p>\n<ul>\n<li>每周或每月回顾学习进展，调整学习计划。</li>\n<li>记录已完成的任务和学到的知识，增强成就感。</li>\n</ul>\n</li>\n<li><p><strong>接受不完美</strong>：</p>\n<ul>\n<li>允许自己在实践中犯错，从错误中学习。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><p>技术松鼠症是一种常见的学习误区，表现为过度收集资源而缺乏实际行动。通过设定目标、聚焦核心技能、实践驱动学习和建立良好习惯，可以有效克服这一问题，将囤积的知识转化为实际能力。记住：<strong>学习的价值不在于你收集了多少资源，而在于你掌握了多少技能</strong>。</p>\n","excerpt":"","more":"<blockquote>\n<p>“技术松鼠症”是一个非正式的术语，用来形容一种在技术领域常见的行为模式：不断收集和囤积技术知识、工具或资源，但很少实际应用或深入学习。这种行为类似于松鼠囤积食物的习惯，因此被称为“技术松鼠症”,这种行为在程序员、开发者和技术爱好者中较为常见。</p>\n</blockquote>\n<hr>\n<h3 id=\"主要特征\"><a href=\"#主要特征\" class=\"headerlink\" title=\"主要特征\"></a><strong>主要特征</strong></h3><ol>\n<li><p><strong>囤积资源</strong>：</p>\n<ul>\n<li>收集大量教程、电子书、视频课程或工具，但很少真正使用。</li>\n<li>订阅多个技术博客、新闻源或社区，但很少深入阅读或参与讨论。</li>\n</ul>\n</li>\n<li><p><strong>浅尝辄止</strong>：</p>\n<ul>\n<li>对新技术充满兴趣，但只停留在表面了解，缺乏深入学习。</li>\n<li>频繁切换学习方向，无法专注于某一领域。</li>\n</ul>\n</li>\n<li><p><strong>拖延实践</strong>：</p>\n<ul>\n<li>总是计划“等准备好了再开始”，但迟迟不付诸行动。</li>\n<li>害怕失败或不确定如何开始，导致学习成果无法转化为实际能力。</li>\n</ul>\n</li>\n<li><p><strong>焦虑与满足感错位</strong>：</p>\n<ul>\n<li>通过收集资源获得短暂的满足感，但长期来看会因缺乏实际进展而感到焦虑。</li>\n<li>容易陷入“信息过载”，感到无所适从。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a><strong>产生原因</strong></h3><ol>\n<li><strong>信息爆炸</strong>：<ul>\n<li>互联网时代，技术资源唾手可得，导致人们容易陷入“收集癖”。</li>\n<li>互联网上技术资源泛滥，容易让人陷入“选择困难”。</li>\n</ul>\n</li>\n<li><strong>完美主义</strong>：<ul>\n<li>总想找到“最好的资源”或“最完美的学习路径”，导致行动拖延。</li>\n<li>总想“学完所有知识再开始”，导致拖延。</li>\n</ul>\n</li>\n<li><strong>恐惧落后</strong>：<ul>\n<li>技术更新速度快，害怕错过新技术，导致盲目跟风。</li>\n<li>害怕在实践中犯错，选择停留在理论学习阶段。</li>\n</ul>\n</li>\n<li><strong>缺乏目标</strong>：<ul>\n<li>没有明确的学习目标或职业规划，导致学习方向分散。</li>\n</ul>\n</li>\n<li><strong>即时满足</strong>：<ul>\n<li>收集资源比实践更容易获得即时满足感。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"如何克服技术松鼠症\"><a href=\"#如何克服技术松鼠症\" class=\"headerlink\" title=\"如何克服技术松鼠症\"></a><strong>如何克服技术松鼠症</strong></h3><ol>\n<li><p><strong>设定明确目标</strong>：</p>\n<ul>\n<li>确定短期和长期目标，例如“掌握Java核心知识”或“完成一个完整的项目”。</li>\n<li>将目标分解为可执行的小任务。</li>\n<li>确定学习的具体目标（如“掌握Spring Boot并完成一个项目”），避免盲目学习。</li>\n</ul>\n</li>\n<li><p><strong>聚焦核心技能</strong>：</p>\n<ul>\n<li>选择1-2个关键技术领域深入学习，而不是盲目追求广度。</li>\n<li>例如，专注于Java开发或前端开发，而不是同时学习多种语言。</li>\n</ul>\n</li>\n<li><p><strong>实践驱动学习</strong>：</p>\n<ul>\n<li>通过项目实践巩固知识，例如开发一个博客系统或参与开源项目。</li>\n<li>实践是检验学习成果的最佳方式。</li>\n<li>学完一个知识点后，立即动手实践，哪怕是一个小项目。</li>\n</ul>\n</li>\n<li><p><strong>限制资源收集</strong>：</p>\n<ul>\n<li>选择1-2个高质量的学习资源，坚持学完后再寻找新的资源。</li>\n<li>避免同时打开多个教程或课程。</li>\n<li>选择1-2个高质量的学习资源，坚持学完，而不是不断寻找新资源。</li>\n</ul>\n</li>\n<li><p><strong>分解任务</strong>：</p>\n<ul>\n<li>将大目标拆解为小任务，逐步完成，避免 overwhelmed（感到不堪重负）。</li>\n</ul>\n</li>\n<li><p><strong>建立学习习惯</strong>：</p>\n<ul>\n<li>每天固定时间学习，例如早上1小时或晚上2小时。</li>\n<li>使用番茄工作法（25分钟学习+5分钟休息）提高专注力。</li>\n</ul>\n</li>\n<li><p><strong>定期复盘</strong>：</p>\n<ul>\n<li>每周或每月回顾学习进展，调整学习计划。</li>\n<li>记录已完成的任务和学到的知识，增强成就感。</li>\n</ul>\n</li>\n<li><p><strong>接受不完美</strong>：</p>\n<ul>\n<li>允许自己在实践中犯错，从错误中学习。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h3><p>技术松鼠症是一种常见的学习误区，表现为过度收集资源而缺乏实际行动。通过设定目标、聚焦核心技能、实践驱动学习和建立良好习惯，可以有效克服这一问题，将囤积的知识转化为实际能力。记住：<strong>学习的价值不在于你收集了多少资源，而在于你掌握了多少技能</strong>。</p>\n"},{"title":"如何判断自己不适合做一名软件开发工程师","_content":"\n判断自己是否适合从事软件开发工作，需要结合个人特质、职业兴趣和实际工作体验综合评估。以下是一些关键判断标准及对应的思考方向：\n\n---\n\n### **一、核心能力匹配度**\n1. **持续学习意愿薄弱**\n  - 表现：对新技术（如AI编程工具、云原生技术）缺乏好奇心，学习文档时感到枯燥。\n  - 案例：面对Java 17新特性（如Record类）时，宁愿复制旧代码也不愿尝试改进。\n  - 数据：2023年Stack Overflow调查显示，83%的开发者每周至少投入5小时学习新技术。\n\n2. **逻辑思维能力欠缺**\n  - 表现：调试代码时无法定位问题根源，面对LeetCode中等难度题（如二叉树遍历）需要超过2小时。\n  - 测试：尝试完成「合并两个有序链表」算法题，若无法在30分钟内写出非递归解法需警惕。\n\n3. **抽象建模能力不足**\n  - 表现：难以将业务需求转化为类图设计，例如设计电商订单系统时无法抽象出订单、库存、支付等核心领域模型。\n\n---\n\n### **二、工作体验反馈**\n1. **代码编写痛苦指数**\n  - 现象：每次编写超过50行代码就感到焦躁，IDE报错提示引发情绪抵触。\n  - 对比：资深开发者面对报错时会产生\"解谜\"兴趣，而非挫败感。\n\n2. **成就感缺失周期**\n  - 指标：连续3个月未因解决技术问题（如优化接口响应时间）产生愉悦感。\n  - 案例：完成微服务改造后，对吞吐量提升50%的成果无感。\n\n3. **职业倦怠强度**\n  - 表现：看到技术大会通知第一反应是排斥，而非期待学习新知识。\n  - 数据：GitHub年度活跃度下降超过60%（个人账号提交记录对比）。\n\n---\n\n### **三、生理心理信号**\n1. **持续身体排斥反应**\n  - 症状：长时间面对屏幕后出现偏头痛、视力模糊等生理不适，且调整工作环境后无改善。\n  - 医学数据：约5%人群存在「屏幕不适综合征」，可能不适合长期编程工作。\n\n2. **思维模式冲突**\n  - 表现：更享受与人直接互动（如销售洽谈），而非通过代码间接解决问题。\n  - 职业倾向测试：MBTI中「E型人格」（外向型）在开发岗位占比仅28%（来源：2023年LinkedIn数据）。\n\n3. **时间感知扭曲**\n  - 现象：预估开发任务耗时偏差率持续>50%（如预估3天实际需1周），显示缺乏工程化思维。\n\n---\n\n### **四、转型建议路径**\n若符合≥3项上述特征，可考虑以下发展方向：\n| **适合方向**       | **能力迁移点**                          | **典型案例**                     |\n|--------------------|---------------------------------------|----------------------------------|\n| 技术产品经理       | 需求分析能力+技术理解力                | 从开发转岗钉钉产品经理           |\n| 质量保障工程师     | 逻辑思维+测试用例设计                  | 转型为自动化测试专家             |\n| 技术布道师         | 技术热情+沟通表达能力                  | 阿里云MVP技术推广                |\n| 项目管理           | 工程理解力+协调能力                    | 成为PMP认证项目经理              |\n| 技术写作           | 文档解读能力+文字表达                  | 撰写Spring官方文档               |\n\n---\n\n### **五、自我验证方法**\n1. **3个月刻意训练实验**\n  - 目标：每天投入2小时系统学习（如完成《Effective Java》精读）\n  - 验证：若无法坚持21天，说明缺乏基础驱动力\n\n2. **开源贡献体验**\n  - 任务：为Apache Commons项目修复1个简单issue\n  - 观察：代码审查过程是否引发持续焦虑\n\n3. **黑客马拉松挑战**\n  - 参与：48小时开发一个具备核心功能的DEMO\n  - 评估：过程中是享受创造还是煎熬\n\n---\n\n### **六、关键认知**\n1. **适不适合≠能力高低**：许多初期困难可通过训练改善（如设计模式应用）\n2. **职业光谱理论**：技术岗位包含开发、架构、管理等多维度，可寻找适配角色\n3. **兴趣培养周期**：对技术的兴趣常随能力提升而增长，建议至少坚持2年再评估\n\n若经过系统尝试仍存在强烈不适感，及时转型反而是明智选择。软件开发只是万千职业中的一种，找到与个人特质匹配的领域才能实现价值最大化。","source":"_posts/如何判断自己不适合做一名软件开发工程师.md","raw":"---\ntitle: 如何判断自己不适合做一名软件开发工程师\n---\n\n判断自己是否适合从事软件开发工作，需要结合个人特质、职业兴趣和实际工作体验综合评估。以下是一些关键判断标准及对应的思考方向：\n\n---\n\n### **一、核心能力匹配度**\n1. **持续学习意愿薄弱**\n  - 表现：对新技术（如AI编程工具、云原生技术）缺乏好奇心，学习文档时感到枯燥。\n  - 案例：面对Java 17新特性（如Record类）时，宁愿复制旧代码也不愿尝试改进。\n  - 数据：2023年Stack Overflow调查显示，83%的开发者每周至少投入5小时学习新技术。\n\n2. **逻辑思维能力欠缺**\n  - 表现：调试代码时无法定位问题根源，面对LeetCode中等难度题（如二叉树遍历）需要超过2小时。\n  - 测试：尝试完成「合并两个有序链表」算法题，若无法在30分钟内写出非递归解法需警惕。\n\n3. **抽象建模能力不足**\n  - 表现：难以将业务需求转化为类图设计，例如设计电商订单系统时无法抽象出订单、库存、支付等核心领域模型。\n\n---\n\n### **二、工作体验反馈**\n1. **代码编写痛苦指数**\n  - 现象：每次编写超过50行代码就感到焦躁，IDE报错提示引发情绪抵触。\n  - 对比：资深开发者面对报错时会产生\"解谜\"兴趣，而非挫败感。\n\n2. **成就感缺失周期**\n  - 指标：连续3个月未因解决技术问题（如优化接口响应时间）产生愉悦感。\n  - 案例：完成微服务改造后，对吞吐量提升50%的成果无感。\n\n3. **职业倦怠强度**\n  - 表现：看到技术大会通知第一反应是排斥，而非期待学习新知识。\n  - 数据：GitHub年度活跃度下降超过60%（个人账号提交记录对比）。\n\n---\n\n### **三、生理心理信号**\n1. **持续身体排斥反应**\n  - 症状：长时间面对屏幕后出现偏头痛、视力模糊等生理不适，且调整工作环境后无改善。\n  - 医学数据：约5%人群存在「屏幕不适综合征」，可能不适合长期编程工作。\n\n2. **思维模式冲突**\n  - 表现：更享受与人直接互动（如销售洽谈），而非通过代码间接解决问题。\n  - 职业倾向测试：MBTI中「E型人格」（外向型）在开发岗位占比仅28%（来源：2023年LinkedIn数据）。\n\n3. **时间感知扭曲**\n  - 现象：预估开发任务耗时偏差率持续>50%（如预估3天实际需1周），显示缺乏工程化思维。\n\n---\n\n### **四、转型建议路径**\n若符合≥3项上述特征，可考虑以下发展方向：\n| **适合方向**       | **能力迁移点**                          | **典型案例**                     |\n|--------------------|---------------------------------------|----------------------------------|\n| 技术产品经理       | 需求分析能力+技术理解力                | 从开发转岗钉钉产品经理           |\n| 质量保障工程师     | 逻辑思维+测试用例设计                  | 转型为自动化测试专家             |\n| 技术布道师         | 技术热情+沟通表达能力                  | 阿里云MVP技术推广                |\n| 项目管理           | 工程理解力+协调能力                    | 成为PMP认证项目经理              |\n| 技术写作           | 文档解读能力+文字表达                  | 撰写Spring官方文档               |\n\n---\n\n### **五、自我验证方法**\n1. **3个月刻意训练实验**\n  - 目标：每天投入2小时系统学习（如完成《Effective Java》精读）\n  - 验证：若无法坚持21天，说明缺乏基础驱动力\n\n2. **开源贡献体验**\n  - 任务：为Apache Commons项目修复1个简单issue\n  - 观察：代码审查过程是否引发持续焦虑\n\n3. **黑客马拉松挑战**\n  - 参与：48小时开发一个具备核心功能的DEMO\n  - 评估：过程中是享受创造还是煎熬\n\n---\n\n### **六、关键认知**\n1. **适不适合≠能力高低**：许多初期困难可通过训练改善（如设计模式应用）\n2. **职业光谱理论**：技术岗位包含开发、架构、管理等多维度，可寻找适配角色\n3. **兴趣培养周期**：对技术的兴趣常随能力提升而增长，建议至少坚持2年再评估\n\n若经过系统尝试仍存在强烈不适感，及时转型反而是明智选择。软件开发只是万千职业中的一种，找到与个人特质匹配的领域才能实现价值最大化。","slug":"如何判断自己不适合做一名软件开发工程师","published":1,"date":"2025-02-16T06:40:37.684Z","updated":"2025-02-16T06:41:49.107Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyump000948v6a45h2xg4","content":"<p>判断自己是否适合从事软件开发工作，需要结合个人特质、职业兴趣和实际工作体验综合评估。以下是一些关键判断标准及对应的思考方向：</p>\n<hr>\n<h3 id=\"一、核心能力匹配度\"><a href=\"#一、核心能力匹配度\" class=\"headerlink\" title=\"一、核心能力匹配度\"></a><strong>一、核心能力匹配度</strong></h3><ol>\n<li><strong>持续学习意愿薄弱</strong></li>\n</ol>\n<ul>\n<li>表现：对新技术（如AI编程工具、云原生技术）缺乏好奇心，学习文档时感到枯燥。</li>\n<li>案例：面对Java 17新特性（如Record类）时，宁愿复制旧代码也不愿尝试改进。</li>\n<li>数据：2023年Stack Overflow调查显示，83%的开发者每周至少投入5小时学习新技术。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>逻辑思维能力欠缺</strong></li>\n</ol>\n<ul>\n<li>表现：调试代码时无法定位问题根源，面对LeetCode中等难度题（如二叉树遍历）需要超过2小时。</li>\n<li>测试：尝试完成「合并两个有序链表」算法题，若无法在30分钟内写出非递归解法需警惕。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>抽象建模能力不足</strong></li>\n</ol>\n<ul>\n<li>表现：难以将业务需求转化为类图设计，例如设计电商订单系统时无法抽象出订单、库存、支付等核心领域模型。</li>\n</ul>\n<hr>\n<h3 id=\"二、工作体验反馈\"><a href=\"#二、工作体验反馈\" class=\"headerlink\" title=\"二、工作体验反馈\"></a><strong>二、工作体验反馈</strong></h3><ol>\n<li><strong>代码编写痛苦指数</strong></li>\n</ol>\n<ul>\n<li>现象：每次编写超过50行代码就感到焦躁，IDE报错提示引发情绪抵触。</li>\n<li>对比：资深开发者面对报错时会产生”解谜”兴趣，而非挫败感。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>成就感缺失周期</strong></li>\n</ol>\n<ul>\n<li>指标：连续3个月未因解决技术问题（如优化接口响应时间）产生愉悦感。</li>\n<li>案例：完成微服务改造后，对吞吐量提升50%的成果无感。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>职业倦怠强度</strong></li>\n</ol>\n<ul>\n<li>表现：看到技术大会通知第一反应是排斥，而非期待学习新知识。</li>\n<li>数据：GitHub年度活跃度下降超过60%（个人账号提交记录对比）。</li>\n</ul>\n<hr>\n<h3 id=\"三、生理心理信号\"><a href=\"#三、生理心理信号\" class=\"headerlink\" title=\"三、生理心理信号\"></a><strong>三、生理心理信号</strong></h3><ol>\n<li><strong>持续身体排斥反应</strong></li>\n</ol>\n<ul>\n<li>症状：长时间面对屏幕后出现偏头痛、视力模糊等生理不适，且调整工作环境后无改善。</li>\n<li>医学数据：约5%人群存在「屏幕不适综合征」，可能不适合长期编程工作。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>思维模式冲突</strong></li>\n</ol>\n<ul>\n<li>表现：更享受与人直接互动（如销售洽谈），而非通过代码间接解决问题。</li>\n<li>职业倾向测试：MBTI中「E型人格」（外向型）在开发岗位占比仅28%（来源：2023年LinkedIn数据）。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>时间感知扭曲</strong></li>\n</ol>\n<ul>\n<li>现象：预估开发任务耗时偏差率持续&gt;50%（如预估3天实际需1周），显示缺乏工程化思维。</li>\n</ul>\n<hr>\n<h3 id=\"四、转型建议路径\"><a href=\"#四、转型建议路径\" class=\"headerlink\" title=\"四、转型建议路径\"></a><strong>四、转型建议路径</strong></h3><p>若符合≥3项上述特征，可考虑以下发展方向：</p>\n<table>\n<thead>\n<tr>\n<th><strong>适合方向</strong></th>\n<th><strong>能力迁移点</strong></th>\n<th><strong>典型案例</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>技术产品经理</td>\n<td>需求分析能力+技术理解力</td>\n<td>从开发转岗钉钉产品经理</td>\n</tr>\n<tr>\n<td>质量保障工程师</td>\n<td>逻辑思维+测试用例设计</td>\n<td>转型为自动化测试专家</td>\n</tr>\n<tr>\n<td>技术布道师</td>\n<td>技术热情+沟通表达能力</td>\n<td>阿里云MVP技术推广</td>\n</tr>\n<tr>\n<td>项目管理</td>\n<td>工程理解力+协调能力</td>\n<td>成为PMP认证项目经理</td>\n</tr>\n<tr>\n<td>技术写作</td>\n<td>文档解读能力+文字表达</td>\n<td>撰写Spring官方文档</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"五、自我验证方法\"><a href=\"#五、自我验证方法\" class=\"headerlink\" title=\"五、自我验证方法\"></a><strong>五、自我验证方法</strong></h3><ol>\n<li><strong>3个月刻意训练实验</strong></li>\n</ol>\n<ul>\n<li>目标：每天投入2小时系统学习（如完成《Effective Java》精读）</li>\n<li>验证：若无法坚持21天，说明缺乏基础驱动力</li>\n</ul>\n<ol start=\"2\">\n<li><strong>开源贡献体验</strong></li>\n</ol>\n<ul>\n<li>任务：为Apache Commons项目修复1个简单issue</li>\n<li>观察：代码审查过程是否引发持续焦虑</li>\n</ul>\n<ol start=\"3\">\n<li><strong>黑客马拉松挑战</strong></li>\n</ol>\n<ul>\n<li>参与：48小时开发一个具备核心功能的DEMO</li>\n<li>评估：过程中是享受创造还是煎熬</li>\n</ul>\n<hr>\n<h3 id=\"六、关键认知\"><a href=\"#六、关键认知\" class=\"headerlink\" title=\"六、关键认知\"></a><strong>六、关键认知</strong></h3><ol>\n<li><strong>适不适合≠能力高低</strong>：许多初期困难可通过训练改善（如设计模式应用）</li>\n<li><strong>职业光谱理论</strong>：技术岗位包含开发、架构、管理等多维度，可寻找适配角色</li>\n<li><strong>兴趣培养周期</strong>：对技术的兴趣常随能力提升而增长，建议至少坚持2年再评估</li>\n</ol>\n<p>若经过系统尝试仍存在强烈不适感，及时转型反而是明智选择。软件开发只是万千职业中的一种，找到与个人特质匹配的领域才能实现价值最大化。</p>\n","excerpt":"","more":"<p>判断自己是否适合从事软件开发工作，需要结合个人特质、职业兴趣和实际工作体验综合评估。以下是一些关键判断标准及对应的思考方向：</p>\n<hr>\n<h3 id=\"一、核心能力匹配度\"><a href=\"#一、核心能力匹配度\" class=\"headerlink\" title=\"一、核心能力匹配度\"></a><strong>一、核心能力匹配度</strong></h3><ol>\n<li><strong>持续学习意愿薄弱</strong></li>\n</ol>\n<ul>\n<li>表现：对新技术（如AI编程工具、云原生技术）缺乏好奇心，学习文档时感到枯燥。</li>\n<li>案例：面对Java 17新特性（如Record类）时，宁愿复制旧代码也不愿尝试改进。</li>\n<li>数据：2023年Stack Overflow调查显示，83%的开发者每周至少投入5小时学习新技术。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>逻辑思维能力欠缺</strong></li>\n</ol>\n<ul>\n<li>表现：调试代码时无法定位问题根源，面对LeetCode中等难度题（如二叉树遍历）需要超过2小时。</li>\n<li>测试：尝试完成「合并两个有序链表」算法题，若无法在30分钟内写出非递归解法需警惕。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>抽象建模能力不足</strong></li>\n</ol>\n<ul>\n<li>表现：难以将业务需求转化为类图设计，例如设计电商订单系统时无法抽象出订单、库存、支付等核心领域模型。</li>\n</ul>\n<hr>\n<h3 id=\"二、工作体验反馈\"><a href=\"#二、工作体验反馈\" class=\"headerlink\" title=\"二、工作体验反馈\"></a><strong>二、工作体验反馈</strong></h3><ol>\n<li><strong>代码编写痛苦指数</strong></li>\n</ol>\n<ul>\n<li>现象：每次编写超过50行代码就感到焦躁，IDE报错提示引发情绪抵触。</li>\n<li>对比：资深开发者面对报错时会产生”解谜”兴趣，而非挫败感。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>成就感缺失周期</strong></li>\n</ol>\n<ul>\n<li>指标：连续3个月未因解决技术问题（如优化接口响应时间）产生愉悦感。</li>\n<li>案例：完成微服务改造后，对吞吐量提升50%的成果无感。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>职业倦怠强度</strong></li>\n</ol>\n<ul>\n<li>表现：看到技术大会通知第一反应是排斥，而非期待学习新知识。</li>\n<li>数据：GitHub年度活跃度下降超过60%（个人账号提交记录对比）。</li>\n</ul>\n<hr>\n<h3 id=\"三、生理心理信号\"><a href=\"#三、生理心理信号\" class=\"headerlink\" title=\"三、生理心理信号\"></a><strong>三、生理心理信号</strong></h3><ol>\n<li><strong>持续身体排斥反应</strong></li>\n</ol>\n<ul>\n<li>症状：长时间面对屏幕后出现偏头痛、视力模糊等生理不适，且调整工作环境后无改善。</li>\n<li>医学数据：约5%人群存在「屏幕不适综合征」，可能不适合长期编程工作。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>思维模式冲突</strong></li>\n</ol>\n<ul>\n<li>表现：更享受与人直接互动（如销售洽谈），而非通过代码间接解决问题。</li>\n<li>职业倾向测试：MBTI中「E型人格」（外向型）在开发岗位占比仅28%（来源：2023年LinkedIn数据）。</li>\n</ul>\n<ol start=\"3\">\n<li><strong>时间感知扭曲</strong></li>\n</ol>\n<ul>\n<li>现象：预估开发任务耗时偏差率持续&gt;50%（如预估3天实际需1周），显示缺乏工程化思维。</li>\n</ul>\n<hr>\n<h3 id=\"四、转型建议路径\"><a href=\"#四、转型建议路径\" class=\"headerlink\" title=\"四、转型建议路径\"></a><strong>四、转型建议路径</strong></h3><p>若符合≥3项上述特征，可考虑以下发展方向：</p>\n<table>\n<thead>\n<tr>\n<th><strong>适合方向</strong></th>\n<th><strong>能力迁移点</strong></th>\n<th><strong>典型案例</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>技术产品经理</td>\n<td>需求分析能力+技术理解力</td>\n<td>从开发转岗钉钉产品经理</td>\n</tr>\n<tr>\n<td>质量保障工程师</td>\n<td>逻辑思维+测试用例设计</td>\n<td>转型为自动化测试专家</td>\n</tr>\n<tr>\n<td>技术布道师</td>\n<td>技术热情+沟通表达能力</td>\n<td>阿里云MVP技术推广</td>\n</tr>\n<tr>\n<td>项目管理</td>\n<td>工程理解力+协调能力</td>\n<td>成为PMP认证项目经理</td>\n</tr>\n<tr>\n<td>技术写作</td>\n<td>文档解读能力+文字表达</td>\n<td>撰写Spring官方文档</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"五、自我验证方法\"><a href=\"#五、自我验证方法\" class=\"headerlink\" title=\"五、自我验证方法\"></a><strong>五、自我验证方法</strong></h3><ol>\n<li><strong>3个月刻意训练实验</strong></li>\n</ol>\n<ul>\n<li>目标：每天投入2小时系统学习（如完成《Effective Java》精读）</li>\n<li>验证：若无法坚持21天，说明缺乏基础驱动力</li>\n</ul>\n<ol start=\"2\">\n<li><strong>开源贡献体验</strong></li>\n</ol>\n<ul>\n<li>任务：为Apache Commons项目修复1个简单issue</li>\n<li>观察：代码审查过程是否引发持续焦虑</li>\n</ul>\n<ol start=\"3\">\n<li><strong>黑客马拉松挑战</strong></li>\n</ol>\n<ul>\n<li>参与：48小时开发一个具备核心功能的DEMO</li>\n<li>评估：过程中是享受创造还是煎熬</li>\n</ul>\n<hr>\n<h3 id=\"六、关键认知\"><a href=\"#六、关键认知\" class=\"headerlink\" title=\"六、关键认知\"></a><strong>六、关键认知</strong></h3><ol>\n<li><strong>适不适合≠能力高低</strong>：许多初期困难可通过训练改善（如设计模式应用）</li>\n<li><strong>职业光谱理论</strong>：技术岗位包含开发、架构、管理等多维度，可寻找适配角色</li>\n<li><strong>兴趣培养周期</strong>：对技术的兴趣常随能力提升而增长，建议至少坚持2年再评估</li>\n</ol>\n<p>若经过系统尝试仍存在强烈不适感，及时转型反而是明智选择。软件开发只是万千职业中的一种，找到与个人特质匹配的领域才能实现价值最大化。</p>\n"},{"title":"初级","_content":"\n### **Java初级开发工程师全面成长路线**\n**目标**：1年内掌握企业级开发全流程技术栈，达到可独立开发模块的水平\n\n---\n\n### **一、Java核心技术（1-3个月）**\n#### **1. 语言基础**\n- **核心语法**：数据类型、流程控制、异常处理\n- **面向对象**：封装/继承/多态、接口/抽象类\n- **新特性**：Lambda表达式、Stream API、Optional\n- **学习资源**：《Java核心技术卷Ⅰ》 + [CodeGym实战平台](https://codegym.cc/)\n\n#### **2. 高级特性**\n- **集合框架**：ArrayList/HashMap底层原理、Fail-Fast机制\n- **多线程**：线程池（ThreadPoolExecutor）、锁机制（ReentrantLock）\n- **IO/NIO**：文件操作、网络通信模型\n- **项目实战**：开发多线程下载器（支持断点续传）\n\n---\n\n### **二、数据库与ORM（2-4个月）**\n#### **1. MySQL基础**\n- **SQL进阶**：复杂查询（JOIN/子查询）、事务隔离级别\n- **性能优化**：执行计划解读、索引设计原则\n- **工具使用**：Navicat、MySQL Workbench\n\n#### **2. ORM框架**\n- **MyBatis**：动态SQL、二级缓存、插件开发\n- **JPA**：实体关系映射、Spring Data JPA\n- **项目实战**：电商系统商品模块（CRUD+分页查询）\n\n---\n\n### **三、Spring生态（3-6个月）**\n#### **1. Spring Boot**\n- **核心功能**：自动配置原理、Starter机制\n- **Web开发**：RESTful API设计、参数校验\n- **集成测试**：MockMVC、Testcontainers\n- **项目实战**：博客系统API（文章/评论/分类管理）\n\n#### **2. Spring Cloud Alibaba**\n- **服务注册**：Nacos集群搭建\n- **服务调用**：OpenFeign声明式调用\n- **熔断限流**：Sentinel规则配置\n- **项目实战**：微服务天气查询系统（对接第三方API）\n\n---\n\n### **四、前端基础（1-2个月）**\n#### **1. 三件套**\n- **HTML5**：语义化标签、表单验证\n- **CSS3**：Flex布局、媒体查询\n- **JavaScript**：ES6语法、DOM操作\n\n#### **2. 前端框架**\n- **Vue基础**：Vue CLI、组件通信\n- **Ajax**：Axios封装、跨域处理\n- **项目实战**：管理后台前端（配合Spring Boot API）\n\n---\n\n### **五、开发工具链（持续学习）**\n| **工具类型**     | **必学工具**                  | **核心技能**                          |\n|------------------|------------------------------|---------------------------------------|\n| 版本控制         | Git                          | 分支管理、冲突解决、Rebase操作         |\n| 构建工具         | Maven/Gradle                 | 多模块构建、依赖冲突解决               |\n| 容器化           | Docker                       | Dockerfile编写、Compose部署           |\n| 持续集成         | Jenkins                      | Pipeline脚本编写、自动化部署           |\n| 开发环境         | IntelliJ IDEA                | 高效插件（Lombok、MyBatisX）          |\n| Linux基础        | 常用命令                     | 日志分析、服务部署、Shell脚本编写      |\n\n---\n\n### **六、工程实践（6-12个月）**\n#### **1. 代码质量**\n- **单元测试**：JUnit 5参数化测试、Mockito模拟\n- **代码规范**：阿里巴巴Java开发手册、Checkstyle\n- **静态分析**：SonarQube漏洞检测\n\n#### **2. 性能优化**\n- **JVM调优**：GC日志分析、内存泄漏定位\n- **SQL优化**：慢查询日志、索引失效场景\n- **缓存设计**：Redis缓存穿透/雪崩解决方案\n\n#### **3. 项目实战**\n- **综合项目**：在线教育平台（含视频点播模块）\n- **技术亮点**：\n    - JWT权限认证\n    - Elasticsearch课程搜索\n    - 支付宝沙箱支付集成\n    - 基于MinIO的文件存储\n\n---\n\n### **七、扩展技术栈（12+个月）**\n#### **1. 中间件**\n- **消息队列**：RocketMQ事务消息\n- **分布式锁**：Redisson实现\n- **配置中心**：Apollo动态配置\n\n#### **2. 云原生**\n- **Kubernetes**：Pod部署、Service暴露\n- **Serverless**：函数计算开发\n- **监控体系**：Prometheus + Grafana\n\n#### **3. 架构基础**\n- **DDD入门**：领域模型设计\n- **CQRS模式**：读写分离实践\n- **事件驱动**：Spring Cloud Stream\n\n---\n\n### **学习路径图**\n```mermaid\ngantt\n    title Java初级工程师成长路线\n    dateFormat  YYYY-MM\n    section 基础阶段\n    Java核心           :2023-01, 3m\n    MySQL与ORM        :2023-04, 2m\n    section 框架阶段\n    Spring Boot       :2023-03, 3m\n    Spring Cloud      :2023-06, 2m\n    section 工程实践\n    工具链掌握         :2023-05, 4m\n    项目实战           :2023-07, 6m\n    section 扩展提升\n    中间件与云原生     :2024-01, 6m\n```\n\n---\n\n### **关键建议**\n1. **每日代码量**：保持200+行有效代码产出\n2. **技术博客**：每月至少2篇技术文章（推荐[掘金](https://juejin.cn/)平台）\n3. **开源参与**：从文档翻译开始参与Apache项目\n4. **面试准备**：定期刷[牛客网](https://www.nowcoder.com/)真题\n5. **技术社交**：加入本地技术社区（如Meetup）\n\n---\n\n**避坑提醒**：\n- 不要过早追求\"源码级理解\"，先掌握使用再研究原理\n- 避免重复造轮子，合理使用开源组件\n- 警惕\"技术松鼠症\"，学完一个技术栈再开启下一个\n\n按照此路线坚持学习+实践，1年后可达到：\n- **技术能力**：可独立完成中小型系统模块开发\n- **工程能力**：具备基础架构设计思维\n- **薪资水平**：一线城市15-25K，二线城市8-15K","source":"_posts/初级.md","raw":"---\ntitle: 初级\n---\n\n### **Java初级开发工程师全面成长路线**\n**目标**：1年内掌握企业级开发全流程技术栈，达到可独立开发模块的水平\n\n---\n\n### **一、Java核心技术（1-3个月）**\n#### **1. 语言基础**\n- **核心语法**：数据类型、流程控制、异常处理\n- **面向对象**：封装/继承/多态、接口/抽象类\n- **新特性**：Lambda表达式、Stream API、Optional\n- **学习资源**：《Java核心技术卷Ⅰ》 + [CodeGym实战平台](https://codegym.cc/)\n\n#### **2. 高级特性**\n- **集合框架**：ArrayList/HashMap底层原理、Fail-Fast机制\n- **多线程**：线程池（ThreadPoolExecutor）、锁机制（ReentrantLock）\n- **IO/NIO**：文件操作、网络通信模型\n- **项目实战**：开发多线程下载器（支持断点续传）\n\n---\n\n### **二、数据库与ORM（2-4个月）**\n#### **1. MySQL基础**\n- **SQL进阶**：复杂查询（JOIN/子查询）、事务隔离级别\n- **性能优化**：执行计划解读、索引设计原则\n- **工具使用**：Navicat、MySQL Workbench\n\n#### **2. ORM框架**\n- **MyBatis**：动态SQL、二级缓存、插件开发\n- **JPA**：实体关系映射、Spring Data JPA\n- **项目实战**：电商系统商品模块（CRUD+分页查询）\n\n---\n\n### **三、Spring生态（3-6个月）**\n#### **1. Spring Boot**\n- **核心功能**：自动配置原理、Starter机制\n- **Web开发**：RESTful API设计、参数校验\n- **集成测试**：MockMVC、Testcontainers\n- **项目实战**：博客系统API（文章/评论/分类管理）\n\n#### **2. Spring Cloud Alibaba**\n- **服务注册**：Nacos集群搭建\n- **服务调用**：OpenFeign声明式调用\n- **熔断限流**：Sentinel规则配置\n- **项目实战**：微服务天气查询系统（对接第三方API）\n\n---\n\n### **四、前端基础（1-2个月）**\n#### **1. 三件套**\n- **HTML5**：语义化标签、表单验证\n- **CSS3**：Flex布局、媒体查询\n- **JavaScript**：ES6语法、DOM操作\n\n#### **2. 前端框架**\n- **Vue基础**：Vue CLI、组件通信\n- **Ajax**：Axios封装、跨域处理\n- **项目实战**：管理后台前端（配合Spring Boot API）\n\n---\n\n### **五、开发工具链（持续学习）**\n| **工具类型**     | **必学工具**                  | **核心技能**                          |\n|------------------|------------------------------|---------------------------------------|\n| 版本控制         | Git                          | 分支管理、冲突解决、Rebase操作         |\n| 构建工具         | Maven/Gradle                 | 多模块构建、依赖冲突解决               |\n| 容器化           | Docker                       | Dockerfile编写、Compose部署           |\n| 持续集成         | Jenkins                      | Pipeline脚本编写、自动化部署           |\n| 开发环境         | IntelliJ IDEA                | 高效插件（Lombok、MyBatisX）          |\n| Linux基础        | 常用命令                     | 日志分析、服务部署、Shell脚本编写      |\n\n---\n\n### **六、工程实践（6-12个月）**\n#### **1. 代码质量**\n- **单元测试**：JUnit 5参数化测试、Mockito模拟\n- **代码规范**：阿里巴巴Java开发手册、Checkstyle\n- **静态分析**：SonarQube漏洞检测\n\n#### **2. 性能优化**\n- **JVM调优**：GC日志分析、内存泄漏定位\n- **SQL优化**：慢查询日志、索引失效场景\n- **缓存设计**：Redis缓存穿透/雪崩解决方案\n\n#### **3. 项目实战**\n- **综合项目**：在线教育平台（含视频点播模块）\n- **技术亮点**：\n    - JWT权限认证\n    - Elasticsearch课程搜索\n    - 支付宝沙箱支付集成\n    - 基于MinIO的文件存储\n\n---\n\n### **七、扩展技术栈（12+个月）**\n#### **1. 中间件**\n- **消息队列**：RocketMQ事务消息\n- **分布式锁**：Redisson实现\n- **配置中心**：Apollo动态配置\n\n#### **2. 云原生**\n- **Kubernetes**：Pod部署、Service暴露\n- **Serverless**：函数计算开发\n- **监控体系**：Prometheus + Grafana\n\n#### **3. 架构基础**\n- **DDD入门**：领域模型设计\n- **CQRS模式**：读写分离实践\n- **事件驱动**：Spring Cloud Stream\n\n---\n\n### **学习路径图**\n```mermaid\ngantt\n    title Java初级工程师成长路线\n    dateFormat  YYYY-MM\n    section 基础阶段\n    Java核心           :2023-01, 3m\n    MySQL与ORM        :2023-04, 2m\n    section 框架阶段\n    Spring Boot       :2023-03, 3m\n    Spring Cloud      :2023-06, 2m\n    section 工程实践\n    工具链掌握         :2023-05, 4m\n    项目实战           :2023-07, 6m\n    section 扩展提升\n    中间件与云原生     :2024-01, 6m\n```\n\n---\n\n### **关键建议**\n1. **每日代码量**：保持200+行有效代码产出\n2. **技术博客**：每月至少2篇技术文章（推荐[掘金](https://juejin.cn/)平台）\n3. **开源参与**：从文档翻译开始参与Apache项目\n4. **面试准备**：定期刷[牛客网](https://www.nowcoder.com/)真题\n5. **技术社交**：加入本地技术社区（如Meetup）\n\n---\n\n**避坑提醒**：\n- 不要过早追求\"源码级理解\"，先掌握使用再研究原理\n- 避免重复造轮子，合理使用开源组件\n- 警惕\"技术松鼠症\"，学完一个技术栈再开启下一个\n\n按照此路线坚持学习+实践，1年后可达到：\n- **技术能力**：可独立完成中小型系统模块开发\n- **工程能力**：具备基础架构设计思维\n- **薪资水平**：一线城市15-25K，二线城市8-15K","slug":"初级","published":1,"date":"2025-02-15T11:22:19.897Z","updated":"2025-02-16T05:21:37.932Z","comments":1,"layout":"post","photos":[],"_id":"cm8fvyumq000a48v65wxx4rok","content":"<h3 id=\"Java初级开发工程师全面成长路线\"><a href=\"#Java初级开发工程师全面成长路线\" class=\"headerlink\" title=\"Java初级开发工程师全面成长路线\"></a><strong>Java初级开发工程师全面成长路线</strong></h3><p><strong>目标</strong>：1年内掌握企业级开发全流程技术栈，达到可独立开发模块的水平</p>\n<hr>\n<h3 id=\"一、Java核心技术（1-3个月）\"><a href=\"#一、Java核心技术（1-3个月）\" class=\"headerlink\" title=\"一、Java核心技术（1-3个月）\"></a><strong>一、Java核心技术（1-3个月）</strong></h3><h4 id=\"1-语言基础\"><a href=\"#1-语言基础\" class=\"headerlink\" title=\"1. 语言基础\"></a><strong>1. 语言基础</strong></h4><ul>\n<li><strong>核心语法</strong>：数据类型、流程控制、异常处理</li>\n<li><strong>面向对象</strong>：封装&#x2F;继承&#x2F;多态、接口&#x2F;抽象类</li>\n<li><strong>新特性</strong>：Lambda表达式、Stream API、Optional</li>\n<li><strong>学习资源</strong>：《Java核心技术卷Ⅰ》 + <a href=\"https://codegym.cc/\">CodeGym实战平台</a></li>\n</ul>\n<h4 id=\"2-高级特性\"><a href=\"#2-高级特性\" class=\"headerlink\" title=\"2. 高级特性\"></a><strong>2. 高级特性</strong></h4><ul>\n<li><strong>集合框架</strong>：ArrayList&#x2F;HashMap底层原理、Fail-Fast机制</li>\n<li><strong>多线程</strong>：线程池（ThreadPoolExecutor）、锁机制（ReentrantLock）</li>\n<li><strong>IO&#x2F;NIO</strong>：文件操作、网络通信模型</li>\n<li><strong>项目实战</strong>：开发多线程下载器（支持断点续传）</li>\n</ul>\n<hr>\n<h3 id=\"二、数据库与ORM（2-4个月）\"><a href=\"#二、数据库与ORM（2-4个月）\" class=\"headerlink\" title=\"二、数据库与ORM（2-4个月）\"></a><strong>二、数据库与ORM（2-4个月）</strong></h3><h4 id=\"1-MySQL基础\"><a href=\"#1-MySQL基础\" class=\"headerlink\" title=\"1. MySQL基础\"></a><strong>1. MySQL基础</strong></h4><ul>\n<li><strong>SQL进阶</strong>：复杂查询（JOIN&#x2F;子查询）、事务隔离级别</li>\n<li><strong>性能优化</strong>：执行计划解读、索引设计原则</li>\n<li><strong>工具使用</strong>：Navicat、MySQL Workbench</li>\n</ul>\n<h4 id=\"2-ORM框架\"><a href=\"#2-ORM框架\" class=\"headerlink\" title=\"2. ORM框架\"></a><strong>2. ORM框架</strong></h4><ul>\n<li><strong>MyBatis</strong>：动态SQL、二级缓存、插件开发</li>\n<li><strong>JPA</strong>：实体关系映射、Spring Data JPA</li>\n<li><strong>项目实战</strong>：电商系统商品模块（CRUD+分页查询）</li>\n</ul>\n<hr>\n<h3 id=\"三、Spring生态（3-6个月）\"><a href=\"#三、Spring生态（3-6个月）\" class=\"headerlink\" title=\"三、Spring生态（3-6个月）\"></a><strong>三、Spring生态（3-6个月）</strong></h3><h4 id=\"1-Spring-Boot\"><a href=\"#1-Spring-Boot\" class=\"headerlink\" title=\"1. Spring Boot\"></a><strong>1. Spring Boot</strong></h4><ul>\n<li><strong>核心功能</strong>：自动配置原理、Starter机制</li>\n<li><strong>Web开发</strong>：RESTful API设计、参数校验</li>\n<li><strong>集成测试</strong>：MockMVC、Testcontainers</li>\n<li><strong>项目实战</strong>：博客系统API（文章&#x2F;评论&#x2F;分类管理）</li>\n</ul>\n<h4 id=\"2-Spring-Cloud-Alibaba\"><a href=\"#2-Spring-Cloud-Alibaba\" class=\"headerlink\" title=\"2. Spring Cloud Alibaba\"></a><strong>2. Spring Cloud Alibaba</strong></h4><ul>\n<li><strong>服务注册</strong>：Nacos集群搭建</li>\n<li><strong>服务调用</strong>：OpenFeign声明式调用</li>\n<li><strong>熔断限流</strong>：Sentinel规则配置</li>\n<li><strong>项目实战</strong>：微服务天气查询系统（对接第三方API）</li>\n</ul>\n<hr>\n<h3 id=\"四、前端基础（1-2个月）\"><a href=\"#四、前端基础（1-2个月）\" class=\"headerlink\" title=\"四、前端基础（1-2个月）\"></a><strong>四、前端基础（1-2个月）</strong></h3><h4 id=\"1-三件套\"><a href=\"#1-三件套\" class=\"headerlink\" title=\"1. 三件套\"></a><strong>1. 三件套</strong></h4><ul>\n<li><strong>HTML5</strong>：语义化标签、表单验证</li>\n<li><strong>CSS3</strong>：Flex布局、媒体查询</li>\n<li><strong>JavaScript</strong>：ES6语法、DOM操作</li>\n</ul>\n<h4 id=\"2-前端框架\"><a href=\"#2-前端框架\" class=\"headerlink\" title=\"2. 前端框架\"></a><strong>2. 前端框架</strong></h4><ul>\n<li><strong>Vue基础</strong>：Vue CLI、组件通信</li>\n<li><strong>Ajax</strong>：Axios封装、跨域处理</li>\n<li><strong>项目实战</strong>：管理后台前端（配合Spring Boot API）</li>\n</ul>\n<hr>\n<h3 id=\"五、开发工具链（持续学习）\"><a href=\"#五、开发工具链（持续学习）\" class=\"headerlink\" title=\"五、开发工具链（持续学习）\"></a><strong>五、开发工具链（持续学习）</strong></h3><table>\n<thead>\n<tr>\n<th><strong>工具类型</strong></th>\n<th><strong>必学工具</strong></th>\n<th><strong>核心技能</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>版本控制</td>\n<td>Git</td>\n<td>分支管理、冲突解决、Rebase操作</td>\n</tr>\n<tr>\n<td>构建工具</td>\n<td>Maven&#x2F;Gradle</td>\n<td>多模块构建、依赖冲突解决</td>\n</tr>\n<tr>\n<td>容器化</td>\n<td>Docker</td>\n<td>Dockerfile编写、Compose部署</td>\n</tr>\n<tr>\n<td>持续集成</td>\n<td>Jenkins</td>\n<td>Pipeline脚本编写、自动化部署</td>\n</tr>\n<tr>\n<td>开发环境</td>\n<td>IntelliJ IDEA</td>\n<td>高效插件（Lombok、MyBatisX）</td>\n</tr>\n<tr>\n<td>Linux基础</td>\n<td>常用命令</td>\n<td>日志分析、服务部署、Shell脚本编写</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"六、工程实践（6-12个月）\"><a href=\"#六、工程实践（6-12个月）\" class=\"headerlink\" title=\"六、工程实践（6-12个月）\"></a><strong>六、工程实践（6-12个月）</strong></h3><h4 id=\"1-代码质量\"><a href=\"#1-代码质量\" class=\"headerlink\" title=\"1. 代码质量\"></a><strong>1. 代码质量</strong></h4><ul>\n<li><strong>单元测试</strong>：JUnit 5参数化测试、Mockito模拟</li>\n<li><strong>代码规范</strong>：阿里巴巴Java开发手册、Checkstyle</li>\n<li><strong>静态分析</strong>：SonarQube漏洞检测</li>\n</ul>\n<h4 id=\"2-性能优化\"><a href=\"#2-性能优化\" class=\"headerlink\" title=\"2. 性能优化\"></a><strong>2. 性能优化</strong></h4><ul>\n<li><strong>JVM调优</strong>：GC日志分析、内存泄漏定位</li>\n<li><strong>SQL优化</strong>：慢查询日志、索引失效场景</li>\n<li><strong>缓存设计</strong>：Redis缓存穿透&#x2F;雪崩解决方案</li>\n</ul>\n<h4 id=\"3-项目实战\"><a href=\"#3-项目实战\" class=\"headerlink\" title=\"3. 项目实战\"></a><strong>3. 项目实战</strong></h4><ul>\n<li><strong>综合项目</strong>：在线教育平台（含视频点播模块）</li>\n<li><strong>技术亮点</strong>：<ul>\n<li>JWT权限认证</li>\n<li>Elasticsearch课程搜索</li>\n<li>支付宝沙箱支付集成</li>\n<li>基于MinIO的文件存储</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"七、扩展技术栈（12-个月）\"><a href=\"#七、扩展技术栈（12-个月）\" class=\"headerlink\" title=\"七、扩展技术栈（12+个月）\"></a><strong>七、扩展技术栈（12+个月）</strong></h3><h4 id=\"1-中间件\"><a href=\"#1-中间件\" class=\"headerlink\" title=\"1. 中间件\"></a><strong>1. 中间件</strong></h4><ul>\n<li><strong>消息队列</strong>：RocketMQ事务消息</li>\n<li><strong>分布式锁</strong>：Redisson实现</li>\n<li><strong>配置中心</strong>：Apollo动态配置</li>\n</ul>\n<h4 id=\"2-云原生\"><a href=\"#2-云原生\" class=\"headerlink\" title=\"2. 云原生\"></a><strong>2. 云原生</strong></h4><ul>\n<li><strong>Kubernetes</strong>：Pod部署、Service暴露</li>\n<li><strong>Serverless</strong>：函数计算开发</li>\n<li><strong>监控体系</strong>：Prometheus + Grafana</li>\n</ul>\n<h4 id=\"3-架构基础\"><a href=\"#3-架构基础\" class=\"headerlink\" title=\"3. 架构基础\"></a><strong>3. 架构基础</strong></h4><ul>\n<li><strong>DDD入门</strong>：领域模型设计</li>\n<li><strong>CQRS模式</strong>：读写分离实践</li>\n<li><strong>事件驱动</strong>：Spring Cloud Stream</li>\n</ul>\n<hr>\n<h3 id=\"学习路径图\"><a href=\"#学习路径图\" class=\"headerlink\" title=\"学习路径图\"></a><strong>学习路径图</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">    title Java初级工程师成长路线</span><br><span class=\"line\">    dateFormat  YYYY-MM</span><br><span class=\"line\">    section 基础阶段</span><br><span class=\"line\">    Java核心           :2023-01, 3m</span><br><span class=\"line\">    MySQL与ORM        :2023-04, 2m</span><br><span class=\"line\">    section 框架阶段</span><br><span class=\"line\">    Spring Boot       :2023-03, 3m</span><br><span class=\"line\">    Spring Cloud      :2023-06, 2m</span><br><span class=\"line\">    section 工程实践</span><br><span class=\"line\">    工具链掌握         :2023-05, 4m</span><br><span class=\"line\">    项目实战           :2023-07, 6m</span><br><span class=\"line\">    section 扩展提升</span><br><span class=\"line\">    中间件与云原生     :2024-01, 6m</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键建议\"><a href=\"#关键建议\" class=\"headerlink\" title=\"关键建议\"></a><strong>关键建议</strong></h3><ol>\n<li><strong>每日代码量</strong>：保持200+行有效代码产出</li>\n<li><strong>技术博客</strong>：每月至少2篇技术文章（推荐<a href=\"https://juejin.cn/\">掘金</a>平台）</li>\n<li><strong>开源参与</strong>：从文档翻译开始参与Apache项目</li>\n<li><strong>面试准备</strong>：定期刷<a href=\"https://www.nowcoder.com/\">牛客网</a>真题</li>\n<li><strong>技术社交</strong>：加入本地技术社区（如Meetup）</li>\n</ol>\n<hr>\n<p><strong>避坑提醒</strong>：</p>\n<ul>\n<li>不要过早追求”源码级理解”，先掌握使用再研究原理</li>\n<li>避免重复造轮子，合理使用开源组件</li>\n<li>警惕”技术松鼠症”，学完一个技术栈再开启下一个</li>\n</ul>\n<p>按照此路线坚持学习+实践，1年后可达到：</p>\n<ul>\n<li><strong>技术能力</strong>：可独立完成中小型系统模块开发</li>\n<li><strong>工程能力</strong>：具备基础架构设计思维</li>\n<li><strong>薪资水平</strong>：一线城市15-25K，二线城市8-15K</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"Java初级开发工程师全面成长路线\"><a href=\"#Java初级开发工程师全面成长路线\" class=\"headerlink\" title=\"Java初级开发工程师全面成长路线\"></a><strong>Java初级开发工程师全面成长路线</strong></h3><p><strong>目标</strong>：1年内掌握企业级开发全流程技术栈，达到可独立开发模块的水平</p>\n<hr>\n<h3 id=\"一、Java核心技术（1-3个月）\"><a href=\"#一、Java核心技术（1-3个月）\" class=\"headerlink\" title=\"一、Java核心技术（1-3个月）\"></a><strong>一、Java核心技术（1-3个月）</strong></h3><h4 id=\"1-语言基础\"><a href=\"#1-语言基础\" class=\"headerlink\" title=\"1. 语言基础\"></a><strong>1. 语言基础</strong></h4><ul>\n<li><strong>核心语法</strong>：数据类型、流程控制、异常处理</li>\n<li><strong>面向对象</strong>：封装&#x2F;继承&#x2F;多态、接口&#x2F;抽象类</li>\n<li><strong>新特性</strong>：Lambda表达式、Stream API、Optional</li>\n<li><strong>学习资源</strong>：《Java核心技术卷Ⅰ》 + <a href=\"https://codegym.cc/\">CodeGym实战平台</a></li>\n</ul>\n<h4 id=\"2-高级特性\"><a href=\"#2-高级特性\" class=\"headerlink\" title=\"2. 高级特性\"></a><strong>2. 高级特性</strong></h4><ul>\n<li><strong>集合框架</strong>：ArrayList&#x2F;HashMap底层原理、Fail-Fast机制</li>\n<li><strong>多线程</strong>：线程池（ThreadPoolExecutor）、锁机制（ReentrantLock）</li>\n<li><strong>IO&#x2F;NIO</strong>：文件操作、网络通信模型</li>\n<li><strong>项目实战</strong>：开发多线程下载器（支持断点续传）</li>\n</ul>\n<hr>\n<h3 id=\"二、数据库与ORM（2-4个月）\"><a href=\"#二、数据库与ORM（2-4个月）\" class=\"headerlink\" title=\"二、数据库与ORM（2-4个月）\"></a><strong>二、数据库与ORM（2-4个月）</strong></h3><h4 id=\"1-MySQL基础\"><a href=\"#1-MySQL基础\" class=\"headerlink\" title=\"1. MySQL基础\"></a><strong>1. MySQL基础</strong></h4><ul>\n<li><strong>SQL进阶</strong>：复杂查询（JOIN&#x2F;子查询）、事务隔离级别</li>\n<li><strong>性能优化</strong>：执行计划解读、索引设计原则</li>\n<li><strong>工具使用</strong>：Navicat、MySQL Workbench</li>\n</ul>\n<h4 id=\"2-ORM框架\"><a href=\"#2-ORM框架\" class=\"headerlink\" title=\"2. ORM框架\"></a><strong>2. ORM框架</strong></h4><ul>\n<li><strong>MyBatis</strong>：动态SQL、二级缓存、插件开发</li>\n<li><strong>JPA</strong>：实体关系映射、Spring Data JPA</li>\n<li><strong>项目实战</strong>：电商系统商品模块（CRUD+分页查询）</li>\n</ul>\n<hr>\n<h3 id=\"三、Spring生态（3-6个月）\"><a href=\"#三、Spring生态（3-6个月）\" class=\"headerlink\" title=\"三、Spring生态（3-6个月）\"></a><strong>三、Spring生态（3-6个月）</strong></h3><h4 id=\"1-Spring-Boot\"><a href=\"#1-Spring-Boot\" class=\"headerlink\" title=\"1. Spring Boot\"></a><strong>1. Spring Boot</strong></h4><ul>\n<li><strong>核心功能</strong>：自动配置原理、Starter机制</li>\n<li><strong>Web开发</strong>：RESTful API设计、参数校验</li>\n<li><strong>集成测试</strong>：MockMVC、Testcontainers</li>\n<li><strong>项目实战</strong>：博客系统API（文章&#x2F;评论&#x2F;分类管理）</li>\n</ul>\n<h4 id=\"2-Spring-Cloud-Alibaba\"><a href=\"#2-Spring-Cloud-Alibaba\" class=\"headerlink\" title=\"2. Spring Cloud Alibaba\"></a><strong>2. Spring Cloud Alibaba</strong></h4><ul>\n<li><strong>服务注册</strong>：Nacos集群搭建</li>\n<li><strong>服务调用</strong>：OpenFeign声明式调用</li>\n<li><strong>熔断限流</strong>：Sentinel规则配置</li>\n<li><strong>项目实战</strong>：微服务天气查询系统（对接第三方API）</li>\n</ul>\n<hr>\n<h3 id=\"四、前端基础（1-2个月）\"><a href=\"#四、前端基础（1-2个月）\" class=\"headerlink\" title=\"四、前端基础（1-2个月）\"></a><strong>四、前端基础（1-2个月）</strong></h3><h4 id=\"1-三件套\"><a href=\"#1-三件套\" class=\"headerlink\" title=\"1. 三件套\"></a><strong>1. 三件套</strong></h4><ul>\n<li><strong>HTML5</strong>：语义化标签、表单验证</li>\n<li><strong>CSS3</strong>：Flex布局、媒体查询</li>\n<li><strong>JavaScript</strong>：ES6语法、DOM操作</li>\n</ul>\n<h4 id=\"2-前端框架\"><a href=\"#2-前端框架\" class=\"headerlink\" title=\"2. 前端框架\"></a><strong>2. 前端框架</strong></h4><ul>\n<li><strong>Vue基础</strong>：Vue CLI、组件通信</li>\n<li><strong>Ajax</strong>：Axios封装、跨域处理</li>\n<li><strong>项目实战</strong>：管理后台前端（配合Spring Boot API）</li>\n</ul>\n<hr>\n<h3 id=\"五、开发工具链（持续学习）\"><a href=\"#五、开发工具链（持续学习）\" class=\"headerlink\" title=\"五、开发工具链（持续学习）\"></a><strong>五、开发工具链（持续学习）</strong></h3><table>\n<thead>\n<tr>\n<th><strong>工具类型</strong></th>\n<th><strong>必学工具</strong></th>\n<th><strong>核心技能</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>版本控制</td>\n<td>Git</td>\n<td>分支管理、冲突解决、Rebase操作</td>\n</tr>\n<tr>\n<td>构建工具</td>\n<td>Maven&#x2F;Gradle</td>\n<td>多模块构建、依赖冲突解决</td>\n</tr>\n<tr>\n<td>容器化</td>\n<td>Docker</td>\n<td>Dockerfile编写、Compose部署</td>\n</tr>\n<tr>\n<td>持续集成</td>\n<td>Jenkins</td>\n<td>Pipeline脚本编写、自动化部署</td>\n</tr>\n<tr>\n<td>开发环境</td>\n<td>IntelliJ IDEA</td>\n<td>高效插件（Lombok、MyBatisX）</td>\n</tr>\n<tr>\n<td>Linux基础</td>\n<td>常用命令</td>\n<td>日志分析、服务部署、Shell脚本编写</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"六、工程实践（6-12个月）\"><a href=\"#六、工程实践（6-12个月）\" class=\"headerlink\" title=\"六、工程实践（6-12个月）\"></a><strong>六、工程实践（6-12个月）</strong></h3><h4 id=\"1-代码质量\"><a href=\"#1-代码质量\" class=\"headerlink\" title=\"1. 代码质量\"></a><strong>1. 代码质量</strong></h4><ul>\n<li><strong>单元测试</strong>：JUnit 5参数化测试、Mockito模拟</li>\n<li><strong>代码规范</strong>：阿里巴巴Java开发手册、Checkstyle</li>\n<li><strong>静态分析</strong>：SonarQube漏洞检测</li>\n</ul>\n<h4 id=\"2-性能优化\"><a href=\"#2-性能优化\" class=\"headerlink\" title=\"2. 性能优化\"></a><strong>2. 性能优化</strong></h4><ul>\n<li><strong>JVM调优</strong>：GC日志分析、内存泄漏定位</li>\n<li><strong>SQL优化</strong>：慢查询日志、索引失效场景</li>\n<li><strong>缓存设计</strong>：Redis缓存穿透&#x2F;雪崩解决方案</li>\n</ul>\n<h4 id=\"3-项目实战\"><a href=\"#3-项目实战\" class=\"headerlink\" title=\"3. 项目实战\"></a><strong>3. 项目实战</strong></h4><ul>\n<li><strong>综合项目</strong>：在线教育平台（含视频点播模块）</li>\n<li><strong>技术亮点</strong>：<ul>\n<li>JWT权限认证</li>\n<li>Elasticsearch课程搜索</li>\n<li>支付宝沙箱支付集成</li>\n<li>基于MinIO的文件存储</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"七、扩展技术栈（12-个月）\"><a href=\"#七、扩展技术栈（12-个月）\" class=\"headerlink\" title=\"七、扩展技术栈（12+个月）\"></a><strong>七、扩展技术栈（12+个月）</strong></h3><h4 id=\"1-中间件\"><a href=\"#1-中间件\" class=\"headerlink\" title=\"1. 中间件\"></a><strong>1. 中间件</strong></h4><ul>\n<li><strong>消息队列</strong>：RocketMQ事务消息</li>\n<li><strong>分布式锁</strong>：Redisson实现</li>\n<li><strong>配置中心</strong>：Apollo动态配置</li>\n</ul>\n<h4 id=\"2-云原生\"><a href=\"#2-云原生\" class=\"headerlink\" title=\"2. 云原生\"></a><strong>2. 云原生</strong></h4><ul>\n<li><strong>Kubernetes</strong>：Pod部署、Service暴露</li>\n<li><strong>Serverless</strong>：函数计算开发</li>\n<li><strong>监控体系</strong>：Prometheus + Grafana</li>\n</ul>\n<h4 id=\"3-架构基础\"><a href=\"#3-架构基础\" class=\"headerlink\" title=\"3. 架构基础\"></a><strong>3. 架构基础</strong></h4><ul>\n<li><strong>DDD入门</strong>：领域模型设计</li>\n<li><strong>CQRS模式</strong>：读写分离实践</li>\n<li><strong>事件驱动</strong>：Spring Cloud Stream</li>\n</ul>\n<hr>\n<h3 id=\"学习路径图\"><a href=\"#学习路径图\" class=\"headerlink\" title=\"学习路径图\"></a><strong>学习路径图</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">    title Java初级工程师成长路线</span><br><span class=\"line\">    dateFormat  YYYY-MM</span><br><span class=\"line\">    section 基础阶段</span><br><span class=\"line\">    Java核心           :2023-01, 3m</span><br><span class=\"line\">    MySQL与ORM        :2023-04, 2m</span><br><span class=\"line\">    section 框架阶段</span><br><span class=\"line\">    Spring Boot       :2023-03, 3m</span><br><span class=\"line\">    Spring Cloud      :2023-06, 2m</span><br><span class=\"line\">    section 工程实践</span><br><span class=\"line\">    工具链掌握         :2023-05, 4m</span><br><span class=\"line\">    项目实战           :2023-07, 6m</span><br><span class=\"line\">    section 扩展提升</span><br><span class=\"line\">    中间件与云原生     :2024-01, 6m</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"关键建议\"><a href=\"#关键建议\" class=\"headerlink\" title=\"关键建议\"></a><strong>关键建议</strong></h3><ol>\n<li><strong>每日代码量</strong>：保持200+行有效代码产出</li>\n<li><strong>技术博客</strong>：每月至少2篇技术文章（推荐<a href=\"https://juejin.cn/\">掘金</a>平台）</li>\n<li><strong>开源参与</strong>：从文档翻译开始参与Apache项目</li>\n<li><strong>面试准备</strong>：定期刷<a href=\"https://www.nowcoder.com/\">牛客网</a>真题</li>\n<li><strong>技术社交</strong>：加入本地技术社区（如Meetup）</li>\n</ol>\n<hr>\n<p><strong>避坑提醒</strong>：</p>\n<ul>\n<li>不要过早追求”源码级理解”，先掌握使用再研究原理</li>\n<li>避免重复造轮子，合理使用开源组件</li>\n<li>警惕”技术松鼠症”，学完一个技术栈再开启下一个</li>\n</ul>\n<p>按照此路线坚持学习+实践，1年后可达到：</p>\n<ul>\n<li><strong>技术能力</strong>：可独立完成中小型系统模块开发</li>\n<li><strong>工程能力</strong>：具备基础架构设计思维</li>\n<li><strong>薪资水平</strong>：一线城市15-25K，二线城市8-15K</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}