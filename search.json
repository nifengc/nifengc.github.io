[{"title":"Excel函数","path":"/2025/03/19/Excel/","content":"1、count()函数 统计某一列的个数 2、”‘“A1”‘,” 给某一列加引号，用于sql查询 3、RIGHT(A2,11) PBM_HANSI：发送TPA理赔数据异常 可以将列分离 ，从右边截取 分离后 发送TPA理赔数据异常 LEFT(A2,11) 从左边截取 4、CONCAT(“update jy_collaborate_mis.coll_stmt_collection_task set remark ‘提交成功’ where id ’”A1”‘;”) 拼接sql CONCAT(“”A1””) 5、VSTACK(吴国!A1:C17,蜀国!A2:C17,魏国!A2:C17) VSTACK（）合并多个表格数据到一个表格 注意：每选择一个表格数据之后，公式后面要加一个, 都选择完成之后点击对号 6、ctrl+D 向下填充"},{"title":"Servlet项目","path":"/2025/02/17/Servlet项目/","content":"以下是一些适合练习的免费在线Servlet项目，涵盖从基础到进阶的实践场景，每个项目都附有核心知识点和推荐资源： 1. 用户管理系统（入门级）项目功能 用户注册登录注销 个人资料修改 管理员权限控制 用户列表分页展示 技术要点 HttpSession实现会话管理 密码MD5加密存储 Filter实现权限验证 JDBC连接MySQL数据库 JSP + EL表达式 + JSTL 学习资源 GitHub参考项目 GeeksforGeeks教程 2. 在线书店（中级）项目功能 图书分类展示 购物车功能（CookieSession存储） 订单生成与支付模拟 图书搜索与分页 技术要点 Cookie实现购物车持久化 事务处理（订单与库存同步） 连接池优化（DruidHikariCP） 分页算法实现 文件上传（图书封面） 学习资源 JavaTpoint案例 GitHub完整代码 3. 博客发布平台（进阶）项目功能 文章发布与富文本编辑（CKEditor） 评论与回复系统 文章分类标签 Markdown格式支持 技术要点 Servlet处理RESTful风格API 防止XSS攻击（HTML过滤） 数据库事务管理（评论嵌套） 异步请求处理（AJAX + Servlet） 学习资源 博客系统教程 GitHub参考实现 4. 在线考试系统（综合）项目功能 随机组卷（题库管理） 考试倒计时 自动评分 成绩统计图表 技术要点 HttpSession存储考试进度 定时任务（TimerTask调度） 复杂SQL查询（多表关联） 数据可视化（JFreeChart） 学习资源 Guru99项目指南 GitHub源码 5. 文件云存储系统（高阶）项目功能 多文件上传下载 文件分享链接生成 存储空间限制 文件版本管理 技术要点 Part接口处理大文件 断点续传（Range请求头） 安全控制（防盗链） 文件加密存储（AES） 学习资源 Baeldung文件上传教程 GitHub参考项目 6. API网关模拟（架构级）项目功能 请求路由转发 接口限流（令牌桶算法） 身份鉴权（JWT验证） 请求日志记录 技术要点 Filter链式处理 动态路由配置（XMLJSON） 反射机制加载策略 NIO高性能处理 学习资源 API网关设计文档 GitHub基础实现 免费学习平台推荐 平台 特色 推荐项目 GitHub 开源项目代码参考 搜索”servlet project” JavaTpoint 分步骤图文教程 Servlet项目合集 CodeWithHarry 视频+代码实操 YouTube教程 GeeksforGeeks 算法与项目结合 Servlet实践专题 项目实践建议 从简单到复杂：先完成用户管理系统，再挑战文件云存储 代码规范：遵循阿里巴巴Java开发手册 版本控制：使用Git管理代码（Git入门指南） 性能优化：每个项目完成后用JMeter压测 通过完成以上3-4个项目，可系统掌握Servlet开发核心技能，并为学习Spring MVC等框架打下坚实基础。"},{"title":"Servlet学习路线","path":"/2025/02/17/Servlet学习路线/","content":"以下是为期2个月的Servlet系统学习路线，结合理论实践并重，包含从基础到高级的核心知识点 第一阶段：基础入门（2周）1. 环境搭建 安装JDK 17+ + Tomcat 10.x 配置IntelliJ IDEA的Web项目模板 创建第一个Servlet（@WebServlet注解方式） 2. HTTP协议精要 掌握请求结构：GET /user?id=1 HTTP/1.1 理解状态码：200404500 实验：使用Postman发送不同请求类型 3. Servlet生命周期 实现init() → service() → destroy() 配置load-on-startup参数 示例：统计Servlet被访问次数 4. 请求响应处理 获取参数：request.getParameter(name) 设置响应头：response.setContentType() 实践：开发文件下载功能 第二阶段：深度掌握（2周）1. 会话管理 Cookie机制：Cookie userCookie = new Cookie(user, admin) Session实现：HttpSession session = request.getSession() 案例：实现购物车功能 2. 过滤器与监听器 开发字符编码过滤器（CharacterEncodingFilter） 实现ServletRequestListener统计请求量 实践：日志记录过滤器 3. 文件上传 使用Part接口处理文件：request.getPart(file) 配置@MultipartConfig 示例：头像上传功能 第三阶段：整合应用（3周）1. 数据库集成 配置Druid连接池 使用JDBC Template操作数据库 案例：用户管理系统CRUD 2. JSP整合 掌握EL表达式：$user.name 学习JSTL标签：c:forEach 实践：开发图书管理系统前端页面 3. MVC模式实现 自定义前端控制器（Front Controller） 实现请求路由映射 项目：仿Spring MVC简易框架 第四阶段：性能优化（1周）1. 线程安全 分析Servlet的线程安全问题 使用synchronized保护共享资源 案例：库存扣减场景 2. 连接池优化 配置Tomcat JDBC Pool 设置最大活跃连接数 压力测试：JMeter模拟100并发 3. 缓存策略 使用Ehcache缓存热点数据 实现响应内容缓存 示例：商品分类缓存 配套实战项目 项目1：电商用户中心 功能模块：注册登录个人资料 技术点：Session维持登录状态、MD5密码加密 代码量：约1500行 项目2：在线文档管理系统 功能模块：文件上传权限控制版本管理 技术点：RBAC权限模型、文件断点续传 代码量：约3000行 项目3：API网关原型 功能模块：路由转发限流熔断 技术点：过滤器链、令牌桶算法 代码量：约2000行 学习资源推荐 类型 推荐内容 经典书籍 《Head First Servlets JSP》 在线课程 极客时间《Java Web开发实战》 官方文档 Oracle Java EE 8教程 开发工具 Postman + VisualVM 学习路线表 周数 学习重点 关键实践任务 1 Servlet基础+HTTP协议 开发文件下载服务器 2 会话管理+过滤器 实现购物车系统 3 JSP整合+EL表达式 构建图书管理前端 4 JDBC整合+连接池 用户管理系统CRUD 5 MVC模式+自定义框架 仿Spring MVC路由实现 6 性能优化+安全防护 压力测试与缓存优化 7 项目实战1 完成电商用户中心 8 项目实战2 构建文档管理系统 常见误区提醒 忽略HTTP协议基础：直接跳转框架学习导致原理不清 过度依赖框架：应先掌握原生Servlet开发能力 线程安全意识薄弱：在多用户场景出现数据错乱 异常处理不完善：未正确关闭数据库连接等资源 通过这个路线系统学习，可达到独立开发企业级Web应用的水平，并为学习Spring MVC打下坚实基础。建议每周保持至少15小时的有效学习时间，重点模块配合思维导图加深理解。"},{"title":"如何判断自己不适合做一名软件开发工程师","path":"/2025/02/16/如何判断自己不适合做一名软件开发工程师/","content":"判断自己是否适合从事软件开发工作，需要结合个人特质、职业兴趣和实际工作体验综合评估。以下是一些关键判断标准及对应的思考方向： 一、核心能力匹配度 持续学习意愿薄弱 表现：对新技术（如AI编程工具、云原生技术）缺乏好奇心，学习文档时感到枯燥。 案例：面对Java 17新特性（如Record类）时，宁愿复制旧代码也不愿尝试改进。 数据：2023年Stack Overflow调查显示，83%的开发者每周至少投入5小时学习新技术。 逻辑思维能力欠缺 表现：调试代码时无法定位问题根源，面对LeetCode中等难度题（如二叉树遍历）需要超过2小时。 测试：尝试完成「合并两个有序链表」算法题，若无法在30分钟内写出非递归解法需警惕。 抽象建模能力不足 表现：难以将业务需求转化为类图设计，例如设计电商订单系统时无法抽象出订单、库存、支付等核心领域模型。 二、工作体验反馈 代码编写痛苦指数 现象：每次编写超过50行代码就感到焦躁，IDE报错提示引发情绪抵触。 对比：资深开发者面对报错时会产生”解谜”兴趣，而非挫败感。 成就感缺失周期 指标：连续3个月未因解决技术问题（如优化接口响应时间）产生愉悦感。 案例：完成微服务改造后，对吞吐量提升50%的成果无感。 职业倦怠强度 表现：看到技术大会通知第一反应是排斥，而非期待学习新知识。 数据：GitHub年度活跃度下降超过60%（个人账号提交记录对比）。 三、生理心理信号 持续身体排斥反应 症状：长时间面对屏幕后出现偏头痛、视力模糊等生理不适，且调整工作环境后无改善。 医学数据：约5%人群存在「屏幕不适综合征」，可能不适合长期编程工作。 思维模式冲突 表现：更享受与人直接互动（如销售洽谈），而非通过代码间接解决问题。 职业倾向测试：MBTI中「E型人格」（外向型）在开发岗位占比仅28%（来源：2023年LinkedIn数据）。 时间感知扭曲 现象：预估开发任务耗时偏差率持续50%（如预估3天实际需1周），显示缺乏工程化思维。 四、转型建议路径若符合≥3项上述特征，可考虑以下发展方向： 适合方向 能力迁移点 典型案例 技术产品经理 需求分析能力+技术理解力 从开发转岗钉钉产品经理 质量保障工程师 逻辑思维+测试用例设计 转型为自动化测试专家 技术布道师 技术热情+沟通表达能力 阿里云MVP技术推广 项目管理 工程理解力+协调能力 成为PMP认证项目经理 技术写作 文档解读能力+文字表达 撰写Spring官方文档 五、自我验证方法 3个月刻意训练实验 目标：每天投入2小时系统学习（如完成《Effective Java》精读） 验证：若无法坚持21天，说明缺乏基础驱动力 开源贡献体验 任务：为Apache Commons项目修复1个简单issue 观察：代码审查过程是否引发持续焦虑 黑客马拉松挑战 参与：48小时开发一个具备核心功能的DEMO 评估：过程中是享受创造还是煎熬 六、关键认知 适不适合≠能力高低：许多初期困难可通过训练改善（如设计模式应用） 职业光谱理论：技术岗位包含开发、架构、管理等多维度，可寻找适配角色 兴趣培养周期：对技术的兴趣常随能力提升而增长，建议至少坚持2年再评估 若经过系统尝试仍存在强烈不适感，及时转型反而是明智选择。软件开发只是万千职业中的一种，找到与个人特质匹配的领域才能实现价值最大化。"},{"title":"技术松鼠症","path":"/2025/02/15/技术松鼠症/","content":"“技术松鼠症”是一个非正式的术语，用来形容一种在技术领域常见的行为模式：不断收集和囤积技术知识、工具或资源，但很少实际应用或深入学习。这种行为类似于松鼠囤积食物的习惯，因此被称为“技术松鼠症”,这种行为在程序员、开发者和技术爱好者中较为常见。 主要特征 囤积资源： 收集大量教程、电子书、视频课程或工具，但很少真正使用。 订阅多个技术博客、新闻源或社区，但很少深入阅读或参与讨论。 浅尝辄止： 对新技术充满兴趣，但只停留在表面了解，缺乏深入学习。 频繁切换学习方向，无法专注于某一领域。 拖延实践： 总是计划“等准备好了再开始”，但迟迟不付诸行动。 害怕失败或不确定如何开始，导致学习成果无法转化为实际能力。 焦虑与满足感错位： 通过收集资源获得短暂的满足感，但长期来看会因缺乏实际进展而感到焦虑。 容易陷入“信息过载”，感到无所适从。 产生原因 信息爆炸： 互联网时代，技术资源唾手可得，导致人们容易陷入“收集癖”。 互联网上技术资源泛滥，容易让人陷入“选择困难”。 完美主义： 总想找到“最好的资源”或“最完美的学习路径”，导致行动拖延。 总想“学完所有知识再开始”，导致拖延。 恐惧落后： 技术更新速度快，害怕错过新技术，导致盲目跟风。 害怕在实践中犯错，选择停留在理论学习阶段。 缺乏目标： 没有明确的学习目标或职业规划，导致学习方向分散。 即时满足： 收集资源比实践更容易获得即时满足感。 如何克服技术松鼠症 设定明确目标： 确定短期和长期目标，例如“掌握Java核心知识”或“完成一个完整的项目”。 将目标分解为可执行的小任务。 确定学习的具体目标（如“掌握Spring Boot并完成一个项目”），避免盲目学习。 聚焦核心技能： 选择1-2个关键技术领域深入学习，而不是盲目追求广度。 例如，专注于Java开发或前端开发，而不是同时学习多种语言。 实践驱动学习： 通过项目实践巩固知识，例如开发一个博客系统或参与开源项目。 实践是检验学习成果的最佳方式。 学完一个知识点后，立即动手实践，哪怕是一个小项目。 限制资源收集： 选择1-2个高质量的学习资源，坚持学完后再寻找新的资源。 避免同时打开多个教程或课程。 选择1-2个高质量的学习资源，坚持学完，而不是不断寻找新资源。 分解任务： 将大目标拆解为小任务，逐步完成，避免 overwhelmed（感到不堪重负）。 建立学习习惯： 每天固定时间学习，例如早上1小时或晚上2小时。 使用番茄工作法（25分钟学习+5分钟休息）提高专注力。 定期复盘： 每周或每月回顾学习进展，调整学习计划。 记录已完成的任务和学到的知识，增强成就感。 接受不完美： 允许自己在实践中犯错，从错误中学习。 总结技术松鼠症是一种常见的学习误区，表现为过度收集资源而缺乏实际行动。通过设定目标、聚焦核心技能、实践驱动学习和建立良好习惯，可以有效克服这一问题，将囤积的知识转化为实际能力。记住：学习的价值不在于你收集了多少资源，而在于你掌握了多少技能。"},{"title":"初级","path":"/2025/02/15/初级/","content":"Java初级开发工程师全面成长路线目标：1年内掌握企业级开发全流程技术栈，达到可独立开发模块的水平 一、Java核心技术（1-3个月）1. 语言基础 核心语法：数据类型、流程控制、异常处理 面向对象：封装继承多态、接口抽象类 新特性：Lambda表达式、Stream API、Optional 学习资源：《Java核心技术卷Ⅰ》 + CodeGym实战平台 2. 高级特性 集合框架：ArrayListHashMap底层原理、Fail-Fast机制 多线程：线程池（ThreadPoolExecutor）、锁机制（ReentrantLock） IONIO：文件操作、网络通信模型 项目实战：开发多线程下载器（支持断点续传） 二、数据库与ORM（2-4个月）1. MySQL基础 SQL进阶：复杂查询（JOIN子查询）、事务隔离级别 性能优化：执行计划解读、索引设计原则 工具使用：Navicat、MySQL Workbench 2. ORM框架 MyBatis：动态SQL、二级缓存、插件开发 JPA：实体关系映射、Spring Data JPA 项目实战：电商系统商品模块（CRUD+分页查询） 三、Spring生态（3-6个月）1. Spring Boot 核心功能：自动配置原理、Starter机制 Web开发：RESTful API设计、参数校验 集成测试：MockMVC、Testcontainers 项目实战：博客系统API（文章评论分类管理） 2. Spring Cloud Alibaba 服务注册：Nacos集群搭建 服务调用：OpenFeign声明式调用 熔断限流：Sentinel规则配置 项目实战：微服务天气查询系统（对接第三方API） 四、前端基础（1-2个月）1. 三件套 HTML5：语义化标签、表单验证 CSS3：Flex布局、媒体查询 JavaScript：ES6语法、DOM操作 2. 前端框架 Vue基础：Vue CLI、组件通信 Ajax：Axios封装、跨域处理 项目实战：管理后台前端（配合Spring Boot API） 五、开发工具链（持续学习） 工具类型 必学工具 核心技能 版本控制 Git 分支管理、冲突解决、Rebase操作 构建工具 MavenGradle 多模块构建、依赖冲突解决 容器化 Docker Dockerfile编写、Compose部署 持续集成 Jenkins Pipeline脚本编写、自动化部署 开发环境 IntelliJ IDEA 高效插件（Lombok、MyBatisX） Linux基础 常用命令 日志分析、服务部署、Shell脚本编写 六、工程实践（6-12个月）1. 代码质量 单元测试：JUnit 5参数化测试、Mockito模拟 代码规范：阿里巴巴Java开发手册、Checkstyle 静态分析：SonarQube漏洞检测 2. 性能优化 JVM调优：GC日志分析、内存泄漏定位 SQL优化：慢查询日志、索引失效场景 缓存设计：Redis缓存穿透雪崩解决方案 3. 项目实战 综合项目：在线教育平台（含视频点播模块） 技术亮点： JWT权限认证 Elasticsearch课程搜索 支付宝沙箱支付集成 基于MinIO的文件存储 七、扩展技术栈（12+个月）1. 中间件 消息队列：RocketMQ事务消息 分布式锁：Redisson实现 配置中心：Apollo动态配置 2. 云原生 Kubernetes：Pod部署、Service暴露 Serverless：函数计算开发 监控体系：Prometheus + Grafana 3. 架构基础 DDD入门：领域模型设计 CQRS模式：读写分离实践 事件驱动：Spring Cloud Stream 学习路径图gantt title Java初级工程师成长路线 dateFormat YYYY-MM section 基础阶段 Java核心 :2023-01, 3m MySQL与ORM :2023-04, 2m section 框架阶段 Spring Boot :2023-03, 3m Spring Cloud :2023-06, 2m section 工程实践 工具链掌握 :2023-05, 4m 项目实战 :2023-07, 6m section 扩展提升 中间件与云原生 :2024-01, 6m 关键建议 每日代码量：保持200+行有效代码产出 技术博客：每月至少2篇技术文章（推荐掘金平台） 开源参与：从文档翻译开始参与Apache项目 面试准备：定期刷牛客网真题 技术社交：加入本地技术社区（如Meetup） 避坑提醒： 不要过早追求”源码级理解”，先掌握使用再研究原理 避免重复造轮子，合理使用开源组件 警惕”技术松鼠症”，学完一个技术栈再开启下一个 按照此路线坚持学习+实践，1年后可达到： 技术能力：可独立完成中小型系统模块开发 工程能力：具备基础架构设计思维 薪资水平：一线城市15-25K，二线城市8-15K"},{"title":"HashMap方法集详解","path":"/2025/02/15/HashMap/","content":"computeIfAbsent 方法 描述：computeIfAbsent 用于获取key对应的value，如果key不存在，则将生成的值存入map中，并返回 public class MapTest public static void main(String[] args) MapString,String map = new HashMap(); map.put(key1,张三); // 如果key存在，则返回key对应的value，如果不存在，则将生成的值存入map中，并返回 System.out.println(map.computeIfAbsent(key1, k - getNum())); System.out.println(map.computeIfAbsent(key2, k - getNum())); private static String getNum() return 函数生成数据; 输出:张三函数生成数据 putIfAbsent 方法 描述：putIfAbsent 用于获取key对应的value，如果key不存在，则将存固定的值存入map中，并返回key上一个存值 public class MapTest public static void main(String[] args) MapString,String map = new HashMap(); map.put(key1,张三); System.out.println(map.putIfAbsent(key1, 存固定的值)); System.out.println(map.putIfAbsent(key2, value));//存入固定值,返回上一个存值 System.out.println(map.get(key2)); 输出:张三nullvalue"},{"title":"typeScript命令行运行","path":"/2024/12/28/typeScript命令行运行/","content":"tsc xxx.ts //执行该ts文件生成.js文件node xxx.js //运行js文件输出结果"},{"title":"jdk21新特性","path":"/2024/12/28/jdk21新特性/","content":"增强的 switch 表达式 描述：switch 现在可以用作表达式，支持返回值，并支持 case 的合并及模式匹配 public class Main public static void main(String[] args) String day = MONDAY; String result = switch (day) case MONDAY, FRIDAY - Workday; case SATURDAY, SUNDAY - Weekend; default - throw new IllegalArgumentException(Unknown day); ; System.out.println(result); // 输出：Workday 虚拟线程（Virtual Threads） 虚拟线程是轻量级线程，由 JDK 管理的，可以创建大量线程而不会产生过多的资源开销 public class Main public static void main(String[] args) throws InterruptedException Thread.startVirtualThread(() - System.out.println(Hello from virtual thread); ).join(); 流（Stream API）增强 新方法：takeWhile、dropWhile、iterate 流操作新增了 takeWhile 和 dropWhile，用于基于条件筛选流元素，iterate 可以创建无限流 public class Main public static void main(String[] args) ListInteger numbers = List.of(1, 2, 3, 4, 5, 6); numbers.stream().takeWhile(n - n 4).forEach(System.out::println); // 输出 1, 2, 3 集合 API 增强 List.of、Set.of、Map.of 静态工厂方法 用于创建不可变的集合对象，简化了集合初始化的过程 public class Main public static void main(String[] args) ListString list = List.of(a, b, c); SetString set = Set.of(a, b, c); MapString, Integer map = Map.of(a, 1, b, 2); copyOf 方法用于创建现有集合的不可变副本 public class Main public static void main(String[] args) ListString list = List.of(a, b); ListString copyList = List.copyOf(list); // 创建不可变副本 新日期和时间 API JDK 8 引入了 java.time API，JDK 21 中此 API 经过改进，支持更多的日期和时间操作 public class Main public static void main(String[] args) LocalDate date = LocalDate.now(); LocalTime time = LocalTime.now(); LocalDateTime dateTime = LocalDateTime.of(date, time); 其他增强特性 public class Main public static void main(String[] args) String json = name: John, age: 30 ; Var 局部变量类型推断 public class Main public static void main(String[] args) var list = List.of(a, b, c); for (var item : list) System.out.println(item);"},{"title":"java中的大数","path":"/2024/12/28/java中的大数/","content":"BigDecimal 适用于任意精度的浮点数运算 1、add(BigDecimal val): 两个大浮点数相加 import java.math.BigDecimal;public class BigDecimalTest public static void main(String[] args) BigDecimal bigDecimal = new BigDecimal(50000000); BigDecimal bigDecimal1 = new BigDecimal(30000000); bigDecimal = bigDecimal.add(bigDecimal1); System.out.println(bigDecimal:+bigDecimal); // 结果：bigDecimal:80000000 subtract(BigDecimal val): 两个大浮点数相减 import java.math.BigDecimal;public class BigDecimalTest public static void main(String[] args) BigDecimal bigDecimal = new BigDecimal(50000000); BigDecimal bigDecimal1 = new BigDecimal(30000000); bigDecimal = bigDecimal.subtract(bigDecimal1); System.out.println(bigDecimal:+bigDecimal); // 结果：bigDecimal:20000000 multiply(BigDecimal val): 两个大浮点数相乘 import java.math.BigDecimal;public class BigDecimalTest public static void main(String[] args) BigDecimal bigDecimal = new BigDecimal(50000000); BigDecimal bigDecimal1 = new BigDecimal(30000000); bigDecimal = bigDecimal.multiply(bigDecimal1); System.out.println(bigDecimal:+bigDecimal); // 结果：bigDecimal:150000000000000000 divide(BigDecimal val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式 import java.math.BigDecimal;public class BigDecimalTest public static void main(String[] args) BigDecimal bigDecimal = new BigDecimal(50000000); BigDecimal bigDecimal1 = new BigDecimal(30000000); bigDecimal = bigDecimal.divide(bigDecimal1, BigDecimal.ROUND_HALF_UP); System.out.println(bigDecimal:+bigDecimal); // 结果：bigDecimal:1.666666666666666666666666666666666666666666666666666666666666666666 BigInteger: 适用于任意精度的整数运算 1、add(BigInteger val): 两个大浮点数相加 import java.math.BigInteger;public class BigIntegerTest public static void main(String[] args) BigInteger BigInteger = new BigInteger(50000000); BigInteger BigInteger1 = new BigInteger(30000000); BigInteger = BigInteger.add(BigInteger1); System.out.println(BigInteger:+BigInteger); // 结果：BigInteger:80000000 subtract(BigInteger val): 两个大浮点数相减 import java.math.BigInteger;public class BigIntegerTest public static void main(String[] args) BigInteger BigInteger = new BigInteger(50000000); BigInteger BigInteger1 = new BigInteger(30000000); BigInteger = BigInteger.subtract(BigInteger1); System.out.println(BigInteger:+BigInteger); // 结果：BigInteger:20000000 multiply(BigInteger val): 两个大浮点数相乘 import java.math.BigInteger;public class BigIntegerTest public static void main(String[] args) BigInteger BigInteger = new BigInteger(50000000); BigInteger BigInteger1 = new BigInteger(30000000); BigInteger = BigInteger.multiply(BigInteger1); System.out.println(BigInteger:+BigInteger); // 结果：BigInteger:150000000000000000 divide(BigInteger val, RoundingMode roundingMode): 两个大浮点数相除，结果可以指定舍入模式 import java.math.BigInteger;public class BigIntegerTest public static void main(String[] args) BigInteger BigInteger = new BigInteger(50000000); BigInteger BigInteger1 = new BigInteger(30000000); BigInteger = BigInteger.divide(BigInteger1); System.out.println(BigInteger:+BigInteger); // 结果：BigInteger:1"},{"title":"Hello World","path":"/2024/12/28/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new My New Post More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment"}]